<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>rsync同步操作</title>
      <link href="/2018/10/20/SERVICES/DAY5/Services05/"/>
      <url>/2018/10/20/SERVICES/DAY5/Services05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>• 命令用法<br>– rsync [选项…]   源目录    目标目录</p><p>• 同步与复制的差异<br>– 复制:完全拷贝源到目标<br>– 同步:增量拷贝,只传输变化过的数据<br>• rsync操作选项<br> – -n:测试同步过程,不做实际修改<br> – –delete:删除目标文件夹内多余的文档<br> – -a:归档模式,相当于-rlptgoD<br> – -v:显示详细操作信息<br> – -z:传输过程中启用压缩/解压</p><p>[root@svr7 ~]# mkdir /stu01   /test01<br>[root@svr7 ~]# cp /etc/passwd /etc/fstab /stu01/<br>[root@svr7 ~]# ls /stu01/</p><p>[root@svr7 ~]# rsync -avz /stu01/  /test01/<br>[root@svr7 ~]# ls /test01/</p><p>[root@svr7 ~]# touch /stu01/1.txt</p><p>[root@svr7 ~]# rsync -avz /stu01/  /test01/<br>[root@svr7 ~]# ls /test01/</p><p>[root@svr7 ~]# echo haha  &gt;&gt; /stu01/fstab<br>[root@svr7 ~]# rsync -avz /stu01/  /test01/<br>[root@svr7 ~]# ls /test01/</p><p>##################################################</p><p>[root@svr7 ~]# ls /test01/<br>[root@svr7 ~]# ls /stu01/<br>[root@svr7 ~]# rsync –delete -avz  /stu01/  /test01</p><p>[root@svr7 ~]# touch /test01/10.txt   /test01/a.txt   </p><p>[root@svr7 ~]# ls /test01/<br>[root@svr7 ~]# ls /stu01/<br>[root@svr7 ~]# rsync –delete -avz  /stu01/  /test0<br>[root@svr7 ~]# ls /test01/<br>[root@svr7 ~]# ls /stu01/</p><p>##################################################<br>rsync+SSH同步(远程同步)</p><p>• 与远程的 SSH目录保持同步<br>– 下行:rsync […]  user@host:远程目录      本地目录<br>– 上行:rsync […]  本地目录      user@host:远程目录</p><p>虚拟机A</p><h1 id="rsync-–delete-avz-opt-root-192-168-4-207-opt"><a href="#rsync-–delete-avz-opt-root-192-168-4-207-opt" class="headerlink" title="rsync –delete -avz /opt/  root@192.168.4.207:/opt/"></a>rsync –delete -avz /opt/  <a href="mailto:root@192.168.4.207" target="_blank" rel="noopener">root@192.168.4.207</a>:/opt/</h1><p>虚拟机B</p><h1 id="ls-opt"><a href="#ls-opt" class="headerlink" title="ls /opt"></a>ls /opt</h1><p>虚拟机A</p><h1 id="touch-opt-1-10-txt"><a href="#touch-opt-1-10-txt" class="headerlink" title="touch /opt/{1..10}.txt"></a>touch /opt/{1..10}.txt</h1><h1 id="rsync-–delete-avz-opt-root-192-168-4-207-opt-1"><a href="#rsync-–delete-avz-opt-root-192-168-4-207-opt-1" class="headerlink" title="rsync –delete -avz /opt/  root@192.168.4.207:/opt/"></a>rsync –delete -avz /opt/  <a href="mailto:root@192.168.4.207" target="_blank" rel="noopener">root@192.168.4.207</a>:/opt/</h1><p>虚拟机B</p><h1 id="ls-opt-1"><a href="#ls-opt-1" class="headerlink" title="ls /opt"></a>ls /opt</h1><p>####################################################<br>实时同步<br>一、采用公钥与私钥，实现ssh无密码验证<br>虚拟机A：<br>1.生成的公钥与私钥<br>[root@svr7 ~]# ssh-keygen           #一路回车<br>2.查看生成的公钥与私钥<br>[root@svr7 ~]# ls /root/.ssh/<br>id_rsa(私钥)  id_rsa.pub(公钥)<br>known_hosts(记录远程管理过的所有机器)<br>3.复制公钥到远程主机</p><h1 id="ssh-copy-id-root-192-168-4-207"><a href="#ssh-copy-id-root-192-168-4-207" class="headerlink" title="ssh-copy-id root@192.168.4.207"></a>ssh-copy-id <a href="mailto:root@192.168.4.207" target="_blank" rel="noopener">root@192.168.4.207</a></h1><h1 id="rsync-–delete-avz-opt-root-192-168-4-207-opt-2"><a href="#rsync-–delete-avz-opt-root-192-168-4-207-opt-2" class="headerlink" title="rsync –delete -avz /opt/  root@192.168.4.207:/opt/"></a>rsync –delete -avz /opt/  <a href="mailto:root@192.168.4.207" target="_blank" rel="noopener">root@192.168.4.207</a>:/opt/</h1><p>虚拟机B：<br>[root@pc207 ~]# ls /root/.ssh/<br>authorized_keys(传递过来的公钥) </p><p>#######################################################<br>二、监控目录内容的变化</p><p>安装源码包inotify-tools工具</p><p>1.确认源码包<br>[root@svr7 ~]# ls /tools/<br>inotify-tools-3.13.tar.gz<br>2.安装gcc与make工具<br>[root@svr7 ~]# yum -y install gcc make<br>3.解包</p><h1 id="tar-xf-tools-inotify-tools-3-13-tar-gz-C"><a href="#tar-xf-tools-inotify-tools-3-13-tar-gz-C" class="headerlink" title="tar -xf /tools/inotify-tools-3.13.tar.gz  -C /"></a>tar -xf /tools/inotify-tools-3.13.tar.gz  -C /</h1><h1 id="ls"><a href="#ls" class="headerlink" title="ls /"></a>ls /</h1><p>4.进行编译安装</p><h1 id="cd-inotify-tools-3-13"><a href="#cd-inotify-tools-3-13" class="headerlink" title="cd /inotify-tools-3.13/"></a>cd /inotify-tools-3.13/</h1><h1 id="configure-进行配置"><a href="#configure-进行配置" class="headerlink" title="./configure   #进行配置"></a>./configure   #进行配置</h1><h1 id="make-编译"><a href="#make-编译" class="headerlink" title="make          #编译"></a>make          #编译</h1><h1 id="make-install-编译安装"><a href="#make-install-编译安装" class="headerlink" title="make install  #编译安装"></a>make install  #编译安装</h1><h1 id="ls-usr-local-bin-inotifywait-确认程序文件"><a href="#ls-usr-local-bin-inotifywait-确认程序文件" class="headerlink" title="ls /usr/local/bin/inotifywait    #确认程序文件"></a>ls /usr/local/bin/inotifywait    #确认程序文件</h1><p>• 常用命令选项<br>  – -m,持续监控(捕获一个事件后不退出)<br>  – -r,递归监控、包括子目录及文件<br>  – -q,减少屏幕输出信息<br>  – -e,指定监视的modify、move、create、delete、attrib等事件类别</p><p>[root@svr7 /]# inotifywait  -rq /opt/</p><p>#####################################################<br>清空编译重新安装</p><h1 id="cd-inotify-tools-3-13-1"><a href="#cd-inotify-tools-3-13-1" class="headerlink" title="cd /inotify-tools-3.13/"></a>cd /inotify-tools-3.13/</h1><h1 id="make-clean-all-清空编译"><a href="#make-clean-all-清空编译" class="headerlink" title="make clean all    #清空编译"></a>make clean all    #清空编译</h1><h1 id="make"><a href="#make" class="headerlink" title="make"></a>make</h1><h1 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h1><p>##################################################<br>三、书写同步的脚本</p><h1 id="inotifywait-rq-opt"><a href="#inotifywait-rq-opt" class="headerlink" title="inotifywait  -rq /opt/"></a>inotifywait  -rq /opt/</h1><h1 id="rsync-–delete-avz-opt-root-192-168-4-207-opt-3"><a href="#rsync-–delete-avz-opt-root-192-168-4-207-opt-3" class="headerlink" title="rsync –delete -avz /opt/  root@192.168.4.207:/opt/"></a>rsync –delete -avz /opt/  <a href="mailto:root@192.168.4.207" target="_blank" rel="noopener">root@192.168.4.207</a>:/opt/</h1><pre><code>while循环体系，适合死循环   while  [条件判断]   do            循环执行的语句   done</code></pre><p>[root@svr7 /]# vim /root/rsync.sh</p><p>#!/bin/bash<br>while  inotifywait  -rqq /opt/<br>do<br> rsync –delete -az /opt/  <a href="mailto:root@192.168.4.207" target="_blank" rel="noopener">root@192.168.4.207</a>:/opt/<br>done &amp;</p><p>[root@svr7 /]# chmod +x /root/rsync.sh</p><p>[root@svr7 /]# /root/rsync.sh </p><p>[root@svr7 /]# pgrep -l rsync.sh  #查询脚本进程信息<br>[root@svr7 /]# killall rsync.sh   #杀死进程</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Cobbler装机平台</title>
      <link href="/2018/10/20/SERVICES/DAY5/PXE-server/"/>
      <url>/2018/10/20/SERVICES/DAY5/PXE-server/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>   在真机上，利用clone-vm7新建一台虚拟机，名字:PXE-Server</p><p>   1.设置防火墙为trusted<br>   2.当前及永久关闭SELinux<br>   3.配置IP地址：192.168.4.122/24<br>   4.搭建Yum仓库<br>   5.主机名：PXE.tedu.cn</p><p>######################################################<br>搭建一键装机平台<br>一 、搭建DHCP服务<br>1.安装dhcp<br>2.修改配置文件<br>subnet 192.168.4.0  netmask  255.255.255.0 {<br>  range 192.168.4.180  192.168.4.230;<br>  next-server  192.168.4.122;<br>  filename  “pxelinux.0”;<br>}</p><p>3.重起dhcpd服务，设置开机自起动</p><p>#####################################################<br>二、搭建tftp</p><p>1.安装tftp-server<br>2.启动tftp服务，设置开机自起动</p><ol start="3"><li><p>部署pxeliunx.0</p><h1 id="yum-provides-pxelinux-0"><a href="#yum-provides-pxelinux-0" class="headerlink" title="yum provides */pxelinux.0"></a>yum provides */pxelinux.0</h1><h1 id="rpm-ql-syslinux-grep-pxelinux-0"><a href="#rpm-ql-syslinux-grep-pxelinux-0" class="headerlink" title="rpm -ql syslinux | grep pxelinux.0"></a>rpm -ql syslinux | grep pxelinux.0</h1><h1 id="cp-usr-share-syslinux-pxelinux-0-var-lib-tftpboot"><a href="#cp-usr-share-syslinux-pxelinux-0-var-lib-tftpboot" class="headerlink" title="cp /usr/share/syslinux/pxelinux.0  /var/lib/tftpboot/"></a>cp /usr/share/syslinux/pxelinux.0  /var/lib/tftpboot/</h1><h1 id="ls-var-lib-tftpboot"><a href="#ls-var-lib-tftpboot" class="headerlink" title="ls /var/lib/tftpboot/"></a>ls /var/lib/tftpboot/</h1></li><li><p>部署光盘内容<br>[root@PXE ~]# yum -y install httpd<br>[root@PXE ~]# mkdir /var/www/html/rhel6<br>[root@PXE ~]# mkdir /var/www/html/rhel7</p></li></ol><p>[root@PXE ~]# mount /dev/cdrom  /mnt/      #光盘为rhel7<br>[root@PXE ~]# ls /mnt/<br>[root@PXE ~]# cp -r  /mnt/*    /var/www/html/rhel7/</p><p>[root@PXE ~]# umount  /mnt<br>[root@PXE ~]# mount /dev/cdrom  /mnt/   #光盘为rhel6<br>[root@PXE ~]# ls /mnt/<br>[root@PXE ~]# cp -r  /mnt/*    /var/www/html/rhel6/</p><p>[root@PXE ~]# du  -sh /var/www/html/rhel7/<br>[root@PXE ~]# du  -sh /var/www/html/rhel6/</p><p>5.部署rhel7、rhel6   的启动内核与驱动程序</p><h1 id="mkdir-var-lib-tftpboot-rhel6"><a href="#mkdir-var-lib-tftpboot-rhel6" class="headerlink" title="mkdir /var/lib/tftpboot/rhel6"></a>mkdir /var/lib/tftpboot/rhel6</h1><h1 id="mkdir-var-lib-tftpboot-rhel7"><a href="#mkdir-var-lib-tftpboot-rhel7" class="headerlink" title="mkdir /var/lib/tftpboot/rhel7"></a>mkdir /var/lib/tftpboot/rhel7</h1><h1 id="cp-var-www-html-rhel6-isolinux-vmlinuz"><a href="#cp-var-www-html-rhel6-isolinux-vmlinuz" class="headerlink" title="cp /var/www/html/rhel6/isolinux/vmlinuz"></a>cp /var/www/html/rhel6/isolinux/vmlinuz</h1><pre><code>/var/www/html/rhel6/isolinux/initrd.img            /var/lib/tftpboot/rhel6/</code></pre><h1 id="cp-var-www-html-rhel7-isolinux-vmlinuz"><a href="#cp-var-www-html-rhel7-isolinux-vmlinuz" class="headerlink" title="cp /var/www/html/rhel7/isolinux/vmlinuz"></a>cp /var/www/html/rhel7/isolinux/vmlinuz</h1><pre><code>/var/www/html/rhel7/isolinux/initrd.img               /var/lib/tftpboot/rhel7/</code></pre><h1 id="ls-var-lib-tftpboot-rhel7"><a href="#ls-var-lib-tftpboot-rhel7" class="headerlink" title="ls /var/lib/tftpboot/rhel7"></a>ls /var/lib/tftpboot/rhel7</h1><h1 id="ls-var-lib-tftpboot-rhel6"><a href="#ls-var-lib-tftpboot-rhel6" class="headerlink" title="ls /var/lib/tftpboot/rhel6"></a>ls /var/lib/tftpboot/rhel6</h1><p>6.部署图形模块与背景</p><h1 id="cp-var-www-html-rhel6-isolinux-vesamenu-c32"><a href="#cp-var-www-html-rhel6-isolinux-vesamenu-c32" class="headerlink" title="cp /var/www/html/rhel6/isolinux/vesamenu.c32"></a>cp /var/www/html/rhel6/isolinux/vesamenu.c32</h1><pre><code>/var/lib/tftpboot/</code></pre><h1 id="rpm-ql-syslinux-grep-jpg"><a href="#rpm-ql-syslinux-grep-jpg" class="headerlink" title="rpm -ql syslinux | grep jpg"></a>rpm -ql syslinux | grep jpg</h1><h1 id="cp-usr-share-doc-syslinux-4-05-sample-syslinux-splash-jpg-var-lib-tftpboot"><a href="#cp-usr-share-doc-syslinux-4-05-sample-syslinux-splash-jpg-var-lib-tftpboot" class="headerlink" title="cp /usr/share/doc/syslinux-4.05/sample/syslinux_splash.jpg   /var/lib/tftpboot/"></a>cp /usr/share/doc/syslinux-4.05/sample/syslinux_splash.jpg   /var/lib/tftpboot/</h1><h1 id="ls-var-lib-tftpboot-1"><a href="#ls-var-lib-tftpboot-1" class="headerlink" title="ls /var/lib/tftpboot/"></a>ls /var/lib/tftpboot/</h1><p>7.部署菜单文件</p><h1 id="mkdir-var-lib-tftpboot-pxelinux-cfg"><a href="#mkdir-var-lib-tftpboot-pxelinux-cfg" class="headerlink" title="mkdir /var/lib/tftpboot/pxelinux.cfg"></a>mkdir /var/lib/tftpboot/pxelinux.cfg</h1><h1 id="cp-var-www-html-rhel6-isolinux-isolinux-cfg"><a href="#cp-var-www-html-rhel6-isolinux-isolinux-cfg" class="headerlink" title="cp /var/www/html/rhel6/isolinux/isolinux.cfg"></a>cp /var/www/html/rhel6/isolinux/isolinux.cfg</h1><pre><code>/var/lib/tftpboot/pxelinux.cfg/default</code></pre><h1 id="chmod-644-var-lib-tftpboot-pxelinux-cfg-default"><a href="#chmod-644-var-lib-tftpboot-pxelinux-cfg-default" class="headerlink" title="chmod 644 /var/lib/tftpboot/pxelinux.cfg/default"></a>chmod 644 /var/lib/tftpboot/pxelinux.cfg/default</h1><h1 id="ls-l-var-lib-tftpboot-pxelinux-cfg-default"><a href="#ls-l-var-lib-tftpboot-pxelinux-cfg-default" class="headerlink" title="ls -l /var/lib/tftpboot/pxelinux.cfg/default"></a>ls -l /var/lib/tftpboot/pxelinux.cfg/default</h1><p>8.修改菜单文件内容</p><h1 id="vim-var-lib-tftpboot-pxelinux-cfg-default"><a href="#vim-var-lib-tftpboot-pxelinux-cfg-default" class="headerlink" title="vim /var/lib/tftpboot/pxelinux.cfg/default"></a>vim /var/lib/tftpboot/pxelinux.cfg/default</h1><p>……<br>menu background syslinux_splash.jpg<br>menu title Welcome to PXE Server!<br>……<br>label linux<br>  menu label Install RHEL7.2<br>  kernel rhel7/vmlinuz<br>  append initrd=rhel7/initrd.img</p><p>label vesa<br>  menu label Install RHEL6.7<br>  kernel rhel6/vmlinuz<br>  append initrd=rhel6/initrd.img </p><p>label local<br>  menu label Boot from local drive<br>  menu default                       #读秒结束最后默认选择<br>  localboot 0xffff</p><p>#####################################################<br>三、搭建httpd服务共享光盘所有内容</p><p>1.启动服务<br>[root@PXE /]# systemctl restart httpd<br>[root@PXE /]# systemctl enable httpd</p><p>2.测试访问<br>[root@PXE /]# firefox  <a href="http://192.168.4.122/rhel6" target="_blank" rel="noopener">http://192.168.4.122/rhel6</a><br>[root@PXE /]# firefox  <a href="http://192.168.4.122/rhel7" target="_blank" rel="noopener">http://192.168.4.122/rhel7</a></p><p>####################################################<br>四、生成ks文件<br>[root@PXE /]# yum -y install system-config-kickstart</p><p>  修改Yum客户端配置文件的标示名<br>   [development]</p><p>[root@PXE /]# system-config-kickstart  #先看“软件包选择”<br>        软件包选择：  在“桌面”一栏选择—–&gt;第一个为GNOME  则为rhel7</p><pre><code>RHEL7的文件系统为xfs</code></pre><p>#####################################################</p><p>[root@PXE ~]# vim /etc/yum.repos.d/rhel7.repo<br>     执行向rhel6的光盘</p><p> [development]<br> name=rhel7<br> baseurl=<a href="http://192.168.4.122/rhel6" target="_blank" rel="noopener">http://192.168.4.122/rhel6</a><br> enabled=1<br> gpgcheck=0</p><p>[root@PXE ~]# yum clean all       #清空Yum缓存</p><p>[root@PXE ~]# system-config-kickstart<br>        软件包选择：  在“桌面”一栏选择—–&gt;第一个为KDE桌面  则为rhel6</p><pre><code>RHEL6的文件系统为ext4</code></pre><p>[root@PXE ~]# ls /root/ks*<br>/root/ks6.cfg  /root/ks7.cfg</p><p>#############################################<br>五、指定ks应答文件</p><p>1.共享ks应答文件<br>[root@PXE ~]# cp /root/ks*  /var/www/html/<br>[root@PXE ~]# ls /var/www/html/</p><p>2.修改菜单文件</p><h1 id="vim-var-lib-tftpboot-pxelinux-cfg-default-1"><a href="#vim-var-lib-tftpboot-pxelinux-cfg-default-1" class="headerlink" title="vim /var/lib/tftpboot/pxelinux.cfg/default"></a>vim /var/lib/tftpboot/pxelinux.cfg/default</h1><p>label linux<br>  menu label Install RHEL7.2<br>  kernel rhel7/vmlinuz<br>  append initrd=rhel7/initrd.img ks=<a href="http://192.168.4.122/ks7.cfg" target="_blank" rel="noopener">http://192.168.4.122/ks7.cfg</a></p><p>label vesa<br>  menu label Install RHEL6.7<br>  kernel rhel6/vmlinuz<br>  append initrd=rhel6/initrd.img ks=<a href="http://192.168.4.122/ks6.cfg" target="_blank" rel="noopener">http://192.168.4.122/ks6.cfg</a></p><p>####################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Cobbler装机平台</title>
      <link href="/2018/10/20/SERVICES/DAY5/cobbler/"/>
      <url>/2018/10/20/SERVICES/DAY5/cobbler/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不同版本的多系统的安装</p><p>一  安装一个CentOS虚拟机  </p><p>真机:<br>[root@room9pc01 ~]# ls /iso/<br>CentOS-7-x86_64-DVD-1708.iso</p><p>虚拟机要求:<br>             1.硬盘大小50G<br>             2.网络类型private1<br>             3.软件包选择 “带GUI的服务器”<br>             4.分区选择 “自动分区”</p><pre><code>5.配置IP地址:192.168.4.168/246.将CentOS放入光驱设备,搭建本地Yum仓库7.配置主机名:Cobbler.tedu.cn</code></pre><p>二、虚拟机设置  </p><h3 id="1-设置防火墙为trusted"><a href="#1-设置防火墙为trusted" class="headerlink" title="1.设置防火墙为trusted"></a>1.设置防火墙为trusted</h3><p>  firewall-cmd  –set-default-zone=trusted </p><h3 id="2-当前及永久设置SELinux状态为permissive"><a href="#2-当前及永久设置SELinux状态为permissive" class="headerlink" title="2.当前及永久设置SELinux状态为permissive"></a>2.当前及永久设置SELinux状态为permissive</h3><p> [root@localhost ~]# setenforce 0    #当前临时关闭<br> [root@localhost ~]# getenforce<br> [root@localhost ~]# vim /etc/selinux/config<br>  SELINUX=permissive</p><h3 id="三、利用scp真机传递Cobbler-zip包到虚拟机192-168-4-168中"><a href="#三、利用scp真机传递Cobbler-zip包到虚拟机192-168-4-168中" class="headerlink" title="三、利用scp真机传递Cobbler.zip包到虚拟机192.168.4.168中"></a>三、利用scp真机传递Cobbler.zip包到虚拟机192.168.4.168中</h3><p>scp /root/桌面/Cobbler.zip   <a href="mailto:root@192.168.4.168" target="_blank" rel="noopener">root@192.168.4.168</a>:/root/</p><p>##################################################</p><h2 id="重设root密码"><a href="#重设root密码" class="headerlink" title="重设root密码"></a>重设root密码</h2><h3 id="案例1-为虚拟机-server-重设管理密码"><a href="#案例1-为虚拟机-server-重设管理密码" class="headerlink" title="案例1:为虚拟机 server 重设管理密码"></a>案例1:为虚拟机 server 重设管理密码</h3><p>  1)重启系统,进入 recovery 恢复模式(修复模式)<br>  按e键，找到 linux16 行，末尾添加 rd.break console=tty0<br>  按 ctrl + x 启动<br>  2)以可写方式重新挂载 /sysroot,并切换到此环境<br>  switch_root# mount  -o  remount,rw  /sysroot<br>  switch_root# chroot  /sysroot<br>  sh-3.2#<br>  3)将root用户的密码设置为 redhat<br>   echo  redhat  |  passwd  –stdin  root<br>  4)重设SELinux安全标签(安全增强版Linux)<br>    touch  /.autorelabel    #让  SElinux  失忆<br>  5)先后执行 exit、reboot 完成修复<br>   exit<br>   reboot</p><p>##################################################</p><p>四、搭建Cobbler装机平台</p><p>  Cobbler概述软件，管理dhcp、tftp、Web服务<br>    自由的导入镜像与ks应答文件</p><p>1.解压Cobbler.zip包<br>[root@cobbler /]# unzip /root/Cobbler.zip -d /<br>[root@cobbler /]# cd /Cobbler/<br>[root@cobbler Cobbler]# ls</p><p>[root@cobbler /]# unzip /Cobbler/cobbler.zip  -d  /opt/<br>[root@cobbler /]# ls /opt/cobbler</p><p>五、安装cobbler主程序、工具包等<br>[root@cobbler /]# yum -y install /opt/cobbler/*.rpm</p><p>################################################################<br>cobbler网络装机部署</p><p>1.安装软件 cobbler cobbler-web dhcp tftp-server pykickstart httpd  tftp-server </p><p> cobbler         #cobbler程序包<br> cobbler-web     #cobbler的web服务包<br> pykickstart     #cobbler检查kickstart语法错误<br> httpd           #Apache web服务<br> dhcp            #dhcp服务<br> tftp-server     #tftp服务</p><p>2.配置cobbler<br>[root@cobbler /]# vim  /etc/cobbler/settings</p><p> next_server:   192.168.4.168    #设置下一个服务器还为本机<br> server:   192.168.4.168         #设置本机为cobbler服务器<br> manage_dhcp:   1                #设置cobbler管理dhcp服务<br> pxe_just_once:   1              #防止客户端重复安装操作系统</p><p> 开机启动： 匹配及停止<br>     1.硬盘启动    2.光驱设备     3.U盘     4.网络引导  </p><p>3.配置cobbler的dhcp<br>[root@svr7 /]# vim  /etc/cobbler/dhcp.template </p><p>  :%s  /旧/新/g      #全文替换</p><p>  :%s  /192.168.1/192.168.4/g    #全文替换</p><pre><code>5 次替换，共 4 行  </code></pre><p>4.绝对路径解压cobbler_boot.tar.gz    #众多的引导文件</p><h1 id="tar-tf-Cobbler-cobbler-boot-tar-gz-查看包里面内容"><a href="#tar-tf-Cobbler-cobbler-boot-tar-gz-查看包里面内容" class="headerlink" title="tar -tf  /Cobbler/cobbler_boot.tar.gz   #查看包里面内容"></a>tar -tf  /Cobbler/cobbler_boot.tar.gz   #查看包里面内容</h1><h1 id="tar-xPf-Cobbler-cobbler-boot-tar-gz-绝对路径释放"><a href="#tar-xPf-Cobbler-cobbler-boot-tar-gz-绝对路径释放" class="headerlink" title="tar -xPf  /Cobbler/cobbler_boot.tar.gz  #绝对路径释放"></a>tar -xPf  /Cobbler/cobbler_boot.tar.gz  #绝对路径释放</h1><h1 id="ls-var-lib-cobbler-loaders"><a href="#ls-var-lib-cobbler-loaders" class="headerlink" title="ls  /var/lib/cobbler/loaders/"></a>ls  /var/lib/cobbler/loaders/</h1><p>5.启动相关服务<br>[root@svr7 /]# systemctl restart cobblerd<br>[root@svr7 /]# systemctl enable cobblerd</p><p>[root@svr7 /]# systemctl restart httpd<br>[root@svr7 /]# systemctl enable httpd</p><p>[root@svr7 /]# systemctl restart tftp<br>[root@svr7 /]# systemctl enable tftp</p><p>[root@svr7 /]# systemctl restart rsyncd   #同步服务<br>[root@svr7 /]# systemctl enable rsyncd</p><p>6.同步刷新cobbler配置<br>[root@svr7 /]# cobbler sync   #检测配置是否正确<br>……<br><strong><em> TASK COMPLETE </em></strong></p><p>[root@svr7 /]# firefox <a href="https://192.168.4.168/cobbler_web" target="_blank" rel="noopener">https://192.168.4.168/cobbler_web</a></p><p>   用户名：cobbler<br>   密码：cobbler</p><p>##########################################################################################################<br>cobbler应用</p><p>  cobbler import  –path=挂载点   –name=导入系统命名（随意起）<br>导入安装镜像数据</p><h1 id="mount-dev-cdrom-dvd"><a href="#mount-dev-cdrom-dvd" class="headerlink" title="mount /dev/cdrom  /dvd"></a>mount /dev/cdrom  /dvd</h1><h1 id="ls-dvd"><a href="#ls-dvd" class="headerlink" title="ls /dvd/"></a>ls /dvd/</h1><h1 id="cobbler-import-–path-dvd-–name-CentOS7"><a href="#cobbler-import-–path-dvd-–name-CentOS7" class="headerlink" title="cobbler import –path=/dvd  –name=CentOS7"></a>cobbler import –path=/dvd  –name=CentOS7</h1><p>cobbler导入的镜像放在：/var/www/cobbler/ks_mirror</p><p>[root@cobbler /]# cobbler list    #查看有哪些系统<br>distros:<br>   CentOS7-x86_64        #安装客户端至少2G内存</p><p>profiles:<br>   CentOS7-x86_64</p><p>##############################################<br>删除</p><h1 id="cobbler-list"><a href="#cobbler-list" class="headerlink" title="cobbler list"></a>cobbler list</h1><h1 id="cobbler-profile-remove-–name-CentOS7-x86-64-删除菜单信息"><a href="#cobbler-profile-remove-–name-CentOS7-x86-64-删除菜单信息" class="headerlink" title="cobbler profile remove –name=CentOS7-x86_64  #删除菜单信息"></a>cobbler profile remove –name=CentOS7-x86_64  #删除菜单信息</h1><h1 id="cobbler-distro-remove-–name-CentOS7-x86-64-删除镜像信息"><a href="#cobbler-distro-remove-–name-CentOS7-x86-64-删除镜像信息" class="headerlink" title="cobbler distro remove –name=CentOS7-x86_64  #删除镜像信息"></a>cobbler distro remove –name=CentOS7-x86_64  #删除镜像信息</h1><p>###########################################</p><h1 id="umount-dvd"><a href="#umount-dvd" class="headerlink" title="umount /dvd/"></a>umount /dvd/</h1><h1 id="mount-dev-cdrom-dvd-将光盘换成RHEL7"><a href="#mount-dev-cdrom-dvd-将光盘换成RHEL7" class="headerlink" title="mount /dev/cdrom  /dvd   将光盘换成RHEL7"></a>mount /dev/cdrom  /dvd   将光盘换成RHEL7</h1><h1 id="ls-dvd-1"><a href="#ls-dvd-1" class="headerlink" title="ls /dvd/"></a>ls /dvd/</h1><p>  安装完成机器 默认root  密码  cobbler</p><p>############################################################################################################<br>自定义应答文件：开头注释行删除</p><p>[root@cobbler ~]# system-config-kickstart  #生成ks文件</p><p>必须默认kickstart文件存放位置：/var/lib/cobbler/kickstarts/</p><p>[root@cobbler ~]# cobbler list</p><p>修改kickstart文件：<br>[root@cobbler ~]# cobbler profile edit –name=CentOS7.4-A  –kickstart=/var/lib/cobbler/kickstarts/自定义.cfg</p><p>[root@cobbler ~]# cobbler profile report<br>[root@cobbler ~]# cobbler sync  #同步配置</p><p>############################################################################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>PXE装机</title>
      <link href="/2018/10/20/SERVICES/DAY4/Services04/"/>
      <url>/2018/10/20/SERVICES/DAY4/Services04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、综合实验<br>1.准备环境<br>2.部署两台Web服务器<br>虚拟机C：<br>[root@web1 ~]# yum -y install httpd<br>[root@web1 ~]# mkdir /var/www/qq  /var/www/163<br>[root@web1 ~]# echo ‘企鹅01’  &gt; /var/www/qq/index.html<br>[root@web1 ~]# echo ‘163 01’ &gt; /var/www/163/index.html<br>[root@web1 ~]# vim /etc/httpd/conf.d/nsd01.conf</p><p><virtualhost *:80=""><br>  ServerName    <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a><br>  DocumentRoot  /var/www/qq<br></virtualhost></p><p><virtualhost *:80=""><br>  ServerName    <a href="http://www.163.com" target="_blank" rel="noopener">www.163.com</a><br>  DocumentRoot  /var/www/163<br></virtualhost><br>[root@web1 ~]# systemctl restart httpd</p><p>虚拟机D<br>[root@web2 ~]# yum -y install httpd<br>[root@web2 ~]# mkdir  /var/www/qq /var/www/163<br>[root@web2 ~]# echo ‘企鹅02’ &gt; /var/www/qq/index.html<br>[root@web2 ~]# echo ‘163 02’ &gt; /var/www/163/index.html<br>[root@web2 ~]# vim /etc/httpd/conf.d/nsd01.conf</p><p><virtualhost *:80=""><br>  ServerName    <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a><br>  DocumentRoot  /var/www/qq<br></virtualhost></p><p><virtualhost *:80=""><br>  ServerName    <a href="http://www.163.com" target="_blank" rel="noopener">www.163.com</a><br>  DocumentRoot  /var/www/163<br></virtualhost><br>[root@web2 ~]# systemctl restart httpd</p><p>3.搭建DNS分离解析<br>[root@svr7 ~]# vim /etc/named.conf<br>view “nsd” {<br>  match-clients  { 192.168.4.7; };<br>  zone “163.com”  IN {<br>        type  master;<br>        file  “163.com.zone”; ——》192.168.4.10<br>   };<br>  zone “qq.com” IN {<br>        type master;<br>        file   “qq.com.zone”; ——》192.168.4.10<br>   };<br>};<br>view “other” {<br>  match-clients  { any; };<br>  zone “163.com”  IN {<br>        type  master;<br>        file  “163.com.other”; ——》192.168.4.20<br> };<br>  zone “qq.com”  IN {<br>        type  master;<br>        file  “qq.com.other”; ——》192.168.4.20<br> };<br>};</p><p>4.指定所有机器的DNS服务器为192.168.4.7</p><p>####################################################<br>部署DHCP服务器</p><p>• Dynamic Host Configuration Protocol<br>– 动态主机配置协议,由 IETF(Internet 网络工程师任<br>务小组)组织制定,用来简化主机地址分配管理</p><p>• 主要分配以下入网参数<br>– IP地址/子网掩码/广播地址<br>– 默认网关地址、DNS服务器地址</p><p>• DHCP地址分配的四次会话(广播进行，先到先得)<br>– DISCOVERY –&gt; OFFER –&gt; REQUEST –&gt; ACK</p><p>   在一个网络中，只能有一个DHCP服务器</p><p>##################################################<br>搭建DHCP服务器<br>1.安装软件包dhcp<br>[root@svr7 /]# yum -y install dhcp</p><p>2.修改主配置文件<br>[root@svr7 /]# vim /etc/dhcp/dhcpd.conf<br>  :r /usr/share/doc/dhcp*/dhcpd.conf.example</p><p> subnet  192.168.4.0  netmask  255.255.255.0 {  #分配的网段<br>   range 192.168.4.100  192.168.4.200;      #分配IP地址范围<br>   option domain-name-servers 192.168.4.7;  #分配的DNS服务器<br>   option routers 192.168.4.254;            #分配的网关地址<br>   default-lease-time 600;<br>   max-lease-time 7200;<br>     }</p><p>[root@svr7 /]# systemctl restart dhcpd </p><p>####################################################<br>网络装机服务器</p><p>网络装机的优势<br>• 规模化:同时装配多台主机<br>• 自动化:装系统、配置各种服务<br>• 远程实现:不需要光盘、U盘等物理安装介质</p><p>什么是PXE网络<br>• PXE,Pre-boot eXecution Environment<br>– 预启动执行环境,在操作系统之前运行<br>– 可用于远程安装</p><p>• 工作模式<br>– PXE client 集成在网卡的启动芯片中<br>– 当计算机引导时,从网卡芯片中把PXE client调入内存<br>执行,获取PXE server配置、显示菜单,根据用户选<br>择将远程引导程序下载到本机运行</p><p>• PXE服务端需要哪些服务组件?<br>– DHCP服务,分配IP地址、定位引导程序<br>– TFTP服务,提供引导程序下载<br>– HTTP服务,提供yum安装源</p><p>##############################################<br>一、DHCP服务器，指定PXE网络装机配置<br>[root@svr7 /]# vim /etc/dhcp/dhcpd.conf</p><p> subnet 192.168.4.0 netmask 255.255.255.0 {<br>  range 192.168.4.100  192.168.4.200;<br>  option domain-name-servers 192.168.4.7;<br>  option routers 192.168.4.254;<br>  default-lease-time 600;<br>  max-lease-time 7200;<br>  next-server 192.168.4.7;   #指定下一服务器IP地址<br>  filename “pxelinux.0”;     #指定网卡引导文件名称<br>  }</p><p>[root@svr7 /]# systemctl restart dhcpd</p><p>  pxelinux.0：网卡引导文件   网络装机说明书  二进制文件<br>                        安装一个软件可以自动产生</p><p>###################################################<br>二、搭建tftp服务，提供的众多文件</p><pre><code>tftp:简单的文件传输协议  默认端口号：69   默认共享位置：/var/lib/tftpboot</code></pre><p>1.安装软件包tftp-server<br>2.重起服务tftp<br>[root@svr7 /]# systemctl restart tftp</p><p>3.部署pxelinux.0文件</p><h1 id="yum-provides-pxelinux-0-查询仓库中哪个包产生改文件"><a href="#yum-provides-pxelinux-0-查询仓库中哪个包产生改文件" class="headerlink" title="yum  provides  */pxelinux.0   #查询仓库中哪个包产生改文件"></a>yum  provides  */pxelinux.0   #查询仓库中哪个包产生改文件</h1><h1 id="yum-y-install-syslinux"><a href="#yum-y-install-syslinux" class="headerlink" title="yum  -y install syslinux"></a>yum  -y install syslinux</h1><h1 id="rpm-ql-syslinux-grep-pxelinux-0-查询安装清单"><a href="#rpm-ql-syslinux-grep-pxelinux-0-查询安装清单" class="headerlink" title="rpm -ql syslinux | grep pxelinux.0   #查询安装清单"></a>rpm -ql syslinux | grep pxelinux.0   #查询安装清单</h1><h1 id="cp-usr-share-syslinux-pxelinux-0-var-lib-tftpboot"><a href="#cp-usr-share-syslinux-pxelinux-0-var-lib-tftpboot" class="headerlink" title="cp /usr/share/syslinux/pxelinux.0    /var/lib/tftpboot/"></a>cp /usr/share/syslinux/pxelinux.0    /var/lib/tftpboot/</h1><h1 id="ls-var-lib-tftpboot"><a href="#ls-var-lib-tftpboot" class="headerlink" title="ls /var/lib/tftpboot/"></a>ls /var/lib/tftpboot/</h1><p>4.部署菜单文件</p><p>  pxelinux.0—-》/var/lib/tftpboot/pxelinux.cfg/default</p><h1 id="mount-dev-cdrom-mnt"><a href="#mount-dev-cdrom-mnt" class="headerlink" title="mount /dev/cdrom  /mnt"></a>mount /dev/cdrom  /mnt</h1><h1 id="ls-mnt"><a href="#ls-mnt" class="headerlink" title="ls /mnt/"></a>ls /mnt/</h1><h1 id="mkdir-var-lib-tftpboot-pxelinux-cfg"><a href="#mkdir-var-lib-tftpboot-pxelinux-cfg" class="headerlink" title="mkdir /var/lib/tftpboot/pxelinux.cfg"></a>mkdir /var/lib/tftpboot/pxelinux.cfg</h1><h1 id="cp-mnt-isolinux-isolinux-cfg-var-lib-tftpboot-pxelinux-cfg-default"><a href="#cp-mnt-isolinux-isolinux-cfg-var-lib-tftpboot-pxelinux-cfg-default" class="headerlink" title="cp /mnt/isolinux/isolinux.cfg  /var/lib/tftpboot/pxelinux.cfg/default"></a>cp /mnt/isolinux/isolinux.cfg  /var/lib/tftpboot/pxelinux.cfg/default</h1><h1 id="ls-l-var-lib-tftpboot-pxelinux-cfg-default"><a href="#ls-l-var-lib-tftpboot-pxelinux-cfg-default" class="headerlink" title="ls -l  /var/lib/tftpboot/pxelinux.cfg/default"></a>ls -l  /var/lib/tftpboot/pxelinux.cfg/default</h1><h1 id="chmod-u-w-var-lib-tftpboot-pxelinux-cfg-default"><a href="#chmod-u-w-var-lib-tftpboot-pxelinux-cfg-default" class="headerlink" title="chmod u+w  /var/lib/tftpboot/pxelinux.cfg/default"></a>chmod u+w  /var/lib/tftpboot/pxelinux.cfg/default</h1><h1 id="ls-l-var-lib-tftpboot-pxelinux-cfg-default-1"><a href="#ls-l-var-lib-tftpboot-pxelinux-cfg-default-1" class="headerlink" title="ls -l  /var/lib/tftpboot/pxelinux.cfg/default"></a>ls -l  /var/lib/tftpboot/pxelinux.cfg/default</h1><p>5.部署 图形的模块与 背景图片</p><p>  vesamenu.c32  图形的模块<br>   splash.png   背景图片</p><h1 id="cp-mnt-isolinux-vesamenu-c32-mnt-isolinux-splash-png-var-lib-tftpboot"><a href="#cp-mnt-isolinux-vesamenu-c32-mnt-isolinux-splash-png-var-lib-tftpboot" class="headerlink" title="cp /mnt/isolinux/vesamenu.c32   /mnt/isolinux/splash.png    /var/lib/tftpboot/"></a>cp /mnt/isolinux/vesamenu.c32   /mnt/isolinux/splash.png    /var/lib/tftpboot/</h1><h1 id="ls-var-lib-tftpboot-1"><a href="#ls-var-lib-tftpboot-1" class="headerlink" title="ls /var/lib/tftpboot/"></a>ls /var/lib/tftpboot/</h1><p>pxelinux.0  pxelinux.cfg  splash.png  vesamenu.c32</p><p>6.部署 启动内核 与 驱动程序<br>    vmlinuz 启动内核<br>    initrd.img 驱动程序</p><h1 id="cp-mnt-isolinux-vmlinuz-mnt-isolinux-initrd-img-var-lib-tftpboot"><a href="#cp-mnt-isolinux-vmlinuz-mnt-isolinux-initrd-img-var-lib-tftpboot" class="headerlink" title="cp /mnt/isolinux/vmlinuz  /mnt/isolinux/initrd.img  /var/lib/tftpboot/"></a>cp /mnt/isolinux/vmlinuz  /mnt/isolinux/initrd.img  /var/lib/tftpboot/</h1><h1 id="ls-var-lib-tftpboot-2"><a href="#ls-var-lib-tftpboot-2" class="headerlink" title="ls /var/lib/tftpboot/"></a>ls /var/lib/tftpboot/</h1><p>initrd.img  pxelinux.cfg  vesamenu.c32<br>pxelinux.0  splash.png    vmlinuz</p><p>7.修改菜单文件<br>[root@svr7 /]# vim /var/lib/tftpboot/pxelinux.cfg/default<br>  vim末行模式（显示行号）：set  nu </p><p> 2 timeout 600    #读秒时间  1/10<br>  ……<br> 10 menu background splash.png        #背景图片<br> 11 menu title NSD1807 PXE Server !   #标题</p><p> 61 label linux<br> 62   menu label Install RHEL7    #菜单选项显示内容<br> 63   menu default                #读秒结束默认选择<br> 64   kernel vmlinuz              #加载内核<br> 65   append initrd=initrd.img    #加载驱动</p><p>####################################################<br> 总结：<br>1.DHCP—》IP地址、next-server、filename “pxelinux.0”<br>2.tftp—》pxelinux.0<br>3.pxelinux.0—》/var/lib/tftpboot/pxelinux.cfg/default<br>4.default–》vesamenu.c32、splash.png、vmlinuz、initrd.img  </p><p>###################################################<br>初步验证：<br>  1.新建一个虚拟机，安装方式选择  “网络引导安装PXE”<br>  2.网络类型的选择：private1</p><p>###################################################<br>三、搭建Web服务，共享光盘内容</p><p>1.安装软件包<br>[root@svr7 /]# yum -y install httpd<br>2.重起服务<br>[root@svr7 /]# systemctl restart httpd<br>3.挂载光盘内容<br>[root@svr7 /]# mkdir /var/www/html/rhel7<br>[root@svr7 /]# mount /dev/cdrom  /var/www/html/rhel7<br>[root@svr7 /]# ls /var/www/html/rhel7<br>4.访问测试<br>[root@svr7 /]# firefox 192.168.4.7/rhel7</p><p>####################################################<br>四、无人值守安装，生成应答文件</p><p>1.安装一个图形工具，可以通过鼠标的选择生成应答文件<br>[root@svr7 /]# yum -y install system-config-kickstart</p><p>2.运行图形工具<br>[root@svr7 /]# system-config-kickstart</p><p>[root@svr7 /]# vim /etc/yum.repos.d/rhel7.repo<br>    修改Yum客户端配置文件标识：[development]</p><p>[root@svr7 /]# system-config-kickstart<br>     确认 软件包可以选择</p><p>[root@svr7 /]# ls /root/ks.cfg<br>/root/ks.cfg<br>[root@svr7 /]# vim /root/ks.cfg</p><p>3.利用Web服务共享，ks应答文件<br>[root@svr7 /]# cp  /root/ks.cfg   /var/www/html/<br>[root@svr7 /]# ls  /var/www/html/</p><p>4.修改菜单文件，指定ks.cfg应答文件<br>[root@svr7 /]# vim /var/lib/tftpboot/pxelinux.cfg/default<br>……..<br>label linux<br>  menu label Install RHEL7<br>  menu default<br>  kernel vmlinuz<br>  append initrd=initrd.img  ks=<a href="http://192.168.4.7/ks.cfg" target="_blank" rel="noopener">http://192.168.4.7/ks.cfg</a></p><p>#######################################################<br> 总结：<br>1.DHCP—》IP地址、next-server、filename “pxelinux.0”<br>2.tftp—》pxelinux.0<br>3.pxelinux.0—》/var/lib/tftpboot/pxelinux.cfg/default<br>4.default–》vesamenu.c32、splash.png、vmlinuz、initrd.img<br>                 –》ks=<a href="http://192.168.4.7/ks.cfg" target="_blank" rel="noopener">http://192.168.4.7/ks.cfg</a><br>5.ks.cfg–》时区、键盘、分区、–url=”<a href="http://192.168.4.7/rhel7&quot;" target="_blank" rel="noopener">http://192.168.4.7/rhel7&quot;</a></p><p>#######################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>进程管理及NDS解析分离</title>
      <link href="/2018/10/20/SERVICES/DAY3/Services03/"/>
      <url>/2018/10/20/SERVICES/DAY3/Services03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、检测教学环境Yum仓库<br>虚拟机A<br>[root@svr7 ~]# yum clean all<br>[root@svr7 ~]# yum repolist<br>虚拟机B<br>[root@pc207 ~]# yum clean all<br>[root@pc207 ~]# yum repolist </p><p>##################################################<br>在虚拟机A上搭建DNS服务器,负责解析sina.com<br>最终实现虚拟机A解析<a href="http://www.sina.com结果为192.168.4.10" target="_blank" rel="noopener">www.sina.com结果为192.168.4.10</a></p><p>######################################################<br>Split分离解析</p><p>什么是分离解析<br>• 当收到客户机的DNS查询请求的时候<br>– 能够区分客户机的来源地址<br>– 为不同类别的客户机提供不同的解析结果(IP地址)<br>– 为客户端提供最近的网络资源</p><pre><code>view &quot;联通&quot;  {match-clients { 来源地址1; .. ..; }zone &quot;12306.cn&quot; IN {...... 地址库1;}; };view &quot;铁通&quot;  {match-clients { 来源地址2; .. .. ; }zone &quot;12306.cn&quot; IN {...... 地址库2;}; };</code></pre><p>####################################################</p><p>• 环境及需求<br>– 权威DNS:svr7.tedu.cn 192.168.4.7<br>– 负责区域:tedu.cn<br>– A记录分离解析 —— 以 <a href="http://www.tedu.cn" target="_blank" rel="noopener">www.tedu.cn</a> 为例<br>客户机来自 解析结果<br>  192.168.4.207———&gt;192.168.4.100<br>          其他地址 ———&gt;1.2.3.4</p><p>注意事项：<br>   1.所有客户端都要找到自己的类别，分类要合理<br>   2.优先级由上及下匹配， 匹配及停止<br>   3.所有的zone必须都在view中</p><p>虚拟机A：<br>1.书写配置文件/etc/named.conf<br>    view “nsd” {                        #分类名称<br>      match-clients { 192.168.4.207; };  #匹配客户端来源IP地址<br>      zone “tedu.cn” IN {              #定义负责解析的区域<br>            type master;                #定义主DNS服务器<br>            file “tedu.cn.zone”;        #地址库文件名称<br>     };<br>    };<br>    view “other” {<br>      match-clients { any; };<br>       zone “tedu.cn” IN {<br>            type master;<br>             file “tedu.cn.other”;<br>     };<br>    };<br>2.建立两个地址库文件,写入不同解析结果,然后重起服务<br>[root@svr7 /]# vim /var/named/tedu.cn.zone<br>    tedu.cn.  NS    svr7<br>    svr7      A     192.168.4.7<br>    www       A     192.168.4.100<br>[root@svr7 /]# vim /var/named/tedu.cn.other<br>    tedu.cn.  NS    svr7<br>    svr7      A     192.168.4.7<br>    www       A     1.2.3.4</p><p>##################################################<br>acl地址列表</p><p>  acl “liantong” {<br>    IP地址1; IP地址2; .. ..<br>      网段1; 网段2; .. ..<br>      .. ..<br>     };</p><p>1.书写配置文件/etc/named.conf<br>acl “test” { 192.168.4.207; 192.168.4.200;<br>                      192.168.7.0/24; 192.168.1.0/24;<br>                      192.168.10.0/24; };</p><p>view “nsd” {<br>  match-clients { test; };<br>  zone “tedu.cn” IN {<br>        type master;<br>        file “tedu.cn.zone”;<br> };<br>};</p><p>###################################################<br>多区域的分离解析<br>注意事项：每一个view中，zone的个数要一致,zone的区域也要一致</p><p>  <a href="http://www.tedu.cn" target="_blank" rel="noopener">www.tedu.cn</a>  192.168.4.207—-》192.168.4.100<br>  <a href="http://www.tedu.cn" target="_blank" rel="noopener">www.tedu.cn</a>  any—-》1.2.3.4</p><p>  <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a>  192.168.4.207—-》192.168.4.100<br>  <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a>  192.168.4.200—-》11.12.13.14<br>  <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a>  any—-》1.2.3.4</p><p>[root@svr7 /]# vim /etc/named.conf<br>options {<br>        directory       “/var/named”;<br> };<br>acl “test” {  192.168.4.207; };<br>view “nsd” {<br>  match-clients { test; };<br>  zone “tedu.cn” IN {<br>        type master;<br>        file “tedu.cn.zone”;—-》192.168.4.100<br>   };<br>  zone “qq.com” IN {<br>        type master;<br>        file “qq.com.zone”;—-》192.168.4.100<br>   };<br> };<br>view “test” {<br>  match-clients { 192.168.4.200; };<br>  zone “tedu.cn” IN {<br>        type master;<br>        file “tedu.cn.test”;—-》1.2.3.4<br>   };<br>  zone “qq.com” IN {<br>        type master;<br>        file “qq.com.test”;—-》11.12.13.14<br>   };<br> };<br>view “other” {<br>  match-clients { any; };<br>  zone “tedu.cn” IN {<br>        type master;<br>        file “tedu.cn.test”;—-》1.2.3.4<br> };<br>  zone “qq.com” IN {<br>        type master;<br>        file “qq.com.other”;—-》1.2.3.4<br> };<br> };</p><p>################################################<br>RAID阵列概述<br>• 廉价冗余磁盘阵列<br>– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘</p><p>– 阵列的价值:提升I/O效率、硬件级别的数据冗余<br>– 不同RAID级别的功能、特性各不相同</p><p>• RAID 0,条带模式<br>– 同一个文档分散存放在不同磁盘<br>– 并行写入以提高效率<br>– 至少需要2块磁盘</p><p>• RAID 1,镜像模式<br>– 一个文档复制成多份,分别写入不同磁盘<br>– 多份拷贝提高可靠性,效率无提升<br>– 至少需要2块磁盘</p><p>• RAID5,高性价比模式<br>– 相当于RAID0和RAID1的折中方案<br>– 需要至少一块磁盘的容量来存放校验数据<br>– 至少需要3块磁盘</p><p>• RAID6,高性价比/可靠模式<br>– 相当于扩展的RAID5阵列,提供2份独立校验方案<br>– 需要至少两块磁盘的容量来存放校验数据<br>– 至少需要4块磁盘</p><p>RAID0/1/10<br>• RAID 0+1/RAID 1+0<br>– 整合RAID 0、RAID 1的优势<br>– 并行存取提高效率、镜像写入提高可靠性<br>– 至少需要4块磁盘</p><p>• 硬RAID:由RAID控制卡管理阵列<br>– 主板 —&gt; 阵列卡—&gt; 磁盘 —&gt; 操作系统—&gt;  数据<br>• 软RAID:由操作系统来管理阵列<br>– 主板 —&gt;  磁盘—&gt; 操作系统—&gt;  RAID软件—&gt;  数据</p><p>###############################################<br>进程管理</p><pre><code>程序：静态的代码   仅占用磁盘存储进程：动态的代码   占用 CPU与内存唯一编号：PID父进程/子进程</code></pre><p>查看进程树<br>• pstree — Processes Tree<br>– 格式:pstree [选项] [PID或用户名]</p><p>• 常用命令选项<br>– -a:显示完整的命令行<br>– -p:列出对应PID编号</p><p>[root@svr7 /]# pstree</p><p>   systemd(上帝进程)</p><p>[root@svr7 /]# pstree  lisi<br>bash───vim<br>[root@svr7 /]# pstree  -p  lisi<br>bash(7653)───vim(7689)<br>[root@svr7 /]# pstree  -ap lisi<br>bash,7653<br>  └─vim,7689 a.txt<br>[root@svr7 /]# pstree  -ap</p><p>###########################################</p><p>• ps aux 操作<br>– 列出正在运行的所有进程</p><p>用户 进程ID %CPU %内存 虚拟内存 固定内存 终端 状态 起始时间 CPU时间 程序指令</p><p>• ps -elf 操作<br>– 列出正在运行的所有进程<br>  PPID:父进程的PID号</p><p>补充命令：<br>   统计文件的行数<br>[root@svr7 /]# wc -l /etc/passwd<br>[root@svr7 /]# find  /etc  -name  “<em>.conf”  |  wc -l<br>[root@svr7 /]# find  /etc  -name  “</em>tab”   |  wc -l<br>[root@svr7 /]# find  /etc  -name  “*tab”</p><p>[root@svr7 /]# ps aux  |  wc -l  #统计正在运行的进程有多少个</p><p>[root@svr7 /]# ps aux </p><p>[root@svr7 /]# ps -elf </p><p>#######################################################</p><p>进程动态排名<br>• top 交互式工具<br>– 格式:top   [-d 刷新秒数]   [-U 用户名]<br>   按键盘大写的P  进行CPU排序<br>   按键盘大写的M  进行内存排序</p><p>#####################################################<br>检索进程<br>• pgrep — Process Grep<br>– 用途:pgrep [选项]… 查询条件</p><p>• 常用命令选项<br>– -l:输出进程名,而不仅仅是 PID<br>– -U:检索指定用户的进程<br>– -t:检索指定终端的进程<br>– -x:精确匹配完整的进程名</p><p>[root@svr7 /]# pgrep    cron<br>[root@svr7 /]# pgrep -l  cron<br>[root@svr7 /]# pgrep -l  a<br>[root@svr7 /]# pgrep -l  named<br>[root@svr7 /]# pgrep -l  lib </p><p>[root@svr7 /]# who    #查看当前登陆的用户信息<br>[root@svr7 /]# pgrep -lU lisi<br>[root@svr7 /]# pgrep -lU lisi -t pts/1<br>[root@svr7 /]# pgrep -lU lisi -t pts/2</p><p>######################################################</p><p>进程的前后台调度</p><p>• 后台启动<br> – 在命令行末尾添加“&amp;”符号,不占用当前终端</p><p>[root@svr7 /]# sleep  1000  &amp;     #正在运行放入后台<br>[root@svr7 /]# jobs               #查看后台进程信息<br>[root@svr7 /]# sleep 800<br>^Z                            #按Ctrl+Z暂停放入后台<br>[2]+  已停止               sleep 800<br>[root@svr7 /]# jobs<br>[root@svr7 /]# bg 2       #将后台编号为2的进程，继续运行<br>[root@svr7 /]# jobs<br>[root@svr7 /]# fg 2       #将后台编号为2的进程，恢复到前台运行<br>sleep 800<br>^C                        #按Ctrl+c结束进程<br>[root@svr7 /]# jobs<br>[root@svr7 /]# fg 1       #将后台编号为1的进程，恢复到前台运行<br>sleep 1000<br>^C                        #按Ctrl+c结束进程<br>[root@svr7 /]# jobs </p><p>####################################################<br>杀死进程<br>• 干掉进程的不同方法<br>– Ctrl+c 组合键,中断当前命令程序<br>– kill [-9] PID…<br>– killall [-9] 进程名…<br>– pkill 查找条件</p><p>[root@svr7 /]# sleep 100 &amp;<br>[root@svr7 /]# sleep 200 &amp;<br>[root@svr7 /]# sleep 300 &amp;</p><p>[root@svr7 /]# jobs -l<br>[root@svr7 /]# kill  8923<br>[root@svr7 /]# killall  sleep</p><p>[root@svr7 /]# jobs<br>[root@svr7 /]# killall -9 sleep</p><p>################################################<br>杀死一个用户所有的进程（强制踢出一个用户）<br>[root@svr7 /]# killall -9 -u lisi</p><p>################################################<br>日志管理</p><p>日志的功能<br>• 系统和程序的“日记本”<br>– 记录系统、程序运行中发生的各种事件<br>– 通过查看日志,了解及排除故障<br>– 信息安全控制的  依据</p><p>• 常见的日志文件</p><pre><code>/var/log/messages  记录内核消息、各种服务的公共消息/var/log/dmesg     记录系统启动过程的各种消息/var/log/cron      记录与cron计划任务相关的消息/var/log/maillog   记录邮件收发相关的消息/var/log/secure    记录与访问限制相关的安全消息</code></pre><p>日志分析<br>• 通用分析工具<br>– tail、tailf、less、grep等文本浏览/检索命令<br>– awk、sed等格式化过滤工具</p><pre><code>tailf:实时跟踪日志消息</code></pre><p>####################################################<br>用户登录分析<br>• users、who、w 命令<br>– 查看已登录的用户信息,详细度不同</p><p>• last、lastb 命令<br>– 查看最近登录成功/失败的用户信息</p><p>[root@svr7 /]#  users<br>[root@svr7 /]#  who<br>[root@svr7 /]#  w<br>[root@svr7 /]#  last -2   #查看最近登录成功<br>[root@svr7 /]#  lastb -2  #查看最近登录失败</p><p>###################################################<br>• Linux内核定义的事件紧急程度<br>– 分为 0~7 共8种优先级别<br>– 其数值越小,表示对应事件越紧急/重要</p><p>  0  EMERG（紧急）       会导致主机系统不可用的情况<br>  1  ALERT（警告）       必须马上采取措施解决的问题<br>  2  CRIT（严重）        比较严重的情况<br>  3  ERR（错误）        运行出现错误<br>  4  WARNING（提醒）    可能会影响系统功能的事件<br>  5  NOTICE（注意）      不会影响系统但值得注意<br>  6  INFO（信息）         一般信息<br>  7  DEBUG（调试）        程序或系统调试信息等</p><p>##################################################<br>使用journalctl工具<br>• 提取由 systemd-journal 服务搜集的日志<br>– 主要包括内核/系统日志、服务日志</p><p>• 常见用法<br>– journalctl | grep 关键词<br>– journalctl -u 服务名    [-p 优先级]<br>– journalctl -n 消息条数<br>– journalctl –since=”yyyy-mm-dd HH:MM:SS” –until=”yyyy-mm-dd HH:MM:SS”</p><p>[root@svr7 /]# yum -y install httpd<br>[root@svr7 /]# systemctl restart httpd<br>[root@svr7 /]# journalctl -u httpd<br>[root@svr7 /]# journalctl -u named</p><p>######################################################<br>systemctl控制</p><p>• Linux系统和服务管理器<br>– 是内核引导之后加载的第一个初始化进程(PID=1)<br>– 负责掌控整个Linux的运行/服务资源组合</p><p>systemd<br>• 一个更高效的系统&amp;服务管理器<br>– 开机服务并行启动,各系统服务间的精确依赖<br>– 配置目录:/etc/systemd/system/<br>– 服务目录:/lib/systemd/system/<br>– 主要管理工具:systemctl</p><p>管理众多服务</p><h1 id="systemctl-start-服务名-开启服务"><a href="#systemctl-start-服务名-开启服务" class="headerlink" title="systemctl start 服务名      #开启服务"></a>systemctl start 服务名      #开启服务</h1><h1 id="systemctl-stop-服务名-关闭服务"><a href="#systemctl-stop-服务名-关闭服务" class="headerlink" title="systemctl stop 服务名        #关闭服务"></a>systemctl stop 服务名        #关闭服务</h1><h1 id="systemctl-restart-服务名-重起服务"><a href="#systemctl-restart-服务名-重起服务" class="headerlink" title="systemctl restart 服务名   #重起服务"></a>systemctl restart 服务名   #重起服务</h1><h1 id="systemctl-status-服务名-查看服务状态"><a href="#systemctl-status-服务名-查看服务状态" class="headerlink" title="systemctl status 服务名     #查看服务状态"></a>systemctl status 服务名     #查看服务状态</h1><h1 id="systemctl-enable-服务名-设置服务开机自起"><a href="#systemctl-enable-服务名-设置服务开机自起" class="headerlink" title="systemctl enable 服务名     #设置服务开机自起"></a>systemctl enable 服务名     #设置服务开机自起</h1><h1 id="systemctl-disable-服务名-设置服务禁止开机自起"><a href="#systemctl-disable-服务名-设置服务禁止开机自起" class="headerlink" title="systemctl disable 服务名    #设置服务禁止开机自起"></a>systemctl disable 服务名    #设置服务禁止开机自起</h1><p>#####################################################</p><p>RHEL6：运行级别     数据中心（IDC）   300</p><pre><code>    0：关机       0个服务1：单用户模式（修复模式  破解密码模式） 50个服务2：字符界面（不支持网络） 100个服务3：字符界面（支持网络） 150个服务4：未定义5：图形界面    260个服务6：重起    0个服务</code></pre><p>   切换运行级别的命令：init</p><p>RHEL7:运行模式</p><p>   graphical.target :图形模式<br>   multi-user.target：字符模式</p><p>当前直接切换<br>[root@svr7 /]# systemctl isolate graphical.target<br>[root@svr7 /]# systemctl isolate multi-user.target</p><p>修改永久的默认模式<br>[root@svr7 /]# systemctl get-default<br>multi-user.target<br>[root@svr7 /]# systemctl set-default graphical.target<br>[root@svr7 /]# systemctl get-default </p><p>[root@svr7 /]# reboot </p><p>######################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>DNS的搭建</title>
      <link href="/2018/10/20/SERVICES/DAY2/Services02/"/>
      <url>/2018/10/20/SERVICES/DAY2/Services02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、关闭或删除classroom、server、desktop</p><p>二、检测教学环境Yum仓库</p><p>[root@svr7 ~]# yum clean all<br>[root@svr7 ~]# yum repolist </p><p>[root@pc207 ~]# yum clean all<br>[root@pc207 ~]# yum repolist </p><p>###################################################<br>DNS解析的作用:将域名解析为IP地址</p><p>• DNS服务器的功能<br>– 正向解析:根据注册的域名查找其对应的IP地址<br>– 反向解析:根据IP地址查找对应的注册域名,不常用</p><p>   所有的域名必须以点作为结尾</p><pre><code>.   根域</code></pre><p>一级域名：  .com   .net  .org  .cn  .us  .jp  .kr  .tw .hk </p><p>二级域名：  .com.cn    .net.cn     .edu.cn   ……..</p><p>三级域名：   .nb.com.cn   .haxi.com.cn  .dc.com.cn  …..</p><p>完整的主机名： <a href="http://www.nb.com.cn" target="_blank" rel="noopener">www.nb.com.cn</a>   tts.nb.com.cn   vip.nb.com.cn</p><p>• Full Qualified Domain Name(FQDN),完全合格主机名</p><p>#######################################################</p><p>BIND域名服务<br>• BIND(Berkeley Internet Name Daemon)<br>– 伯克利 Internet 域名服务<br>– 官方站点:<a href="https://www.isc.org/" target="_blank" rel="noopener">https://www.isc.org/</a></p><p>– 系统服务:named<br>– 默认端口:TCP/UDP 53</p><p>• 主配置文件:/etc/named.conf   设置本机负责解析的域名<br>• 地址库文件:/var/named/       记录域名与IP地址的对应关系</p><p>搭建基本的DNS服务器</p><p>虚拟机A：<br>1.安装软件包<br>[root@svr7 ~]# yum -y install bind-chroot bind<br> bind-9.9.4-29.el7.x86_64   //域名服务包<br> bind-chroot-9.9.4-29.el7.x86_64   //提供虚拟根支持</p><p>2.修改主配置文件<br>[root@svr7 ~]# cp /etc/named.conf  /root/<br>[root@svr7 ~]# vim /etc/named.conf<br> options {<br>    directory     “/var/named”;  #指定地址库文件存放位置<br> };<br> zone “tedu.cn”  IN  {          #指定本机负责解析的域名<br>    type  master;              #指定本机为权威服务器<br>    file  “tedu.cn.zone”;      #指定地址库文件名字<br> };</p><p>3.建立地址库文件</p><h1 id="cd-var-named"><a href="#cd-var-named" class="headerlink" title="cd  /var/named/"></a>cd  /var/named/</h1><h1 id="cp-p-named-localhost-tedu-cn-zone"><a href="#cp-p-named-localhost-tedu-cn-zone" class="headerlink" title="cp -p  named.localhost   tedu.cn.zone"></a>cp -p  named.localhost   tedu.cn.zone</h1><h1 id="ls-l-tedu-cn-zone"><a href="#ls-l-tedu-cn-zone" class="headerlink" title="ls -l  tedu.cn.zone"></a>ls -l  tedu.cn.zone</h1><h1 id="vim-var-named-tedu-cn-zone"><a href="#vim-var-named-tedu-cn-zone" class="headerlink" title="vim /var/named/tedu.cn.zone"></a>vim /var/named/tedu.cn.zone</h1><pre><code>tedu.cn.  NS    svr7svr7      A     192.168.4.7www       A     1.1.1.1ftp       A     2.2.2.2</code></pre><ol start="4"><li>重起named服务<h1 id="systemctl-restart-named"><a href="#systemctl-restart-named" class="headerlink" title="systemctl restart named"></a>systemctl restart named</h1></li></ol><p>客户端虚拟机B：</p><h1 id="echo-nameserver-192-168-4-7-gt-etc-resolv-conf"><a href="#echo-nameserver-192-168-4-7-gt-etc-resolv-conf" class="headerlink" title="echo nameserver 192.168.4.7  &gt;  /etc/resolv.conf"></a>echo nameserver 192.168.4.7  &gt;  /etc/resolv.conf</h1><h1 id="cat-etc-resolv-conf"><a href="#cat-etc-resolv-conf" class="headerlink" title="cat   /etc/resolv.conf"></a>cat   /etc/resolv.conf</h1><h1 id="nslookup-www-tedu-cn"><a href="#nslookup-www-tedu-cn" class="headerlink" title="nslookup  www.tedu.cn"></a>nslookup  <a href="http://www.tedu.cn" target="_blank" rel="noopener">www.tedu.cn</a></h1><h1 id="nslookup-ftp-tedu-cn"><a href="#nslookup-ftp-tedu-cn" class="headerlink" title="nslookup  ftp.tedu.cn"></a>nslookup  ftp.tedu.cn</h1><p>#######################################################<br>多区域DNS服务器<br>虚拟机A：<br>1.修改主配置文件/etc/named.conf<br> zone “qq.com”  IN  {<br>    type  master;<br>    file  “qq.com.zone”;<br> };<br>3.建立地址库文件</p><h1 id="cd-var-named-1"><a href="#cd-var-named-1" class="headerlink" title="cd  /var/named/"></a>cd  /var/named/</h1><h1 id="cp-p-tedu-cn-zone-qq-com-zone"><a href="#cp-p-tedu-cn-zone-qq-com-zone" class="headerlink" title="cp -p  tedu.cn.zone   qq.com.zone"></a>cp -p  tedu.cn.zone   qq.com.zone</h1><h1 id="vim-var-named-qq-com-zone"><a href="#vim-var-named-qq-com-zone" class="headerlink" title="vim /var/named/qq.com.zone"></a>vim /var/named/qq.com.zone</h1><pre><code>qq.com.   NS    svr7svr7      A     192.168.4.7www       A     3.3.3.3ftp       A     4.4.4.4</code></pre><ol start="4"><li>重起named服务<h1 id="systemctl-restart-named-1"><a href="#systemctl-restart-named-1" class="headerlink" title="systemctl restart named"></a>systemctl restart named</h1></li></ol><p>######################################################<br>特殊的解析记录</p><p>一、DNS解析记录的轮询<br>[root@svr7 /]# vim /var/named/tedu.cn.zone<br>tedu.cn.  NS    svr7<br>svr7      A     192.168.4.7<br>www       A     192.168.4.1<br>www       A     192.168.4.10<br>www       A     192.168.4.100<br>ftp       A     2.2.2.2</p><p>[root@svr7 /]# systemctl restart named </p><p>二、泛域名解析</p><p>   pc1.tedu.cn ——-》192.168.10.1<br>   pc2.tedu.cn ——-》192.168.10.2<br>   pc3.tedu.cn ——-》192.168.10.3<br>     …….<br>   pc50.tedu.cn ——-》192.168.10.50</p><p>  内置函数</p><p>  $GENERATE 造数 连续范围的数字</p><p>[root@svr7 /]# vim /var/named/tedu.cn.zone </p><ul><li><p>A      1.2.3.4</p><p>$GENERATE 1-50   pc$   A   192.168.10.$</p></li></ul><p>[root@svr7 /]# systemctl restart named </p><p>虚拟机B验证<br>[root@pc207 /]# nslookup haha.tedu.cn<br>[root@pc207 /]# nslookup pc1.tedu.cn<br>[root@pc207 /]# nslookup pc2.tedu.cn<br>[root@pc207 /]# nslookup pc50.tedu.cn</p><p>三、解析记录的别名</p><p>[root@svr7 /]# vim /var/named/tedu.cn.zone</p><p>   tts       CNAME     ftp</p><p>[root@svr7 /]#  systemctl restart named</p><p>虚拟机B验证<br>[root@pc207 /]# nslookup tts.tedu.cn</p><p>################################################<br>DNS子域授权</p><pre><code>      父域：www.qq.com      子域：www.bj.qq.com   虚拟机A为DNS服务器，负责解析  父域：qq.com虚拟机B为DNS服务器，负责解析  子域：bj.qq.com </code></pre><p>虚拟机B搭建DNS服务器<br>1.安装软件包bind  bind-chroot<br>2.修改主配置文件<br>[root@pc207 ~]# cp /etc/named.conf  /root/<br>[root@pc207 ~]# vim /etc/named.conf<br> options {<br>        directory       “/var/named”;<br> };<br> zone “bj.qq.com” IN {<br>        type master;<br>        file “bj.qq.com.zone”;<br> };<br>3.在/var/named路径下，建立地址库文件</p><h1 id="cp-p-named-localhost-bj-qq-com-zone"><a href="#cp-p-named-localhost-bj-qq-com-zone" class="headerlink" title="cp  -p   named.localhost  bj.qq.com.zone"></a>cp  -p   named.localhost  bj.qq.com.zone</h1><p>  bj.qq.com.      NS      pc207<br>  pc207           A       192.168.4.207<br>  www             A       10.11.12.13<br>[root@pc207 /]# nslookup <a href="http://www.bj.qq.com" target="_blank" rel="noopener">www.bj.qq.com</a> 192.168.4.207</p><p>#################################################<br> 子域授权：在父域的DNS服务器上，指定子域服务器位置<br>虚拟机A：<br>[root@svr7 /]# vim /var/named/qq.com.zone<br>    qq.com.    NS    svr7<br>    bj.qq.com. NS    pc207<br>    svr7       A     192.168.4.7<br>    pc207      A     192.168.4.207<br>    www        A     3.3.3.3<br>[root@svr7 /]# systemctl restart named</p><p>[root@pc207 /]# nslookup <a href="http://www.bj.qq.com" target="_blank" rel="noopener">www.bj.qq.com</a> 192.168.4.7<br>    Server:        192.168.4.7<br>    Address:         192.168.4.7#53</p><pre><code>Non-authoritative answer:    #非权威解答Name:    www.bj.qq.comAddress: 10.11.12.13</code></pre><p>#####################################################<br>递归解析：由客户端发起请求解析，首选DNS服务器与其他DNS服务交互，最终将答案带回来的过程</p><p>  是否允许递归解析<br>  options {<br>        directory       “/var/named”;<br>        recursion no;      #禁用递归解析<br>  };</p><p> 迭代解析：首选DNS服务器与其他DNS服务交互过程</p><p>#####################################################<br>DNS主机名映射文件<br>作用：只为本机直接提供解析结果</p><p>[root@svr7 /]# tail -1 /etc/hosts<br> 192.168.4.120  <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p><p>[root@svr7 /]# ping <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p><p> 用户解析域名 <a href="http://www.haha.com：" target="_blank" rel="noopener">www.haha.com：</a><br>      1./etc/hosts(优先级最高)<br>      2./etc/resolv.conf<br>          3.寻找DNS服务器</p><p>################################################<br>缓存DNS服务器：缓存解析记录，加速解析过程</p><p>   搭建方式：<br>      1.全局转发式缓存DNS服务器<br>      2.根域迭代缓存DNS服务器</p><p>在真机上搭建缓存DNS服务器</p><p>一、真机搭建Yum仓库<br>1.查看系统版本，查看镜像文件<br>[root@room9pc01 ~]# cat /etc/redhat-release<br>CentOS Linux release 7.4.1708 (Core)<br>[root@room9pc01 ~]# ls /iso/<br>2.进行挂载</p><h1 id="mkdir-dvd"><a href="#mkdir-dvd" class="headerlink" title="mkdir  /dvd"></a>mkdir  /dvd</h1><h1 id="mount-iso-CentOS-7-x86-64-DVD-1708-iso-dvd"><a href="#mount-iso-CentOS-7-x86-64-DVD-1708-iso-dvd" class="headerlink" title="mount  /iso/CentOS-7-x86_64-DVD-1708.iso  /dvd"></a>mount  /iso/CentOS-7-x86_64-DVD-1708.iso  /dvd</h1><h1 id="ls-dvd"><a href="#ls-dvd" class="headerlink" title="ls  /dvd"></a>ls  /dvd</h1><p>3.书写客户端配置文件</p><h1 id="cd-etc-yum-repos-d"><a href="#cd-etc-yum-repos-d" class="headerlink" title="cd  /etc/yum.repos.d/"></a>cd  /etc/yum.repos.d/</h1><h1 id="mkdir-repo"><a href="#mkdir-repo" class="headerlink" title="mkdir  repo"></a>mkdir  repo</h1><h1 id="mv-repo-repo"><a href="#mv-repo-repo" class="headerlink" title="mv   *.repo     repo"></a>mv   *.repo     repo</h1><h1 id="cat-dvd-repo"><a href="#cat-dvd-repo" class="headerlink" title="cat  dvd.repo"></a>cat  dvd.repo</h1><p> [dvd]<br> name=CentOS7.4<br> baseurl=file:///dvd<br> enabled=1<br> gpgcheck=0</p><h1 id="yum-repolist"><a href="#yum-repolist" class="headerlink" title="yum  repolist"></a>yum  repolist</h1><h1 id="yum-y-install-bind-bind-chroot"><a href="#yum-y-install-bind-bind-chroot" class="headerlink" title="yum  -y  install  bind  bind-chroot"></a>yum  -y  install  bind  bind-chroot</h1><p>########################################################<br>二、构建缓存服务器<br>[root@room9pc01 ~]# cat /etc/resolv.conf<br> nameserver 172.40.1.10</p><p>[root@room9pc01 ~]# cp /etc/named.conf  /root/<br>[root@room9pc01 ~]# vim /etc/named.conf<br> options {<br>        directory       “/var/named”;<br>        forwarders {  172.40.1.10;  };<br> };<br>[root@room9pc01 ~]# systemctl restart named</p><p>三、虚拟机A测试<br>[root@svr7 /]# nslookup <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a> 192.168.4.254</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>简单的server操作</title>
      <link href="/2018/10/20/SERVICES/DAY1/Services01/"/>
      <url>/2018/10/20/SERVICES/DAY1/Services01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、关闭或删除classroom、server、desktop</p><p>二、建立新的教学环境<br>1.利用clone-vm7快速产生两台虚拟机<br>[root@room9pc01 ~]# clone-vm7<br>Enter VM number: 5<br>Creating Virtual Machine disk image……    [OK]<br>Defining new virtual machine……        [OK]<br>[root@room9pc01 ~]# clone-vm7<br>Enter VM number: 6<br>Creating Virtual Machine disk image……    [OK]<br>Defining new virtual machine……        [OK]<br>[root@room9pc01 ~]# </p><p>2.利用root登陆，密码：123456</p><p> 搭建虚拟机A：服务端<br>    配置主机名：svr7.tedu.cn<br>    配置eth0网卡的IP地址：192.168.4.7/24</p><p> 搭建虚拟机B：客户端<br>    配置主机名：pc207.tedu.cn<br>    配置eth0网卡的IP地址：192.168.4.207/24</p><p>3.真机上操作：进行远程管理<br>[root@room9pc01 ~]# ifconfig private1 | head -2<br>private1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br> inet 192.168.4.254  netmask 255.255.255.0  broadcast 192.168.4.255</p><p>[root@room9pc01 ~]# ping -c 2 192.168.4.7<br>[root@room9pc01 ~]# ping -c 2 192.168.4.207</p><p>  在/root/.bashrc中设置永久别名</p><p>4.搭建Yum仓库</p><p>  真机-服务端：搭建FTP共享光盘所有内容<br>     1.安装软件包vsftpd<br>  [root@room9pc01 ~]# rpm -q vsftpd<br>  vsftpd-3.0.2-22.el7.x86_64<br>  [root@room9pc01 ~]#<br>     2.重起vsftpd服务<br>  [root@room9pc01 ~]# systemctl restart vsftpd<br>  [root@room9pc01 ~]# systemctl enable vsftpd<br>     3.共享光盘所有内容<br>  [root@room9pc01 ~]# mkdir /var/ftp/rhel7/<br>  [root@room9pc01 ~]# ls -l /iso<br>  [root@room9pc01 ~]# vim /etc/fstab   #查看开机自动挂载</p><p>  [root@room9pc01 ~]# ls /var/ftp/rhel7/<br>  [root@room9pc01 ~]# firefox <a href="ftp://192.168.4.254/rhel7" target="_blank" rel="noopener">ftp://192.168.4.254/rhel7</a></p><p>   虚拟机-客户端：<br>  [root@svr7 ~]# vim /etc/yum.repos.d/rhel7.repo<br>  [rhel7]<br>  name=rhel7.4<br>  baseurl=<a href="ftp://192.168.4.254/rhel7" target="_blank" rel="noopener">ftp://192.168.4.254/rhel7</a><br>  enabled=1<br>  gpgcheck=0<br>  [root@svr7 ~]# yum -y install xeyes   #测试安装软件</p><p>#######################################################<br>扩展的几个应用<br>目录结构<br>• 认识Linux的目录层次:<br>– man hier</p><pre><code>/boot         存放系统引导必需的文件,包括内核、启动配置/bin、/sbin     存放各种命令程序/dev         存放硬盘、键盘、鼠标、光驱等各种设备文件/etc         存放Linux系统及各种程序的配置文件/root、/home/    用户名 分别是管理员root、普通用户的默认家目录/var         存放日志文件、邮箱目录等经常变化的文件/proc         存放内存中的映射数据,不占用磁盘/tmp         存放系统运行过程中使用的一些临时文件</code></pre><p>#######################################################<br>权限的数值表示<br>• 权限的数值化<br>– 基本权限:r = 4,w = 2,x = 1<br>– 附加权限:SUID = 4,SGID = 2,Sticky Bit = 1</p><p>[root@svr7 ~]# mkdir /nsd01<br>[root@svr7 ~]# ls -ld /nsd01</p><p>[root@svr7 ~]# chmod 700 /nsd01<br>[root@svr7 ~]# ls -ld /nsd01</p><p>[root@svr7 ~]# chmod 007 /nsd01<br>[root@svr7 ~]# ls -ld /nsd01</p><p>[root@svr7 ~]# chmod 750 /nsd01<br>[root@svr7 ~]# ls -ld /nsd01</p><p>[root@svr7 ~]# chmod 755 /nsd01<br>[root@svr7 ~]# ls -ld /nsd01</p><p>[root@svr7 ~]# chmod 777 /nsd01<br>[root@svr7 ~]# ls -ld /nsd01</p><p>[root@svr7 ~]# chmod 3755 /nsd01<br>[root@svr7 ~]# ls -ld /nsd01</p><p>######################################################<br>历史命令<br>• 管理/调用曾经执行过的命令<br>– history:查看历史命令列表<br>– history -c:清空历史命令<br>– !str:执行最近一次以str开头的历史命令<br>• 调整历史命令的数量<br> [root@svr7 ~]# vim /etc/profile<br> HISTSIZE=1000  //默认记录1000条</p><p>[root@svr7 ~]# history -c    #清空历史命令<br>[root@svr7 ~]# history       #查询历史命令</p><p>[root@svr7 ~]# cat /etc/redhat-release   </p><p>[root@svr7 ~]# hostname</p><p>[root@svr7 ~]# history</p><p>[root@svr7 ~]# !cat   #执行历史命令中，最近一条以cat开头的</p><p>####################################################</p><p>• du,统计文件的占用空间<br>– du [选项]… [目录或文件]…</p><p>– -s:只统计每个参数所占用的总空间大小<br>– -h:提供易读容量单位(K、M等)</p><p>[root@svr7 ~]# du -sh /root/<br>3.9M    /root/<br>[root@svr7 ~]# du -sh /root/ /etc  /boot<br>3.9M    /root/<br>43M    /etc<br>128M    /boot<br>[root@svr7 ~]# du -sh /</p><p>#################################################<br>• date,查看/调整系统日期时间<br>– date +%F、date +%R<br>– date +”%Y-%m-%d %H:%M:%S”<br>– date -s “yyyy-mm-dd HH:MM:SS”  #修改时间</p><p>###########################################<br>• ln,创建软连接<br>– 软连接 –&gt; 原始文档 –&gt; i节点 –&gt; 文档数据<br>– ln -s 原始文件或目录 软连接文件<br>若原始文件或目录被删除,连接文件将失效<br>软连接可存放在不同分区/文件系统</p><p>• ln,创建硬连接<br>– 硬连接 –&gt; i节点 –&gt; 文档数据<br>– ln 原始文件 硬连接文件<br>若原始文件被删除,连接文件仍可用<br>硬连接与原始文件必须在同一分区/文件系统</p><p>制作快捷方式： ln -s  /路径/源文档  /路径/快捷方式名</p><p>[root@svr7 ~]# ln -s /etc/redhat-release  /abc<br>[root@svr7 ~]# ls /</p><p>[root@svr7 ~]# ls -l /abc<br>[root@svr7 ~]# cat /abc</p><p>###########################################<br> i节点:文档的唯一编号<br>  原始文档 —&gt; i节点 —&gt; 文档数据</p><p>[root@svr7 ~]# rm -rf /opt/*<br>[root@svr7 ~]# echo 123 &gt; /opt/A</p><p>[root@svr7 ~]# ln -s /opt/A  /opt/B<br>[root@svr7 ~]# ln /opt/A /opt/C<br>[root@svr7 ~]# ls /opt/</p><p>[root@svr7 ~]# ls -i  /opt   #查看i节点的编号</p><p>##########################################<br>获取命令帮助</p><p>•  会提供“–help”帮助选项<br>[root@svr7 ~]# ls –help</p><p>• man,格式化手册阅读工具<br>– 按 上 、 下 、 PgUp 、PgDn 键滚动及翻页<br>– 按 q 键退出<br>– 按 / 键向后查找关键词(n、N切换)</p><p>[root@svr7 ~]# man passwd<br>[root@svr7 ~]# ls /etc/passwd<br>/etc/passwd<br>[root@svr7 ~]# man 5 passwd   #5代表帮助类型，配置文件帮助信息</p><p>###################################################<br>zip归档工具,归档及压缩，跨平台的格式</p><p>• 制作zip压缩包操作<br>– zip  [-r]   /路径/备份文件.zip     /路径/被归档的文档…<br>[root@svr7 ~]# zip -r /opt/nsd.zip  /boot/ /etc/passwd<br>[root@svr7 ~]# ls /opt/<br>[root@svr7 ~]# zip -r /opt/test.zip  /home /etc/shadow<br>[root@svr7 ~]# ls /opt/</p><p>• 释放zip压缩包操作<br>[root@svr7 ~]# unzip /opt/nsd.zip -d /mnt<br>[root@svr7 ~]# ls /mnt<br>[root@svr7 ~]# mkdir /test<br>[root@svr7 ~]# unzip /opt/test.zip -d /test<br>[root@svr7 ~]# ls /test</p><p>######################################################<br>自定义Yum仓库<br>真机上传递数据到虚拟机A<br>1.从互联网下载的软件包，将tools.tar.gz包传递到虚拟机A</p><h1 id="scp-root-桌面-tools-tar-gz-root-192-168-4-7-root"><a href="#scp-root-桌面-tools-tar-gz-root-192-168-4-7-root" class="headerlink" title="scp /root/桌面/tools.tar.gz     root@192.168.4.7:/root/"></a>scp /root/桌面/tools.tar.gz     <a href="mailto:root@192.168.4.7" target="_blank" rel="noopener">root@192.168.4.7</a>:/root/</h1><p>2.虚拟机A将tools.tar.gz解包释放到系统根目录下<br>[root@svr7 ~]# tar -xf /root/tools.tar.gz -C /<br>[root@svr7 ~]# ls /<br>[root@svr7 ~]# ls /tools/<br>[root@svr7 ~]# ls /tools/other/</p><p>3.产生仓库的数据文件<br>[root@svr7 ~]# createrepo /tools/other/<br>[root@svr7 ~]# ls /tools/other/<br>[root@svr7 ~]# ls /tools/other/repodata</p><p>4.为本机指定新的Yum仓库<br>[root@svr7 ~]# vim /etc/yum.repos.d/rhel7.repo<br>[rhel7]<br>name=rhel7.4<br>baseurl=<a href="ftp://192.168.4.254/rhel7" target="_blank" rel="noopener">ftp://192.168.4.254/rhel7</a><br>enabled=1<br>gpgcheck=0<br>[myrpm]<br>name=myrpm<br>baseurl=file:///tools/other<br>enabled=1<br>gpgcheck=0<br>[root@svr7 ~]# yum repolist</p><p>[root@svr7 ~]# yum -y install sl<br>[root@svr7 ~]# rpm -ql sl  #查询软件包的安装清单</p><p>[root@svr7 ~]# yum -y install cmatrix<br>[root@svr7 ~]# rpm -ql cmatrix</p><p>[root@svr7 ~]# yum -y install oneko<br>[root@svr7 ~]#  oneko &amp;   #放入后台运行</p><p>[root@svr7 ~]# killall oneko  #杀死所有oneko程序</p><p>##################################################<br>vim编辑技巧,命令模式操作</p><p>光标跳转<br>     Home 键 或 ^、数字 0         跳转到行首<br>     End 键 或“$”键          跳转到行尾<br>     1G 或 gg             跳转到文件的首行<br>     G                     跳转到文件的末尾行<br>复制/粘贴/删除<br>     复制 yy、#yy      复制光标处的一行、#行<br>     粘贴 p、P      粘贴到光标处之后、之前<br>     x 或 Delete键    删除光标处的单个字符<br>     dd、#dd          删除光标处的一行、#行<br>     d^              从光标处之前删除至行首<br>     d$              从光标处删除到行尾<br>     C(大写)          从光标处删除到行尾,并且进入插入模式<br>      u             撤销<br>[root@svr7 ~]# cp /etc/passwd /opt/test<br>[root@svr7 ~]# vim /opt/test</p><p>查找/撤销/保存<br>    /word     向后查找字符串“word”<br>    n、N     跳至后/前一个结果<br>    u         撤销最近的一次操作<br>    U         撤销对当前行的所有修改<br>    Ctrl + r  取消前一次撤销操作<br>    ZZ         保存修改并退出</p><p>末行模式操作</p><p>保存/退出/文件操作<br>    :w                     保存当前文件<br>    :q!                     放弃已有更改后强制退出<br>    :wq 或 :x              保存已有修改后退出<br>    :r /etc/filesystems     读入其他文件内容</p><p>[root@svr7 ~]# echo 123 &gt; /opt/a.txt<br>[root@svr7 ~]# echo abc &gt; /opt/b.txt</p><p>[root@svr7 ~]# vim /opt/a.txt<br>         末行模式下 ：r   /opt/b.txt<br>         末行模式下 ：r   /etc/passwd</p><p>#####################################################<br>字符串替换<br>    :s/root/abc         替换当前行第一个“root”<br>    :s/root/abc/g     替换当前行所有的“root”<br>    :1,6 s/root/abc/g     替换第1-6行所有的“root”<br>    :% s/root/abc/g     替换文件内所有的“root”</p><p>[root@svr7 ~]# cp /etc/passwd /opt/test<br>[root@svr7 ~]# vim /opt/test</p><p>开关参数的控制</p><pre><code>:set nu|nonu  显示/不显示行号:set ai|noai  启用/关闭自动缩进</code></pre><p>######################################################<br>vim的缓存文件,删除缓存文件<br>   交换文件与源文件在用一个路径下，为隐藏文件</p><p>#####################################################<br>源码编译安装</p><p> rpm包：  rpm -ivh   yum  install</p><p>  源码包— gcc  make —-&gt;可以执行的文件——&gt;运行安装</p><p>  软件功能可按需选择/定制,安装位置可以选择</p><p>步骤1:安装gcc  make开发工具<br>[root@svr7 ~]# yum -y install gcc make<br>[root@svr7 ~]# rpm -q gcc<br>[root@svr7 ~]# rpm -q make</p><p>步骤2:tar解包,释放源代码至指定目录</p><h1 id="tar-xf-tools-inotify-tools-3-13-tar-gz-C"><a href="#tar-xf-tools-inotify-tools-3-13-tar-gz-C" class="headerlink" title="tar  -xf  /tools/inotify-tools-3.13.tar.gz  -C   /"></a>tar  -xf  /tools/inotify-tools-3.13.tar.gz  -C   /</h1><h1 id="ls"><a href="#ls" class="headerlink" title="ls /"></a>ls /</h1><h1 id="cd-inotify-tools-3-13"><a href="#cd-inotify-tools-3-13" class="headerlink" title="cd /inotify-tools-3.13"></a>cd /inotify-tools-3.13</h1><h1 id="ls-1"><a href="#ls-1" class="headerlink" title="ls"></a>ls</h1><p>步骤3: ./configure 配置,指定安装目录/功能模块等选项<br>                             作用1：检测系统是否安装gcc<br>                             作用2：指定安装目录/功能模块等选项<br>                             指定安装位置的选项： –prefix=/路径/目录</p><h1 id="cd-inotify-tools-3-13-1"><a href="#cd-inotify-tools-3-13-1" class="headerlink" title="cd /inotify-tools-3.13/"></a>cd /inotify-tools-3.13/</h1><h1 id="configure-–prefix-mnt-myrpm"><a href="#configure-–prefix-mnt-myrpm" class="headerlink" title="./configure –prefix=/mnt/myrpm"></a>./configure –prefix=/mnt/myrpm</h1><p>常见提示：gcc没有安装<br>checking for gcc… no<br>checking for cc… no<br>checking for cl.exe… no<br>configure: error: no acceptable C compiler found in $PATH<br>See `config.log’ for more details.</p><p>步骤4:make 编译,生成可执行的二进制程序文件</p><h1 id="cd-inotify-tools-3-13-2"><a href="#cd-inotify-tools-3-13-2" class="headerlink" title="cd /inotify-tools-3.13/"></a>cd /inotify-tools-3.13/</h1><h1 id="make"><a href="#make" class="headerlink" title="make"></a>make</h1><p>步骤5:make install 安装,将编译好的文件复制到安装目录</p><h1 id="cd-inotify-tools-3-13-3"><a href="#cd-inotify-tools-3-13-3" class="headerlink" title="cd /inotify-tools-3.13/"></a>cd /inotify-tools-3.13/</h1><h1 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h1><h1 id="ls-mnt"><a href="#ls-mnt" class="headerlink" title="ls /mnt/"></a>ls /mnt/</h1><h1 id="ls-mnt-myrpm"><a href="#ls-mnt-myrpm" class="headerlink" title="ls /mnt/myrpm/"></a>ls /mnt/myrpm/</h1><h1 id="ls-mnt-myrpm-bin"><a href="#ls-mnt-myrpm-bin" class="headerlink" title="ls /mnt/myrpm/bin/"></a>ls /mnt/myrpm/bin/</h1><p>####################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>web服务器及parted工具分区</title>
      <link href="/2018/10/20/ENGINEER/DAY7/Engineer07/"/>
      <url>/2018/10/20/ENGINEER/DAY7/Engineer07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist       #显示Yum仓库信息</p><p>二、环境的准备，设置防火墙默认区域为trusted（允许所有访问）<br>虚拟机Server0<br>[root@server0 ~]# firewall-cmd –set-default-zone=trusted </p><p>虚拟机Desktop0<br>[root@desktop0 ~]# firewall-cmd –set-default-zone=trusted</p><p>########################################################</p><p>Web通信基本概念</p><p>• 基于 B/S (Browser/Server)架构的网页服务<br>– 服务端提供网页<br>– 浏览器下载并显示网页</p><p>########################################################<br>搭建虚拟Web主机：</p><p> 利用基于域名的虚拟Web主机，搭建网站<br>         利用server0.example.com ——》Web1<br>         利用www0.example.com ——–》Web2<br>1.环境的准备，设置防火墙默认区域为trusted（允许所有访问）<br>2.安装httpd软件，建立调用配置文件</p><h1 id="yum-y-install-httpd"><a href="#yum-y-install-httpd" class="headerlink" title="yum -y install httpd"></a>yum -y install httpd</h1><h1 id="mkdir-var-www-nsd"><a href="#mkdir-var-www-nsd" class="headerlink" title="mkdir /var/www/nsd"></a>mkdir /var/www/nsd</h1><h1 id="echo-‘Web1’-gt-var-www-html-index-html"><a href="#echo-‘Web1’-gt-var-www-html-index-html" class="headerlink" title="echo ‘Web1’ &gt; /var/www/html/index.html"></a>echo ‘<h1>Web1’ &gt; /var/www/html/index.html</h1><h1 id="echo-‘Web2’-gt-var-www-nsd-index-html"><a href="#echo-‘Web2’-gt-var-www-nsd-index-html" class="headerlink" title="echo ‘Web2’ &gt; /var/www/nsd/index.html"></a>echo ‘<h1>Web2’ &gt; /var/www/nsd/index.html</h1><p>[root@server0 ~]# vim /etc/httpd/conf.d/nsd01.conf</p><p><virtualhost *:80=""><br>  ServerName server0.example.com<br>  DocumentRoot /var/www/html<br></virtualhost></p><p><virtualhost *:80=""><br>  ServerName www0.example.com<br>  DocumentRoot /var/www/nsd<br></virtualhost><br>[root@server0 ~]# systemctl restart httpd</p><p>######################################################<br>安全的Web服务器，使用的协议https 默认端口 443</p><p>• Public Key Infrastructure,公钥基础设施<br>– 公钥:主要用来加密数据<br>– 私钥:主要用来解密数据(与相应的公钥匹配)<br>– 数字证书:证明拥有者的合法性/权威性(单位名称、<br>有效期、公钥、颁发机构及签名、……)<br>– Certificate Authority,数字证书授权中心:负责证书<br>的申请/审核/颁发/鉴定/撤销等管理工作</p><p>构建安全Web服务器<br>1.安装支持安全功能的软件<br>[root@server0 ~]# yum -y install mod_ssl<br>[root@server0 ~]# ls /etc/httpd/conf.d/ssl.conf</p><p>2.部署网站证书（营业执照）</p><h1 id="cd-etc-pki-tls-certs"><a href="#cd-etc-pki-tls-certs" class="headerlink" title="cd /etc/pki/tls/certs/"></a>cd /etc/pki/tls/certs/</h1><h1 id="wget-http-classroom-example-com-pub-tls-certs-server0-crt"><a href="#wget-http-classroom-example-com-pub-tls-certs-server0-crt" class="headerlink" title="wget http://classroom.example.com/pub/tls/certs/server0.crt"></a>wget <a href="http://classroom.example.com/pub/tls/certs/server0.crt" target="_blank" rel="noopener">http://classroom.example.com/pub/tls/certs/server0.crt</a></h1><h1 id="ls-etc-pki-tls-certs"><a href="#ls-etc-pki-tls-certs" class="headerlink" title="ls  /etc/pki/tls/certs/"></a>ls  /etc/pki/tls/certs/</h1><p>3.部署根证书（公安局信息）</p><h1 id="cd-etc-pki-tls-certs-1"><a href="#cd-etc-pki-tls-certs-1" class="headerlink" title="cd  /etc/pki/tls/certs/"></a>cd  /etc/pki/tls/certs/</h1><h1 id="wget-http-classroom-example-com-pub-example-ca-crt"><a href="#wget-http-classroom-example-com-pub-example-ca-crt" class="headerlink" title="wget http://classroom.example.com/pub/example-ca.crt"></a>wget <a href="http://classroom.example.com/pub/example-ca.crt" target="_blank" rel="noopener">http://classroom.example.com/pub/example-ca.crt</a></h1><h1 id="ls-etc-pki-tls-certs-1"><a href="#ls-etc-pki-tls-certs-1" class="headerlink" title="ls  /etc/pki/tls/certs/"></a>ls  /etc/pki/tls/certs/</h1><p>4.部署私钥（用于解密数据）</p><h1 id="cd-etc-pki-tls-private"><a href="#cd-etc-pki-tls-private" class="headerlink" title="cd  /etc/pki/tls/private/"></a>cd  /etc/pki/tls/private/</h1><h1 id="wget-http-classroom-example-com-pub-tls-private-server0-key"><a href="#wget-http-classroom-example-com-pub-tls-private-server0-key" class="headerlink" title="wget http://classroom.example.com/pub/tls/private/server0.key"></a>wget <a href="http://classroom.example.com/pub/tls/private/server0.key" target="_blank" rel="noopener">http://classroom.example.com/pub/tls/private/server0.key</a></h1><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><p>5.修改配置文件指定证书位置等<br>[root@server0 /]# vim /etc/httpd/conf.d/ssl.conf<br> vim末行模式   :set  nu 显示行号</p><p> 59行  DocumentRoot  “网页存放路径”               #将注释去掉，修改路径<br> 60行  ServerName  www0.example.com:443  #将注释去掉，修改域名</p><p>–指定网站证书位置<br>100 SSLCertificateFile /etc/pki/tls/certs/server0.crt</p><p>–指定私钥匙位置<br>107 SSLCertificateKeyFile /etc/pki/tls/private/server0.key</p><p>–指定根证书位置<br>122 SSLCACertificateFile /etc/pki/tls/certs/example-ca.crt</p><p>6.重起httpd服务<br>[root@server0 /]# systemctl restart httpd</p><p>客户端虚拟机Desktop0验证：<br>[root@desktop0 ~]# firefox <a href="https://www0.example.com" target="_blank" rel="noopener">https://www0.example.com</a><br>   “我已充分了解可能的风险” ——》”确认安全例外”</p><p>#######################################################<br>基础邮件服务<br>• 电子邮件服务器的基本功能<br>– 为用户提供电子邮箱存储空间(用户名@邮件域名)<br>– 处理用户发出的邮件 —— 传递给收件服务器<br>– 处理用户收到的邮件 —— 投递到邮箱</p><pre><code>SMTP:用户发邮件协议     默认端口：25pop3:用户收邮件协议     默认端口：110</code></pre><p>   classroom.example.com:DNS服务器<br>                                      域名：server0.example.com</p><pre><code>yg@server0.example.com    xln@server0.example.com</code></pre><p>#####################################################<br>构建邮件服务器虚拟机Server0<br>1.安装软件postfix<br>[root@server0 /]# yum -y install postfix<br>[root@server0 /]# rpm -q postfix<br>2.修改配置文件<br>[root@server0 /]# vim /etc/postfix/main.cf<br> vim末行模式   ：set  nu    #开启行号</p><p> 99行     myorigin = server0.example.com   #默认补全的域名后缀<br> 116行  inet_interfaces = all     #本机所有网络接口都开放邮件功能<br> 164行  mydestination = server0.example.com  #判断为本域邮件</p><p>3.重起服务<br>[root@server0 /]# systemctl restart postfix</p><p>本机验证：<br>1.创建测试用户<br>[root@server0 /]# useradd yg<br>[root@server0 /]# useradd xln</p><p>• mail 发信操作<br>– mail -s ‘邮件标题’     -r  发件人       收件人</p><p>• mail 收信操作<br>– mail   [-u 用户名]</p><p>[root@server0 /]# mail -s ‘葵花宝典’   -r    yg   xln<br>AAAAAAAA<br>已练成<br>wehowgh<br>.            #只输入一个点，代表结束<br>EOT<br>[root@server0 /]# mail  -u  xln<br>Heirloom Mail version 12.5 7/5/10.  Type ? for help.<br>“/var/mail/xln”: 1 message 1 new</p><blockquote><p>N  1 <a href="mailto:yg@server0.example.c" target="_blank" rel="noopener">yg@server0.example.c</a>  Mon Aug 20 14:22  20/614<br>&amp;  1       #输入邮件的编号，然后回车</p></blockquote><p>#######################################################         </p><h1 id="echo-haha-mail-s-‘test02’-r-yg-xln"><a href="#echo-haha-mail-s-‘test02’-r-yg-xln" class="headerlink" title="echo haha | mail -s ‘test02’ -r yg  xln"></a>echo haha | mail -s ‘test02’ -r yg  xln</h1><h1 id="mail-u-xln"><a href="#mail-u-xln" class="headerlink" title="mail -u xln"></a>mail -u xln</h1><p>####################################################<br>parted分区工具</p><pre><code>MBR 分区模式 : 4个主分区     容量2T GPT 分区模式 : 128个主分区     容量18EB        1EB=1000PB        1PB=1000TB</code></pre><p>[root@server0 /]# lsblk<br>vdb    253:16   0  10G  0 disk </p><p>[root@server0 ~]# parted /dev/vdb<br>(parted) mktable  gpt       #指定分区模式<br>(parted) print              #输出所有分区信息<br>(parted) mkpart             #创建新的分区<br> 分区名称？  []? nsd             #分区名称为nsd<br>文件系统类型？  [ext2]? ext4     #文件系统不起实际作用<br> 起始点？ 0<br> 结束点？ 2G<br> 忽略/Ignore/放弃/Cancel? Ignore    #忽略<br>(parted) unit  GB                 #使用GB作为显示单位<br>(parted) mkpart<br> 分区名称？  []? nsd<br>文件系统类型？  [ext2]? ext4<br>起始点？ 2G<br>结束点？ 4G<br>(parted) print<br>(parted) quit                        </p><p>###################################################<br> 交换空间</p><p>什么是交换空间<br>• 相当于虚拟内存,<br>– 当物理内存不够用时,使用磁盘空间来模拟内存<br>– 在一定程度上缓解内存不足的问题<br>– 交换分区:以空闲分区充当的交换空间</p><p>1.格式化交换文件系统<br>[root@server0 ~]# mkswap /dev/vdb1    #格式化交换文件系统<br>[root@server0 ~]# blkid /dev/vdb1     #查看文件系统类型<br>[root@server0 ~]# mkswap /dev/vdb2<br>2.启用交换分区<br>[root@server0 ~]# swapon /dev/vdb1    #启用交换分区<br>[root@server0 ~]# swapon /dev/vdb2<br>[root@server0 ~]# swapon  -s          #查看交换空间信息<br>3.停用交换分区<br>[root@server0 ~]# swapoff /dev/vdb1<br>[root@server0 ~]# swapoff /dev/vdb2<br>[root@server0 ~]# swapon  -s<br>4.开机自动启用交换分区<br>[root@server0 ~]# vim /etc/fstab </p><p>/dev/vdb1  swap  swap defaults  0 0<br>/dev/vdb2  swap  swap defaults  0 0</p><p>[root@server0 ~]# swapoff /dev/vdb1<br>[root@server0 ~]# swapoff /dev/vdb2<br>[root@server0 ~]# swapon -s<br>[root@server0 ~]# swapon -a    #专用于检测swap分区开机自动启动<br>[root@server0 ~]# swapon -s</p><p>#######################################################<br>配置聚合连接（链路聚合  网卡绑定 ）</p><p>备份网卡设备:– 作用:热备份(activebackup)连接冗余</p><pre><code>eth1     eth2                    虚拟网卡：team0 192.168.1.1</code></pre><p>制作链路聚合<br>1.建立虚拟网卡team0,   参考 # man teamd.conf</p><h1 id="nmcli-connection-add-type-team"><a href="#nmcli-connection-add-type-team" class="headerlink" title="nmcli connection add type team"></a>nmcli connection add type team</h1><p>  con-name  team0  ifname  team0  autoconnect yes<br>  config  ‘{“runner”: {“name”: “activebackup”}}’</p><p>解析：nmcli connection 添加   类型  为team<br>         配置文件名为 team0  网卡名为  team0  每次开机自动启用<br>         链路聚合的工作模式为   热备份</p><h1 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h1><p>如果有敲错，一定要删除</p><h1 id="nmcli-connection-delete-team0-删除配置"><a href="#nmcli-connection-delete-team0-删除配置" class="headerlink" title="nmcli connection delete team0   #删除配置"></a>nmcli connection delete team0   #删除配置</h1><ol start="2"><li>加入成员<br>[root@server0 ~]# nmcli connection add type team-slave<br>con-name team0-1 ifname eth1 master team0</li></ol><p>[root@server0 ~]# nmcli connection add type team-slave<br>con-name team0-2 ifname eth2 master team0</p><p>解析：nmcli connection 添加   类型为  team的成员<br>          配置文件名  team0-1  网卡为 eth1  主设备为  team0</p><p>如果敲错，一定要删除配置<br>[root@server0 ~]# nmcli connection delete team0-1<br>[root@server0 ~]# nmcli connection delete team0-2</p><p>3.配置IP地址<br>[root@server0 ~]# nmcli connection modify team0<br>   ipv4.method manual ipv4.addresses 192.168.1.1/24<br>   connection.autoconnect yes</p><p>4.激活<br>[root@server0 ~]# nmcli connection up team0<br>[root@server0 ~]# nmcli connection up team0-1<br>[root@server0 ~]# nmcli connection up team0-2</p><p>[root@server0 ~]# teamdctl team0 state  #专业查看team0的命令<br>[root@server0 ~]# ifconfig eth1 down    #禁用网卡eth1<br>[root@server0 ~]# teamdctl team0 state</p><p>#####################################################<br>防火墙</p><p>永久配置(permanent)</p><h1 id="systemctl-restart-httpd"><a href="#systemctl-restart-httpd" class="headerlink" title="systemctl restart httpd"></a>systemctl restart httpd</h1><h1 id="firewall-cmd-–set-default-zone-public-修改默认区域"><a href="#firewall-cmd-–set-default-zone-public-修改默认区域" class="headerlink" title="firewall-cmd –set-default-zone=public  #修改默认区域"></a>firewall-cmd –set-default-zone=public  #修改默认区域</h1><h1 id="firewall-cmd-–zone-public-–list-all-查看public区域规则"><a href="#firewall-cmd-–zone-public-–list-all-查看public区域规则" class="headerlink" title="firewall-cmd –zone=public –list-all   #查看public区域规则"></a>firewall-cmd –zone=public –list-all   #查看public区域规则</h1><h1 id="firewall-cmd-–zone-public-–add-service-http-添加协议"><a href="#firewall-cmd-–zone-public-–add-service-http-添加协议" class="headerlink" title="firewall-cmd –zone=public –add-service=http  #添加协议"></a>firewall-cmd –zone=public –add-service=http  #添加协议</h1><h1 id="firewall-cmd-–zone-public-–list-all-查看public区域规则-1"><a href="#firewall-cmd-–zone-public-–list-all-查看public区域规则-1" class="headerlink" title="firewall-cmd –zone=public –list-all   #查看public区域规则"></a>firewall-cmd –zone=public –list-all   #查看public区域规则</h1><p>客户端desktop0验证：</p><h1 id="firefox-172-25-0-11"><a href="#firefox-172-25-0-11" class="headerlink" title="firefox  172.25.0.11"></a>firefox  172.25.0.11</h1><p>实现永久</p><h1 id="firewall-cmd-–reload-重新加载防火墙所有策略"><a href="#firewall-cmd-–reload-重新加载防火墙所有策略" class="headerlink" title="firewall-cmd –reload    #重新加载防火墙所有策略"></a>firewall-cmd –reload    #重新加载防火墙所有策略</h1><h1 id="firewall-cmd-–zone-public-–list-all-查看public区域规则-2"><a href="#firewall-cmd-–zone-public-–list-all-查看public区域规则-2" class="headerlink" title="firewall-cmd –zone=public –list-all   #查看public区域规则"></a>firewall-cmd –zone=public –list-all   #查看public区域规则</h1><h1 id="firewall-cmd-–permanent-–zone-public-–add-service-http"><a href="#firewall-cmd-–permanent-–zone-public-–add-service-http" class="headerlink" title="firewall-cmd –permanent –zone=public –add-service=http"></a>firewall-cmd –permanent –zone=public –add-service=http</h1><h1 id="firewall-cmd-–zone-public-–list-all"><a href="#firewall-cmd-–zone-public-–list-all" class="headerlink" title="firewall-cmd –zone=public –list-all"></a>firewall-cmd –zone=public –list-all</h1><h1 id="firewall-cmd-–reload"><a href="#firewall-cmd-–reload" class="headerlink" title="firewall-cmd –reload"></a>firewall-cmd –reload</h1><h1 id="firewall-cmd-–zone-public-–list-all-1"><a href="#firewall-cmd-–zone-public-–list-all-1" class="headerlink" title="firewall-cmd –zone=public –list-all"></a>firewall-cmd –zone=public –list-all</h1><p>端口转发：<br>   客户端虚拟机desktop0访问 172.25.0.11：5423<br>   防火墙进行端口转发将5423变成80<br>   172.25.0.11：80</p><p>虚拟机server0:<br>[root@server0 ~]# firewall-cmd –permanent –zone=public<br>  –add-forward-port=port=5423:proto=tcp:toport=80</p><p>[root@server0 ~]# firewall-cmd –zone=public –list-all </p><p>[root@server0 ~]# firewall-cmd –reload</p><p>[root@server0 ~]# firewall-cmd –zone=public –list-all</p><p>必须利用客户端desktop0测试：<br>[root@desktop0 ~]# firefox 172.25.0.11:5423</p><p>######################################################</p></h1></h1>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>httpd及虚拟主机</title>
      <link href="/2018/10/20/ENGINEER/DAY6/Engineer06/"/>
      <url>/2018/10/20/ENGINEER/DAY6/Engineer06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist       #显示Yum仓库信息</p><p>二、环境的准备，设置防火墙默认区域为trusted（允许所有访问）<br>虚拟机Server0<br>[root@server0 ~]# firewall-cmd –set-default-zone=trusted </p><p>虚拟机Desktop0<br>[root@desktop0 ~]# firewall-cmd –set-default-zone=trusted</p><p>########################################################</p><p>Web通信基本概念</p><p>• 基于 B/S (Browser/Server)架构的网页服务<br>– 服务端提供网页<br>– 浏览器下载并显示网页</p><p>• Hyper Text Markup Language(html),超文本标记语言<br>• Hyper Text Transfer Protocol(http),超文本传输协议 默认端口80</p><p>RHEL7中的Web服务<br>• 软件包:httpd<br>• 系统服务:httpd</p><p>• 提供的默认配置<br>– Listen:监听地址:端口(80)<br>– ServerName:本站点注册的DNS名称(空缺)<br>– DocumentRoot:网页根目录(/var/www/html)<br>– DirectoryIndex:起始页/首页文件名(index.html)</p><p>虚拟机Server0<br>1.安装软件httpd<br>2.重起httpd服务<br>[root@server0 ~]# systemctl restart httpd<br>[root@server0 ~]# systemctl enable httpd<br>ln -s ‘/usr/lib/systemd/system/httpd.service’ ‘/etc/systemd/system/multi-user.target.wants/httpd.service’<br>[root@server0 ~]# </p><p>3.测试：访问测试页面<br>[root@server0 ~]# firefox 172.25.0.11</p><ol start="4"><li>书写一个自己的页面<h1 id="echo-‘NSD1807-Web01’-gt-var-www-html-index-html"><a href="#echo-‘NSD1807-Web01’-gt-var-www-html-index-html" class="headerlink" title="echo ‘NSD1807 Web01’  &gt;  /var/www/html/index.html"></a>echo ‘<h1>NSD1807 Web01’  &gt;  /var/www/html/index.html</h1><h1 id="cat-var-www-html-index-html"><a href="#cat-var-www-html-index-html" class="headerlink" title="cat  /var/www/html/index.html"></a>cat  /var/www/html/index.html</h1></h1></li></ol><p>######################################################<br>– ServerName:本站点注册的DNS名称(空缺)</p><p>  DNS服务器：域名解析服务  将域名解析为IP地址<br>            classroom.example.com</p><pre><code>三个域名： server0.example.com     www0.example.com     webapp0.example.com</code></pre><p>虚拟机Server0：<br>1.修改主配置文件<br>[root@server0 ~]# vim /etc/httpd/conf/httpd.conf<br> 补充：vim 显示行号   末行模式：set  nu</p><p>  95行  ServerName server0.example.com:80   #将开头的#去掉</p><p>2.重起httpd服务<br>[root@server0 ~]# systemctl restart httpd</p><p>在虚拟机desktop0，测试访问<br>[root@desktop0 ~]# firefox server0.example.com</p><p>#####################################################</p><p> DocumentRoot:网页文件根目录(/var/www/html)</p><p>虚拟机Server0：<br>1.修改主配置文件</p><h1 id="mkdir-var-www-myweb"><a href="#mkdir-var-www-myweb" class="headerlink" title="mkdir /var/www/myweb"></a>mkdir /var/www/myweb</h1><h1 id="echo-‘-wo-shi-myweb’-gt-var-www-myweb-index-html"><a href="#echo-‘-wo-shi-myweb’-gt-var-www-myweb-index-html" class="headerlink" title="echo ‘ wo shi myweb’ &gt; /var/www/myweb/index.html"></a>echo ‘<h1> wo shi myweb’ &gt; /var/www/myweb/index.html</h1><h1 id="cat-var-www-myweb-index-html"><a href="#cat-var-www-myweb-index-html" class="headerlink" title="cat /var/www/myweb/index.html"></a>cat /var/www/myweb/index.html</h1><p>[root@server0 ~]# vim /etc/httpd/conf/httpd.conf<br> 补充：vim 显示行号   末行模式：set  nu</p><p>  119行  DocumentRoot  “/var/www/myweb”   #修改存放网页文件路径</p><p>2.重起httpd服务<br>[root@server0 ~]# systemctl restart httpd</p><p>在虚拟机desktop0，测试访问<br>[root@desktop0 ~]# firefox server0.example.com</p><p>######################################################<br> 网络路径与实际路径区别</p><p>客户端： firefox <a href="http://server0.example.com" target="_blank" rel="noopener">http://server0.example.com</a></p><p>服务端：<br>   httpd–》/etc/httpd/conf/httpd.conf–》DocumentRoot</p><p>虚拟机Server0：</p><h1 id="mkdir-p-var-www-myweb-abc-test"><a href="#mkdir-p-var-www-myweb-abc-test" class="headerlink" title="mkdir  -p /var/www/myweb/abc/test"></a>mkdir  -p /var/www/myweb/abc/test</h1><h1 id="echo-‘wo-shi-abc-test’-gt-var-www-myweb-abc-test-index-html"><a href="#echo-‘wo-shi-abc-test’-gt-var-www-myweb-abc-test-index-html" class="headerlink" title="echo ‘wo shi abc/test’ &gt; /var/www/myweb/abc/test/index.html"></a>echo ‘<h1>wo shi abc/test’ &gt; /var/www/myweb/abc/test/index.html</h1><p>虚拟机desktop0，测试访问<br>[root@desktop0 ~]# firefox server0.example.com/abc/test</p><p>######################################################<br>虚拟Web主机<br>– 由同一台服务器提供多个不同的Web站点</p><p>• 构建/区分方式<br>– 基于域名的虚拟主机<br>– 基于端口的虚拟主机<br>– 基于IP地址的虚拟主机</p><p>#####################################################<br>– 基于域名的虚拟主机</p><p>• 为每个虚拟站点添加配置，容器式配置格式<br>    <virtualhost ip地址:端口=""><br>      ServerName 此站点的DNS名称<br>      DocumentRoot 此站点的网页根目录<br>    </virtualhost></p><p>• 配置文件路径<br>  – /etc/httpd/conf/httpd.conf<br>  – /etc/httpd/conf.d/*.conf   （调用配置文件）</p><p>####################################################<br>配置虚拟Web主机<br>虚拟机server0:<br>[root@server0 ~]# vim  /etc/httpd/conf.d/nsd01.conf</p><virtualhost *:80=""><br>  ServerName www0.example.com<br>  DocumentRoot /var/www/qq<br></virtualhost><virtualhost *:80=""><br>  ServerName webapp0.example.com<br>  DocumentRoot /var/www/baidu<br></virtualhost><p>[root@server0 ~]# mkdir  /var/www/qq  /var/www/baidu<br>[root@server0 ~]# echo ‘</p><h1>企鹅’ &gt; /var/www/qq/index.html<br>[root@server0 ~]# echo ‘<h1>百度’ &gt; /var/www/baidu/index.html<br>[root@server0 ~]# systemctl restart httpd<p></p><p>[root@server0 ~]# killall httpd  #杀死所有httpd程序</p><p>一旦使用了虚拟Web主机功能，所有的Web站点都必须用虚拟Web主机来实现<br> 由上到下匹配<br>[root@server0 ~]# vim /etc/httpd/conf.d/nsd01.conf</p><virtualhost *:80=""><br>  ServerName www0.example.com<br>  DocumentRoot /var/www/qq<br></virtualhost><br><virtualhost *:80=""><br>  ServerName webapp0.example.com<br>  DocumentRoot /var/www/baidu<br></virtualhost><br><virtualhost *:80=""><br>  ServerName server0.example.com<br>  DocumentRoot /var/www/myweb<br></virtualhost><br>[root@server0 ~]#  systemctl restart httpd<br><br>#######################################################<br>httpd的访问控制<br><br>• 使用 <directory> 配置区段<br>– 每个文件夹自动继承其父目录的ACL访问权限<br>– 除非针对子目录有明确设置<br><br><br><directory 目录的绝对路径=""><br>.. ..<br>  Require all denied|granted<br>  Require ip IP或网段地址 .. ..<br></directory><br><br>###########################################<br>在 Web 网站 <a href="http://server0.example.com" target="_blank" rel="noopener">http://server0.example.com</a> 的<br>DocumentRoot 目录下创建一个名为 private 的子目录<br>要求如下:<br><br>3)从 server0 上,任何人都可以浏览 private 的内容,<br>但是从其他系统不能访问这个目录的内容<br><br>虚拟机server0：<br># mkdir /var/www/myweb/private<br># echo ‘<h1>wo shi private’ &gt; /var/www/myweb/private/index.html<br><br>书写新的配置文件，针对/var/www/myweb/private设置访问控制<br>[root@server0 ~]# vim /etc/httpd/conf/httpd.conf<br>[root@server0 ~]# vim /etc/httpd/conf.d/nsd02.conf<br> &lt;Directory /var/www/myweb/private&gt;<br>    Require ip 172.25.0.11   #仅允许本机172.25.0.11访问<br> </h1></directory><br>[root@server0 ~]#  systemctl restart httpd<br><br>虚拟机desktop0：访问测试<br># firefox server0.example.com/private<br>Forbidden<br>You don’t have permission to access /private/ on this server.<br><br>####################################################<br>案例4:使用自定Web根目录<br>调整 Web 站点 <a href="http://server0.example.com" target="_blank" rel="noopener">http://server0.example.com</a> 的网页目录,<br>要求如下:<br>1)新建目录 /webroot,作为此站点新的网页目录<br>4)确保站点 <a href="http://server0.example.com" target="_blank" rel="noopener">http://server0.example.com</a> 仍然可访问<br><br>虚拟机Server0<br>1.新建目录 /webroot,修改配置文件<br># mkdir /webroot<br># echo ‘<h1>wo shi webroot’ &gt; /webroot/index.html<br><br># vim /etc/httpd/conf.d/nsd01.conf   #修改内容<br> <virtualhost *:80=""><br>   ServerName  server0.example.com<br>   DocumentRoot  /webroot           #修改网页文件根目录<br> </virtualhost><p>2.修改配置文件，实现访问控制 </p><h1 id="vim-etc-httpd-conf-d-nsd02-conf-追加写入"><a href="#vim-etc-httpd-conf-d-nsd02-conf-追加写入" class="headerlink" title="vim /etc/httpd/conf.d/nsd02.conf   #追加写入"></a>vim /etc/httpd/conf.d/nsd02.conf   #追加写入</h1> &lt;Directory /webroot&gt;<br>    Require  all  granted            #允许所有人访问<br> <p>[root@server0 ~]# systemctl restart httpd</p><p>3.SELinux安全上下文值（标签，标识文件或目录）<br>[root@server0 ~]# ls -Zd /var/www/      #查看目录的上下文值<br>[root@server0 ~]# ls -Zd /webroot/      #查看目录的上下文值</p><p> ——以/var/www/为模版，修改/webroot的上下文值   -R：递归修改<br>[root@server0 ~]# chcon -R –reference=/var/www/  /webroot/</p><p>[root@server0 ~]# ls -Zd /webroot/      #查看目录的上下文值</p><p>虚拟机desktop：<br>[root@desktop0 ~]# firefox server0.example.com</p><p>#######################################################<br>部署动态网站</p><p>1.部署Python页面，放到webapp0.example.com的Documentroot目录</p><h1 id="cat-etc-httpd-conf-d-nsd01-conf"><a href="#cat-etc-httpd-conf-d-nsd01-conf" class="headerlink" title="cat /etc/httpd/conf.d/nsd01.conf"></a>cat /etc/httpd/conf.d/nsd01.conf</h1><h1 id="cd-var-www-baidu"><a href="#cd-var-www-baidu" class="headerlink" title="cd /var/www/baidu/"></a>cd /var/www/baidu/</h1><h1 id="wget-http-classroom-example-com-pub-materials"><a href="#wget-http-classroom-example-com-pub-materials" class="headerlink" title="wget http://classroom.example.com/pub/materials/"></a>wget <a href="http://classroom.example.com/pub/materials/" target="_blank" rel="noopener">http://classroom.example.com/pub/materials/</a></h1><p>webinfo.wsgi</p><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><p>2.方便客户端访问,网页跳转（网页访问路径别名）<br>[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf<br>  Alias 客户端网络路径   服务器实际原始路径</p><virtualhost *:80=""><br>  ServerName webapp0.example.com<br>  DocumentRoot /var/www/baidu<br>  Alias   /    /var/www/baidu/webinfo.wsgi<br>   #客户端访问到 网页文件根目录时，将webinfo.wsgi页面呈现<br></virtualhost><p>[root@server0 /]# systemctl restart httpd</p><p>客户端：访问测试查看Python页面<br>[root@desktop0 ~]# firefox  webapp0.example.com</p><p>3.翻译Python的Web页面内容<br>[root@server0 /]# yum -y install mod_wsgi  #解释Python程序<br>[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf</p><virtualhost *:80=""><br>  ServerName webapp0.example.com<br>  DocumentRoot /var/www/baidu<br>  WsgiScriptAlias  /    /var/www/baidu/webinfo.wsgi<br><br></virtualhost><p>[root@server0 /]# systemctl restart httpd</p><p>网页内容为：<br>  UINX时间戳：自1970-1-1 0时0分0秒算起，到现在时间所经历的秒数<br>客户端：访问测试查看Python页面<br>[root@desktop0 ~]# firefox  webapp0.example.com</p><p>4.此虚拟主机侦听在端口8909<br>[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf<br>Listen 8909</p><virtualhost *:8909=""><br>  ServerName  webapp0.example.com<br>  DocumentRoot  /var/www/baidu<br>  WsgiScriptAlias  /    /var/www/baidu/webinfo.wsgi<br></virtualhost><p>5.SELinux非默认端口的开放</p><h1 id="semanage-port-l-grep-http"><a href="#semanage-port-l-grep-http" class="headerlink" title="semanage port -l | grep http"></a>semanage port -l | grep http</h1><h1 id="semanage-port-a-t-http-port-t-p-tcp-8909"><a href="#semanage-port-a-t-http-port-t-p-tcp-8909" class="headerlink" title="semanage port  -a  -t  http_port_t  -p  tcp 8909"></a>semanage port  -a  -t  http_port_t  -p  tcp 8909</h1><pre><code>-a:添加    -t：类型     -p：协议</code></pre><h1 id="semanage-port-l-grep-http-1"><a href="#semanage-port-l-grep-http-1" class="headerlink" title="semanage port -l | grep http"></a>semanage port -l | grep http</h1><h1 id="systemctl-restart-httpd"><a href="#systemctl-restart-httpd" class="headerlink" title="systemctl restart httpd"></a>systemctl restart httpd</h1><p>[root@desktop0 ~]# firefox webapp0.example.com:8909</p><p>########################################################<br>  端口优先级高于域名</p><p>#######################################################</p></h1></h1></h1></h1></h1>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY6/Engineer-Exec06/"/>
      <url>/2018/10/20/ENGINEER/DAY6/Engineer-Exec06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例练习,准备:<br>            rht-vmctl  reset  classroom<br>            rht-vmctl  reset  server<br>           rht-vmctl  reset  desktop</p><p>######################################################</p><p>案例1:为虚拟机 server 配置以下虚拟Web主机</p><ul><li>实现三个网站的部署</li><li>实现客户端访问server0.example.com网页内容为  复仇者联盟4</li><li>实现客户端访问www0.example.com网页内容为 琅琊榜30</li><li>实现客户端访问webapp0.example.com网页内容为 38里春风不如你</li></ul><p>案例2:为虚拟机 server 配置Web访问控制<br>在 Web 网站 <a href="http://server0.example.com" target="_blank" rel="noopener">http://server0.example.com</a> 的 DocumentRoot 目录下创建一个名为 private 的子目录，要求如下：<br>1）在server0.example.com的DocumentRoot目录下，private的子目录里书写网页文件index.html内容为  不许偷看丫<br>2）此页面只能在本机浏览，但是从其他系统不能访问这个目录的内容</p><p>案例3:为虚拟机 server 使用自定Web根目录</p><p>调整 Web 站点 <a href="http://server0.example.com" target="_blank" rel="noopener">http://server0.example.com</a> 的网页目录，要求如下：<br>1）新建目录 /webroot，作为此站点新的网页目录<br>2）确保站点 <a href="http://server0.example.com" target="_blank" rel="noopener">http://server0.example.com</a>  仍然可访问</p><p>案例4：为虚拟机 server 部署动态WSGI站点<br>为站点 webapp0.example.com 配置提供动态Web内容，要求如下：<br>1）此虚拟主机侦听在端口8909<br>2）测试网页从以下地址下载，不要作任何更改<a href="http://classroom/pub/materials/webinfo.wsgi" target="_blank" rel="noopener">http://classroom/pub/materials/webinfo.wsgi</a><br>3）从浏览器访问 <a href="http://webapp0.example.com:8909" target="_blank" rel="noopener">http://webapp0.example.com:8909</a> 可接收到动态生成的 Web 页面</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY5/Engineer05/"/>
      <url>/2018/10/20/ENGINEER/DAY5/Engineer05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist       #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>二、环境的准备，设置防火墙默认区域为trusted（允许所有访问）<br>虚拟机Server0<br>[root@server0 ~]# firewall-cmd –set-default-zone=trusted </p><p>虚拟机Desktop0<br>[root@desktop0 ~]# firewall-cmd –set-default-zone=trusted</p><p>########################################################<br>iSCSI网络磁盘</p><p>• Internet SCSI,网际SCSI接口:默认端口 3260<br>– 一种基于C/S架构的虚拟磁盘技术<br>– 服务器提供磁盘空间,客户机连接并当成本地磁盘使用</p><pre><code>大冰箱----&gt;简易包装(纸)----&gt;坚固包装(木)---&gt;运输</code></pre><p>• backstore,后端存储（大冰箱-共享的设备）<br>– 对应到服务端提供实际存储空间的设备,需要起一个管理名称</p><p>• target,磁盘组（坚固包装(木））<br>– 是客户端的访问目标,作为一个框架,由多个lun组成</p><p>• lun,逻辑单元（关联-   将大冰箱放入–》坚固包装）<br>– 每一个lun需要关联到某一个后端存储设备,在客户端<br>会视为一块虚拟硬盘</p><p>• 基本交互操作<br>– /backstore/block create 后端存储名 实际设备路径<br>– /iscsi create 磁盘组的IQN名称<br>– /iscsi/磁盘组名/tpg1/luns create 后端存储路径<br>– /iscsi/磁盘组名/tpg1/acls create 客户机IQN标识<br>– /iscsi/磁盘组名/tpg1/portals create IP地址 端口号</p><p>• ISCSI Qualified Name 名称规范</p><p>– iqn.yyyy-mm.倒序域名:自定义标识</p><p>– 作用：用来识别 target 磁盘组, 也用来识别客户机身份</p><p>• 名称示例<br>– iqn.2016-02.com.example:server0<br>– iqn.2016-02.com.example:desktop0</p><p>一、进行分区<br>利用fdisk对/dev/vdb进行分区，将所有空间全部分配给第一个主分区10G<br>[root@server0 ~]# fdisk  /dev/vdb  </p><p>[root@server0 ~]# lsblk </p><p>└─vdb1 253:17   0  10G  0 part </p><p>[root@server0 ~]# ls /dev/vdb1</p><p>二、虚拟机server0服务端，搭建网络共享磁盘</p><p>1.安装软件targetcli<br>[root@server0 /]# yum -y install targetcli</p><p>2.运行targetcli进行配置<br>[root@server0 /]# targetcli<br>/&gt; ls</p><p> – A:建立 后端存储（买冰箱—&gt;简易的包装）</p><p>/&gt; backstores/block  create  name=nsd   dev=/dev/vdb1<br>/&gt; ls</p><p> – B:建立  target,磁盘组   木箱子（坚硬的包装）</p><p>/&gt; iscsi/ create   iqn.2018-08.example.com:server0<br>/&gt; ls </p><p> – C:进行  lun 关联 (将后端存储放入—&gt;磁盘组)</p><p>/&gt; iscsi/iqn.2018-08.example.com:server0/tpg1/luns<br>  create /backstores/block/nsd<br>/&gt; ls </p><p> – D:设置ACL 访问控制:iqn进行标识客户端（设置客户端声称 的名字）</p><p>/&gt; iscsi/iqn.2018-08.example.com:server0/tpg1/acls<br>   create iqn.2018-08.example.com:desktop0</p><p>/&gt; ls</p><p> – E:设置本机允许客户端访问的IP地址，端口号</p><p>/&gt; iscsi/iqn.2018-08.example.com:server0/tpg1/portals<br>   create 172.25.0.11</p><p>/&gt; ls</p><p>/&gt; exit</p><p>三、重起服务端target服务<br>[root@server0 /]# systemctl restart target<br>[root@server0 /]# systemctl enable target<br>ln -s ‘/usr/lib/systemd/system/target.service’ ‘/etc/systemd/system/multi-user.target.wants/target.service’</p><p>#####################################################<br>客户端：<br>虚拟机desktop0<br>1.安装软件包iscsi-initiator-utils</p><p>[root@desktop0 /]# rpm -q iscsi-initiator-utils<br>iscsi-initiator-utils-6.2.0.873-21.el7.x86_64</p><p>[root@desktop0 /]# yum repolist      #声称Yum的缓存<br>[root@desktop0 /]# yum -y install isc(tab)</p><p>2.修改配置文件 ，指定 客户端声称 的名字<br>[root@desktop0 /]# vim /etc/iscsi/initiatorname.iscsi<br>InitiatorName=iqn.2018-08.example.com:desktop0</p><p>3.重起iscsid服务，刷新客户端声称 的名字<br>[root@desktop0 ~]# systemctl restart iscsid<br>Warning: Unit file of iscsid.service changed on disk, ‘systemctl daemon-reload’ recommended.</p><p>[root@desktop0 ~]# systemctl daemon-reload<br>[root@desktop0 ~]# systemctl restart iscsid</p><p>4.寻找服务端共享存储，借鉴 man 帮助信息<br>[root@desktop0 /]# man iscsiadm    # /example 按n进行跳转匹配</p><p>   将字体变小： Ctrl  +  -<br>   将字体变大： Ctrl  +  shift  +  +</p><p>[root@desktop0 /]# iscsiadm –mode discoverydb –type sendtargets –portal 172.25.0.11 –discover</p><p>172.25.0.11:3260,1 iqn.2018-08.example.com:server0</p><p>5.重起iscsi服务，加载识别共享存储<br>[root@desktop0 /]# lsblk<br>[root@desktop0 /]# systemctl restart iscsi<br>[root@desktop0 /]# systemctl enable iscsi<br>[root@desktop0 /]# lsblk   #能够发现sda磁盘</p><p>####################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY5/Engineer05-new/"/>
      <url>/2018/10/20/ENGINEER/DAY5/Engineer05-new/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist       #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>二、环境的准备，设置防火墙默认区域为trusted（允许所有访问）<br>虚拟机Server0<br>[root@server0 ~]# firewall-cmd –set-default-zone=trusted </p><p>虚拟机Desktop0<br>[root@desktop0 ~]# firewall-cmd –set-default-zone=trusted</p><p>########################################################<br>iSCSI网络磁盘</p><p>• Internet SCSI,网际SCSI接口:默认端口 3260<br>– 一种基于C/S架构的虚拟磁盘技术<br>– 服务器提供磁盘空间,客户机连接并当成本地磁盘使用</p><pre><code>大冰箱----&gt;简易包装(纸)----&gt;坚固包装(木)---&gt;运输</code></pre><p>• backstore,后端存储（大冰箱-共享的设备）<br>– 对应到服务端提供实际存储空间的设备,需要起一个管理名称</p><p>• target,磁盘组（坚固包装(木））<br>– 是客户端的访问目标,作为一个框架,由多个lun组成</p><p>• lun,逻辑单元（关联-   将大冰箱放入–》坚固包装）<br>– 每一个lun需要关联到某一个后端存储设备,在客户端<br>会视为一块虚拟硬盘</p><p>• 基本交互操作<br>– /backstore/block create 后端存储名 实际设备路径<br>– /iscsi create 磁盘组的IQN名称<br>– /iscsi/磁盘组名/tpg1/luns create 后端存储路径<br>– /iscsi/磁盘组名/tpg1/acls create 客户机IQN标识<br>– /iscsi/磁盘组名/tpg1/portals create IP地址 端口号</p><p>• ISCSI Qualified Name 名称规范</p><p>– iqn.yyyy-mm.倒序域名:自定义标识</p><p>– 作用：用来识别 target 磁盘组, 也用来识别客户机身份</p><p>• 名称示例<br>– iqn.2016-02.com.example:server0<br>– iqn.2016-02.com.example:desktop0</p><p>一、进行分区<br>利用fdisk对/dev/vdb进行分区，将所有空间全部分配给第一个主分区10G<br>[root@server0 ~]# fdisk  /dev/vdb  </p><p>[root@server0 ~]# lsblk </p><p>└─vdb1 253:17   0  10G  0 part </p><p>[root@server0 ~]# ls /dev/vdb1</p><p>二、虚拟机server0服务端，搭建网络共享磁盘</p><p>1.安装软件targetcli<br>[root@server0 /]# yum -y install targetcli</p><p>2.运行targetcli进行配置<br>[root@server0 /]# targetcli<br>/&gt; ls</p><p> – A:建立 后端存储（买冰箱—&gt;简易的包装）</p><p>/&gt; backstores/block  create  name=nsd   dev=/dev/vdb1<br>/&gt; ls</p><p> – B:建立  target,磁盘组   木箱子（坚硬的包装）</p><p>/&gt; iscsi/ create   iqn.2018-08.example.com:server0<br>/&gt; ls </p><p> – C:进行  lun 关联 (将后端存储放入—&gt;磁盘组)</p><p>/&gt; iscsi/iqn.2018-08.example.com:server0/tpg1/luns<br>  create /backstores/block/nsd<br>/&gt; ls </p><p> – D:设置ACL 访问控制:iqn进行标识客户端（设置客户端声称 的名字）</p><p>/&gt; iscsi/iqn.2018-08.example.com:server0/tpg1/acls<br>   create iqn.2018-08.example.com:desktop0</p><p>/&gt; ls</p><p> – E:设置本机允许客户端访问的IP地址，端口号</p><p>/&gt; iscsi/iqn.2018-08.example.com:server0/tpg1/portals<br>   create 172.25.0.11</p><p>/&gt; ls</p><p>/&gt; exit</p><p>三、重起服务端target服务<br>[root@server0 /]# systemctl restart target<br>[root@server0 /]# systemctl enable target<br>ln -s ‘/usr/lib/systemd/system/target.service’ ‘/etc/systemd/system/multi-user.target.wants/target.service’</p><p>#####################################################<br>客户端：<br>虚拟机desktop0<br>1.安装软件包iscsi-initiator-utils</p><p>[root@desktop0 /]# rpm -q iscsi-initiator-utils<br>iscsi-initiator-utils-6.2.0.873-21.el7.x86_64</p><p>[root@desktop0 /]# yum repolist      #声称Yum的缓存<br>[root@desktop0 /]# yum -y install isc(tab)</p><p>2.修改配置文件 ，指定 客户端声称 的名字<br>[root@desktop0 /]# vim /etc/iscsi/initiatorname.iscsi<br>InitiatorName=iqn.2018-08.example.com:desktop0</p><p>3.重起iscsid服务，刷新客户端声称 的名字<br>[root@desktop0 ~]# systemctl restart iscsid<br>Warning: Unit file of iscsid.service changed on disk, ‘systemctl daemon-reload’ recommended.</p><p>[root@desktop0 ~]# systemctl daemon-reload<br>[root@desktop0 ~]# systemctl restart iscsid</p><p>4.寻找服务端共享存储，借鉴 man 帮助信息<br>[root@desktop0 /]# man iscsiadm    # /example 按n进行跳转匹配</p><p>   将字体变小： Ctrl  +  -<br>   将字体变大： Ctrl  +  shift  +  +</p><p>[root@desktop0 /]# iscsiadm –mode discoverydb –type sendtargets –portal 172.25.0.11 –discover</p><p>172.25.0.11:3260,1 iqn.2018-08.example.com:server0</p><p>5.重起iscsi服务，加载识别共享存储<br>[root@desktop0 /]# lsblk<br>[root@desktop0 /]# systemctl restart iscsi<br>[root@desktop0 /]# systemctl enable iscsi<br>[root@desktop0 /]# lsblk   #能够发现sda磁盘</p><p>####################################################<br>数据库管理：存放数据的仓库</p><p>  数据库 中会有很多的  库 ，在每一个库中会有很多的  表格</p><p>一、部署mariadb数据库服务器：默认的端口 3306</p><p>– mariadb-server:提供服务端有关的系统程序</p><p>[root@server0 /]# yum -y install mariadb-server</p><p>[root@server0 /]# systemctl  restart  mariadb<br>[root@server0 /]# systemctl  enable  mariadb</p><p>二、数据库基本操作</p><p>1.进入数据库<br>[root@server0 /]# mysql               #进入数据库</p><p>MariaDB [(none)]&gt; show  databases;     #查看都有那些库</p><p>MariaDB [(none)]&gt; create  database  nsd1807;  #创建nsd1807库<br>MariaDB [(none)]&gt; show  databases;</p><p>MariaDB [(none)]&gt; drop  database  nsd1807;   #删除nsd1807库<br>MariaDB [(none)]&gt; show  databases;</p><p>MariaDB [(none)]&gt; create  database  nsd;     #创建nsd库<br>MariaDB [(none)]&gt; show  databases;<br>MariaDB [(none)]&gt; exit                #退出数据库模式<br>Bye<br>[root@server0 /]# </p><p>二、为数据库管理员设置密码</p><p>  数据库管理员：用户名root，对整个数据库最高权限，mysql库中user表</p><p>  系统管理员：用户名root，对整个Linux系统最高权限，/etc/passwd</p><p>• 为数据库账号修改密码<br>– mysqladmin [-u用户名] [-p[旧密码]] password ‘新密码’</p><p>[root@server0 ~]# mysqladmin  -u  root  password  ‘123’</p><p>[root@server0 /]# mysql  -u  root  -p<br>Enter password: </p><p>[root@server0 /]# mysql  -u  root  -p123   #非交互式进入数据库</p><p>三、数据库的主配置文件</p><p>• 禁止监听,只服务于本机<br>[root@server0 ~]# vim /etc/my.cnf<br>[mysqld]<br>skip-networking  //跳过网络监听<br>.. ..<br>[root@server0 ~]# systemctl restart mariadb</p><p>四、数据库的 数据恢复</p><p>• 导入/恢复到数据库<br>– mysql  [-u用户名]  [-p[密码]] 数据库名   &lt;  备份文件.sql</p><h1 id="wget-http-classroom-example-com-pub-materials-users-sql"><a href="#wget-http-classroom-example-com-pub-materials-users-sql" class="headerlink" title="wget http://classroom.example.com/pub/materials/users.sql"></a>wget <a href="http://classroom.example.com/pub/materials/users.sql" target="_blank" rel="noopener">http://classroom.example.com/pub/materials/users.sql</a></h1><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><h1 id="mysql-u-root-p123-nsd-lt-users-sql"><a href="#mysql-u-root-p123-nsd-lt-users-sql" class="headerlink" title="mysql -u root -p123  nsd &lt; users.sql"></a>mysql -u root -p123  nsd &lt; users.sql</h1><p>  将数据users.sql以root身份，恢复到nsd库中</p><p>五、对于表格操作<br>      表字段    表记录<br>      操作： 增(insert)     删 (delete)       改(update)      查(select)</p><p>[root@server0 /]# mysql -u root -p123<br>    &gt; show databases;       #列出所有的库<br>    &gt; use nsd;              #进入nsd库<br>    &gt; show tables;          #列出所有表格</p><pre><code>&gt; select 表字段 from 表名；&gt; select * from base;      #查看base表所有内容&gt; select * from location;  #查看location表所有内容&gt; select name,password from base;  #查看某个字段内容 &gt; select city from location;       #查看某个字段内容</code></pre><p>六，有条件的查询</p><blockquote><p>select 表字段 from 表名  where 表字段=’值’；</p></blockquote><p>   请查询base表密码为456，用户名？<br>MariaDB [mysql]&gt; use nsd;<br>MariaDB [nsd]&gt; select * from base where password=’456’;</p><p>MariaDB [nsd]&gt; use mysql;<br>MariaDB [mysql]&gt; select * from nsd.base;<br>MariaDB [mysql]&gt; use nsd;</p><p>MariaDB [nsd]&gt; select * from base where name=’tom’;</p><p>MariaDB [nsd]&gt; select * from location where id=’3’;</p><p>MariaDB [nsd]&gt; select * from location where city=’beijing’;</p><p>MariaDB [mysql]&gt; use  mysql；<br>MariaDB [mysql]&gt; show tables;</p><p>MariaDB [mysql]&gt; desc user;    #查看表结构</p><p>MariaDB [mysql]&gt; select user,host,password from user;</p><p>七、数据库的授权</p><p>– 除了root用户,此nsd数据库只能被用户lisi查询,此用户的密码为123</p><p> – GRANT  权限列表  ON   数据库名.表名   TO   用户名@客户机地址<br>    IDENTIFIED   BY  ‘密码’;</p><p> –  grant 权限列表  on  数据库名.表名   to   用户名@客户机地址<br>    identified by ‘密码’;</p><pre><code>grant  select on  nsd.*  to lisi@localhost identified by &apos;123&apos;; </code></pre><p>   当lisi从本地localhost进行登陆输入密码123，将会获得nsd库中所有<br>   表的查询权限</p><p>[root@server0 /]# mysql -u root -p123</p><p>MariaDB [(none)]&gt; grant select on nsd.* to lisi@localhost<br>   identified by ‘123’;</p><p>MariaDB [(none)]&gt; select user,password from mysql.user;</p><p>#######################################################<br>案例5:使用数据库查询</p><ol start="2"><li>在系统 server0 上使用数据库 nsd,并使用相<br>应的 SQL 查询以回答下列问题:<br>1)密码是 solicitous 的人的名字?<br>[root@server0 /]# mysql -u root -p123<blockquote><p> use nsd;<br> select * from base where password=’solicitous’;</p></blockquote></li></ol><blockquote><p> select * from nsd.base where password=’solicitous’;</p></blockquote><p>2)有多少人的姓名是 Barbara 同时居住在 Sunnyvale?</p><p>MariaDB [nsd]&gt; select * from base,location<br>  where base.name=’Barbara’  and<br>  location.city=’Sunnyvale’  and  base.id=location.id;</p><p>MariaDB [nsd]&gt; select count(*) from base,location<br>   where base.name=’Barbara’  and<br>   location.city=’Sunnyvale’  and  base.id=location.id;</p><p>MariaDB [nsd]&gt; insert base values (‘6’,’Barbara’,’789’);<br>MariaDB [nsd]&gt; select * from base;</p><p>MariaDB [nsd]&gt; insert location values (‘6’,’Sunnyvale’);<br>MariaDB [nsd]&gt; select * from location;</p><ol><li>禁止空密码root用户访问 mariadb 数据库<br>[root@server0 /]# mysql -u root  -p123</li></ol><blockquote><p>select user,host,password from mysql.user;</p></blockquote><blockquote><p>select user,host,password from mysql.user<br>  where password=’’;</p></blockquote><blockquote><p>delete from mysql.user  where password=’’;  #删除记录<br>select user,host,password from mysql.user;</p></blockquote><blockquote><p>flush privileges;  #刷新user表记录</p></blockquote><p>测试登陆不成功<br>[root@server0 /]# mysql -u root -h server0.example.com</p><p>#######################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY5/Engineer-Study04/"/>
      <url>/2018/10/20/ENGINEER/DAY5/Engineer-Study04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.Linux中黑洞设备是什么？<br>     /dev/null   </p><p>2.Linux中正确信息与错误信息都收集的重定向是什么？<br>            &amp;&gt;   </p><p>3.下列变量名中有效的shell变量名是（  C ）<br>   A：-2-time    B：_2$3     C：trust_no_1    D：2004file</p><p>4.vim编辑器有几种工作模式？<br>    命令模式   输入模式   末行模式</p><p>5.开机挂载配置文件六个字段分别为什么？<br>     /etc/fstab<br>  设备路径   挂载点   文件系统类型      参数    备份标记   检测顺序</p><p>6.搭建smb服务，需要安装什么软件？<br>     samba    </p><p>7.配置nfs共享，配置文件在哪里？<br>    /etc/exports</p><p>8.yum客户端配置文件放在什么路径下？具体都有哪些字段？<br>       /etc/yum.repos.d/*.repo<br>      []、name、baseurl、enabled、gpgcheck</p><p>9.IPv6地址由多少个二进制数组成？<br>          128</p><p>10.环境变量PATH的作用？<br>        提供命令搜寻路径</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY4/Engineer04/"/>
      <url>/2018/10/20/ENGINEER/DAY4/Engineer04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist       #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>二、环境的准备，设置防火墙默认区域为trusted（允许所有访问）<br>虚拟机Server0<br>[root@server0 ~]# firewall-cmd –set-default-zone=trusted<br>虚拟机Desktop0<br>[root@desktop0 ~]# firewall-cmd –set-default-zone=trusted </p><p>######################################################<br>互联网中常见协议：<br>           http:超文本传输协议     默认端口:80<br>           https：安全的超文本传输协议  默认端口:443<br>           ftp:文件传输协议         默认端口:21<br>           tftp:简单的文件传输协议  默认端口:69<br>           dns：域名解析协议   默认端口:53<br>           smtp：发邮件协议    默认端口:25<br>           pop3：收邮件协议    默认端口:110</p><pre><code>snmp：网络管理协议   默认端口:161telnet:远程管理协议  默认端口:23</code></pre><p>#####################################################</p><p>互联网怎样找到另一台主机：通过IP地址</p><p>如何找到主机上相应的程序：端口</p><p>   端口：标识服务或程序，编号<br>         允许改变端口号，也允许一个服务或程序具备多个端口</p><p> 数据包：源IP地址、目标IP地址、数据、端口</p><p>##########################################################<br>案例3：自定义用户环境<br>为系统 server0  创建自定义命令<br>  1）自定义命令的名称为 qstat<br>  2）此自定义命令将执行以下操作： /bin/ps -Ao pid,tt,user,fname,rsz<br>  3）此自定义命令对系统中的所有用户都有</p><p>案例4：Shell脚本<br>为系统 server0 书写脚本/root/user.sh<br>运行脚本，可以判断用户输入的用户是否存在<br>如果存在，输出用户基本信息（id  用户名）<br>如果用户，不存在则创建用户，并输出用户创建成功</p><p>[root@server0 ~]# cat /root/user.sh </p><p>#!/bin/bash<br>read -p ‘请输入您要测试的用户名:’  user<br>id $user &amp;&gt; /dev/null<br>if [ $? -eq 0 ];then<br> echo $user已存在<br> id $user<br>else<br> useradd $user<br> echo $user 创建成功<br>fi<br>[root@server0 ~]# </p><p>[root@server0 ~]# cat /root/user.sh</p><p>#!/bin/bash<br>read -p   ‘请输入您要测试的用户名:’    user<br>useradd  $user &amp;&gt; /dev/null<br>if [ $?  -eq  0  ];then<br> echo $user创建成功<br>else<br> echo $user 已存在<br> id $user<br>fi<br>[root@server0 ~]#</p><p>######################################################<br>Samba服务基础，配置SMB共享（Windows与Linux跨平台的共享）</p><p>– 用途:为客户机提供共享使用的文件夹<br>– 协议:SMB(TCP 139)验证、CIFS(TCP 445)传输数据</p><p>• 所需软件包:samba<br>• 系统服务:smb</p><p>• Samba用户 —— 专用来访问共享文件夹的用户<br>– 但需要提前建立同名的系统用户<br>– 采用独立设置的密码与系统登陆密码不同</p><p> pdbedit -x harry   #删除samba共享帐号harry</p><p>• 修改 /etc/samba/smb.conf<br>[自定共享名]<br>path = 文件夹绝对路径<br>; public = no|yes //默认no<br>; browseable = yes|no //默认yes<br>; read only = yes|no //默认yes<br>; write list = 用户1 .. .. //默认无<br>; valid users = 用户1 .. .. //默认任何用户<br>; hosts allow = 客户机地址 .. ..<br>; hosts deny = 客户机地址 .. ..</p><p>一、搭建基本的samba共享服务<br>虚拟机Server0：<br>1.安装软件包samba<br>2.建立samba共享帐号，专用于验证samba共享服务用户名<br>[root@server0 ~]# useradd -s /sbin/nologin harry<br>[root@server0 ~]# useradd -s /sbin/nologin kenji<br>[root@server0 ~]# useradd -s /sbin/nologin chihiro</p><p>[root@server0 ~]# pdbedit -a harry   #添加为samba共享帐号<br>[root@server0 ~]# pdbedit -a kenji<br>[root@server0 ~]# pdbedit -a chihiro<br>[root@server0 ~]# pdbedit -L         #列出所有的samba共享帐号</p><p>3.发布目录 /common,共享名为 common</p><p>[root@server0 ~]# mkdir /common<br>[root@server0 ~]# echo haha &gt; /common/1.txt<br>[root@server0 ~]# ls /common</p><p>[root@server0 ~]# vim /etc/samba/smb.conf  #按G(大写)到最后\</p><p>1)此服务器必须是 STAFF 工作组的一个成员<br>        workgroup = STAFF</p><p>[common]<br>  path = /common</p><p>4.重起smb服务<br>[root@server0 ~]# systemctl restart smb<br>[root@server0 ~]# systemctl enable smb<br>ln -s ‘/usr/lib/systemd/system/smb.service’ ‘/etc/systemd/system/multi-user.target.wants/smb.service’</p><p>5.SELinux的 布尔值（功能的开关  on与off）<br>  – 需要加 -P 选项才能实现永久设置</p><h1 id="getsebool-a-grep-samba-查看SELinux布尔值"><a href="#getsebool-a-grep-samba-查看SELinux布尔值" class="headerlink" title="getsebool -a | grep samba          #查看SELinux布尔值"></a>getsebool -a | grep samba          #查看SELinux布尔值</h1><h1 id="setsebool-samba-export-all-ro-on-修改SELinux布尔值"><a href="#setsebool-samba-export-all-ro-on-修改SELinux布尔值" class="headerlink" title="setsebool  samba_export_all_ro on  #修改SELinux布尔值"></a>setsebool  samba_export_all_ro on  #修改SELinux布尔值</h1><h1 id="getsebool-a-grep-samba"><a href="#getsebool-a-grep-samba" class="headerlink" title="getsebool -a | grep samba"></a>getsebool -a | grep samba</h1><p>#######################################################<br>客户端：虚拟机Desktop0</p><p>1.所需软件包:samba-client访问服务端共享<br>2.显示服务端共享内容<br>[root@desktop0 ~]# smbclient -L //172.25.0.11<br>3.访问共享<br>[root@desktop0 ~]# smbclient -U harry //172.25.0.11/common<br>Enter harry’s password:<br>Domain=[STAFF] OS=[Unix] Server=[Samba 4.1.1]<br>smb: > ls<br>NT_STATUS_ACCESS_DENIED listing *   #权限不足<br>smb: > </p><p>######################################################</p><p>更加科学方便的方式访问samba共享:挂载</p><p>1.安装软件包cifs-utils(支持cifs传输协议)<br>2.进行挂载<br>[root@desktop0 ~]# mkdir /mnt/nsd01<br>[root@desktop0 ~]# ls /mnt/nsd01</p><h1 id="mount-o-user-harry-pass-123-172-25-0-11-common-mnt-nsd01"><a href="#mount-o-user-harry-pass-123-172-25-0-11-common-mnt-nsd01" class="headerlink" title="mount -o user=harry,pass=123 //172.25.0.11/common /mnt/nsd01/"></a>mount -o user=harry,pass=123 //172.25.0.11/common /mnt/nsd01/</h1><p>[root@desktop0 ~]# df  -h<br>[root@desktop0 ~]# ls  /mnt/nsd01</p><p>3.开机自动挂载/etc/fstab</p><pre><code>_netdev:网络设备   在开机启动时，挂载带有_netdev参数的设备，需要首先将网络服务部署完成，配置好所有网络参数，在挂载本设备</code></pre><p>[root@desktop0 ~]# vim /etc/fstab </p><p> //172.25.0.11/common  /mnt/nsd01   cifs<br>  defaults,user=harry,pass=123,_netdev  0   0</p><p>[root@desktop0 ~]# df -h<br>[root@desktop0 ~]# umount /mnt/nsd01<br>[root@desktop0 ~]# df -h<br>[root@desktop0 ~]# mount -a     #验证是否书写正确<br>[root@desktop0 ~]# df -h</p><p>######################################################<br>读写的samba共享</p><p>虚拟机Server0：</p><p>1.发布目录 /devops,共享名为 devops<br>[root@server0 ~]# mkdir  /devops<br>[root@server0 ~]# echo 123  &gt;  /devops/a.txt<br>[root@server0 ~]# ls  /devops/</p><p>[root@server0 ~]# vim /etc/samba/smb.conf<br>[devops]<br>  path = /devops<br>  write list = chihiro    #服务配置允许chihiro可以写</p><p>2.重起smb服务<br>[root@server0 ~]# systemctl restart smb</p><p>3.修改SELinux布尔值<br>[root@server0 ~]# getsebool -a | grep samba<br>[root@server0 ~]# setsebool samba_export_all_rw on<br>[root@server0 ~]# getsebool -a | grep samba</p><p>4.设置本机目录的基本的权限<br>[root@server0 ~]# setfacl -m u:chihiro:rwx /devops/<br>[root@server0 ~]# getfacl /devops/</p><p>客户端：虚拟机desktop0</p><p>1.书写配置文件完成开机自动挂载<br>[root@desktop0 ~]# vim /etc/fstab<br>  //172.25.0.11/devops /mnt/nsd02  cifs<br>  defaults,user=chihiro,pass=123,_netdev 0 0</p><p> No such file or directory:没有文件或目录</p><p>[root@desktop0 ~]# mkdir /mnt/nsd02<br>[root@desktop0 ~]# mount -a<br>[root@desktop0 ~]# df -h<br>[root@desktop0 ~]# touch /mnt/nsd02/test.txt</p><p>##################################################<br>总结：客户端访问服务端影响的方面<br>             1.防火墙<br>       2.SELinux<br>             3.服务本身的策略<br>             4.服务端本地目录的权限</p><p>###################################################<br>服务端:请在虚拟机Server0<br> 1.利用samba设置共享，目录为/nsd1807,发布共享名为 test<br> 2.实现harry用户对该共享拥有可读写的权限<br>[root@server0 ~]# mkdir /nsd1807<br>[root@server0 ~]# echo 123 &gt; /nsd1807/abc.txt<br>[root@server0 ~]# ls /nsd1807/<br>[root@server0 ~]# vim /etc/samba/smb.conf<br>[test]<br>  path = /nsd1807<br>  write list = harry<br>[root@server0 ~]# setfacl -m u:harry:rwx /nsd1807/<br>[root@server0 ~]# getfacl /nsd1807/<br>[root@server0 ~]# systemctl restart smb</p><p>客户端： 请在虚拟机desktop0<br> 1.实现该共享开机自动挂载到/mnt/pub<br>//172.25.0.11/test /mnt/pub cifs defaults,user=harry,pass=123,_netdev 0 0</p><p>###################################################<br>服务端:请在虚拟机Server0<br> 1.利用samba设置共享，目录为/public,发布共享名为nb<br> 2.实现kenji用户对该共享拥有可读写的权限<br>[root@server0 ~]# mkdir /public<br>[root@server0 ~]# echo haha &gt; /public/xixi.txt<br>[root@server0 ~]# ls /public/<br>[root@server0 ~]# vim /etc/samba/smb.conf<br>[nb]<br>  path = /public<br>  write list = kenji<br>[root@server0 ~]# systemctl restart smb<br>[root@server0 ~]# setfacl -m u:kenji:rwx /public/<br>[root@server0 ~]# getfacl /public/</p><p>客户端： 请在虚拟机desktop0<br> 1.实现该共享开机自动挂载到/mnt/nsd03<br>//172.25.0.11/nb /mnt/nsd03  cifs defaults,user=kenji,pass=123,_netdev 0 0</p><p>######################################################<br>multiuser机制(了解)</p><p>  在客户端实现samba挂载时，采用权限较小用户验证，必要时可以切换成权限较大的用户身份</p><p>– multiuser,提供对客户端多个用户身份的区分支持<br>– sec=ntlmssp,提供NT局域网管理安全支持</p><p>客户端：虚拟机desktop0</p><p>[root@desktop0 ~]# vim /etc/fstab</p><p>//172.25.0.11/devops /mnt/nsd02  cifs defaults,user=kenji,pass=123,_netdev,multiuser,sec=ntlmssp 0 0</p><p>[root@desktop0 ~]# umount /mnt/nsd02<br>[root@desktop0 ~]# mount -a<br>[root@desktop0 ~]# su - student<br>[student@desktop0 ~]$ cifscreds add -u chihiro 172.25.0.11<br>Password: </p><p>[student@desktop0 ~]$ exit</p><p>#######################################################<br> 配置NFS共享（Linux与Linux之间的共享）</p><p>• Network File System,网络文件系统<br> – 用途:为客户机提供共享使用的文件夹<br> – 协议:NFS(TCP/UDP 2049)、RPC(TCP/UDP 111)</p><p>• 所需软件包:nfs-utils<br>• 系统服务:nfs-server</p><p>虚拟机server0<br>1.安装软件nfs-utils<br>[root@server0 ~]# yum -y install nfs-utils<br>[root@server0 ~]# rpm -q nfs-utils</p><p>2.发布共享 /abc<br>[root@server0 ~]# mkdir /abc<br>[root@server0 ~]# echo 123 &gt; /abc/123.txt<br>[root@server0 ~]# ls /abc/<br>[root@server0 ~]# vim /etc/exports<br>• 修改 /etc/exports<br>– 文件夹路径    客户机地址(权限) </p><p>   /abc       *(ro)</p><p>3.重起nfs-server服务<br>[root@server0 ~]# systemctl restart nfs-server<br>[root@server0 ~]# systemctl enable nfs-server</p><p>客户端虚拟机desktop0</p><p>[root@desktop0 ~]# vim  /etc/fstab<br>172.25.0.11:/abc  /mnt/nfs   nfs   defaults,_netdev 0 0</p><p>[root@desktop0 ~]# mount -a<br>mount.nfs: mount point /mnt/nfs does not exist<br>[root@desktop0 ~]# mkdir /mnt/nfs<br>[root@desktop0 ~]# mount -a<br>[root@desktop0 ~]# df -h</p><p>#####################################################<br>配置IPv6地址</p><p>IPv4地址:32个二进制组成,以 点 分隔 4 部分,最终用4个十进制表示</p><p>IPv6地址:128个二进制组成,以 冒号 分隔 8 部分,每部分由 4个16进制数表示</p><p>– 每段内连续的前置 0 可省略、连续的多个 : 可简化为 ::<br>– 例如: 2003:ac18:0000:0000:0000:0000:0000:0305<br>      2003:ac18::305/64</p><p>为两个虚拟机的接口 eth0 配置下列 IPv6 地址<br>– server0 上的地址应该是 2003:ac18::305/64</p><p>[root@server0 ~]# nmcli connection modify ‘System eth0’<br>  ipv6.method manual ipv6.addresses 2003:ac18::305/64<br>  connection.autoconnect yes</p><p>[root@server0 ~]# nmcli connection up ‘System eth0’</p><p>[root@server0 ~]# ifconfig | head -4</p><p>[root@server0 ~]# ping6  2003:ac18::305</p><p>###################################################<br>环境变量:<br>   PATH :为执行命令时，提供搜寻路径（在搜寻命令程序文件位置）</p><p>[root@server0 /]# vim /opt/hello.sh </p><p>#!/bin/bash<br>echo hello world<br>[root@server0 /]# chmod +x /opt/hello.sh<br>[root@server0 /]# /opt/hello.sh</p><p>[root@server0 /]# hello.sh   #运行失败</p><p>[root@server0 /]# echo $PATH<br>[root@server0 /]# cp /opt/hello.sh  /usr/bin</p><p>[root@server0 /]# hello.sh   #运行成功</p><p>###################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY4/Engineer-Exec04/"/>
      <url>/2018/10/20/ENGINEER/DAY4/Engineer-Exec04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例练习,准备:<br>            rht-vmctl  reset  classroom<br>            rht-vmctl  reset  server<br>            rht-vmctl  reset  desktop</p><p>######################################################</p><p>案例1:为虚拟机 server 配置以下静态地址参数<br>– 主机名:server0.example.com<br>– IP地址:172.25.0.11<br>– 子网掩码:255.255.255.0<br>– 默认网关:172.25.0.254<br>– DNS服务器:172.25.254.254</p><p>案例4：实现本机server0 的Web服务<br>  1）利用httpd软件搭建Web服务，页面显示内容为 卖女孩的小火柴</p><p>案例5：实现本机server0 的防火墙配置<br>  1）修改虚拟机 server0防火墙配置，明确拒绝所有客户端访问<br>  2）在虚拟机 desktop0上测试能否访问server0 的Web服务<br>  3）在虚拟机 desktop0上测试能否 ping通 虚拟机 server0</p><p>案例7：实现本机server0 的防火墙配置<br>  1）修改虚拟机 server0防火墙配置，将默认区域修改为public<br>  2）在虚拟机 desktop0上测试能否访问server0 的Web服务<br>  3）在虚拟机 desktop0上测试能否 ping通 虚拟机 server0</p><p>案例8：实现本机server0 的防火墙配置<br>  1）修改虚拟机 server0防火墙配置，将默认区域修改为public<br>  2）修改虚拟机 server0防火墙配置，在public区域中添加http服务<br>  3）在虚拟机 desktop0上测试能否访问server0 的Web服务</p><p>案例6:配置Samba文件夹共享，防火墙默认区域设置为trusted，修改SElinux状态为Enforcing<br>在 server0 上发布共享文件夹<br> 1）此服务器必须是 STAFF 工作组的一个成员<br> 2）发布目录 /devops，共享名为 devops<br> 5）用户 harry 对共享 devops可读可写，密码是 123</p><p>在 desktop0 上访问共享文件夹</p><p> 1）访问 server0 上发布共享文件夹,实现开机自动挂载到/mnt/smb<br> 2）实现对/mnt/smb目录可以读和写</p><p>案例7:在server上操作,（MBR分区模式）规划分区<br> 添加一块80G的硬盘并规划分区：<br>    划分2个10G的主分区；1个12G的主分区;1个20G的逻辑分区。</p><p>案例8: vim文本编辑器练习，命令模式下的基本操作（重点知识）</p><p> 1）将/etc/passwd的前20行，写入到文件/opt/pass20.txt<br> 2）将/etc/shadow的前10行,追加写入到文件/opt/pass20.txt </p><p> 3）利用/opt/pass20.txt，进项如下操作：<br>    – 命令模式下移动光标：键盘上下左右键、Home键、End键<br>    – 命令模式下行间跳转：到全文的第一行（1G或gg）、到全文的最后一行（G）、到全文的第10行（10G）</p><pre><code>– 命令模式下复制、粘贴：     复制1行（yy）、复制3行（3yy）     粘贴到当前行之后（小写p）– 命令模式下删除：     删除单个字符（x）     删除到行首（d^）、删除到行尾（d$）     删除1行（dd）、删除3行（3dd）– 命令模式下查找关键词：      搜索（/word）切换结果（n、N）– 补充：在命令模式下大写的C，可以删除光标之后，并且进入输入模式</code></pre>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY3/Engineer03/"/>
      <url>/2018/10/20/ENGINEER/DAY3/Engineer03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist       #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>#######################################################<br>for 循环体系，反复执行类似的操作</p><pre><code>for 变量名 in 值列表do  命令序列done    </code></pre><p> [root@server0 ~]# vim /root/for01.sh</p><p> #!/bin/bash<br> for a in  zhangsan  lisi  wangwu  dc tc<br> do<br>    useradd $a<br>    echo $a成功创建<br> done</p><p> [root@server0 ~]# chmod +x /root/for01.sh </p><p> [root@server0 ~]# /root/for01.sh </p><p> 循环的列表值，可以不参与，循环执行的重复操作<br> 造数工具： {起始值..结束值}      {1..50}:产生1到50之间的数字</p><p>[root@server0 /]# vim /root/for01.sh</p><p> #!/bin/bash<br> for a in {1..20}<br> do<br>   echo hello world<br> done<br>[root@server0 /]# </p><p>案例5: 猜数的脚本<br>  利用read实现<br>  计算机系统随机产生一个 0至9之间的数字<br> 用户输入 一个 0至9之间的数字<br> 判断，<br> 如果用户输入的数字与计算机系统随机产生的数字相等,则输出 恭喜您猜对了<br> 如果用户输入的数字与计算机系统随机产生的数字不相等<br>  则输出 用户输入的数字与计算机的数字的大小情况</p><p>[root@server0 /]# vim  /root/num.sh</p><p>#!/bin/bash<br>num1=$[$RANDOM%10]<br>read -p  ‘请输入一个0至9之间的数字:’      num2<br>if  [  $num1  -eq  $num2  ];then<br> echo 恭喜您猜对了</p><p>elif [ $num2 -gt  $num1  ];then<br> echo 抱歉您猜 大 了<br> echo 正确的数字为$num1</p><p>else<br> echo 抱歉您猜 小 了<br> echo 正确的数字为$num1<br>fi</p><p>在案例5的基础上，想要实现用户可以连续猜三次<br>[root@server0 /]# vim  /root/num.sh</p><p> #!/bin/bash<br> num1=$[$RANDOM%10]<br> for a in {1..3}<br> do<br> read -p  ‘请输入一个0至9之间的数字:’      num2<br> if  [  $num1  -eq  $num2  ];then<br>  echo 恭喜您猜对了<br>  exit                #退出整个脚本<br> elif [ $num2 -gt  $num1  ];then<br>  echo 抱歉您猜 大 了<br> else<br>  echo 抱歉您猜 小 了<br> fi<br> done<br>[root@server0 /]# </p><p>###################################################</p><p>案例4:编写一个判断脚本<br>在 server0 上创建 /root/foo.sh 脚本<br>1)当运行/root/foo.sh redhat,输出为fedora<br>2)当运行/root/foo.sh fedora,输出为redhat<br>3)当没有任何参数或者参数不是 redhat 或者fedora时,<br>其错误输出产生以下信息: /root/foo.sh redhat|fedora</p><p>[root@server0 /]# vim  /root/foo.sh </p><p>#!/bin/bash<br>if  [ $# -eq 0 ];then<br> echo ‘/root/foo.sh redhat|fedora’ &gt;&amp;2  #将输出变成错误输出<br> exit 3                       #脚本退出返回状态值，非0即可<br>elif [ $1 == redhat ];then<br> echo fedora<br>elif [ $1 == fedora ];then<br> echo redhat<br>else<br> echo ‘/root/foo.sh redhat|fedora’  &gt;&amp;2  #将输出变成错误输出<br> exit 2                        #脚本退出返回状态值，非0即可<br>fi</p><p>案例5:编写一个批量添加用户脚本<br>在 server0 上创建 /root/batchusers 脚本<br>1)此脚本要求提供用户名列表文件作为参数<br>2)如果没有提供参数,此脚本应该给出提示<br>  Usage: /root/batchusers,退出并返回相应值<br>3)如果提供一个不存在的文件,此脚本应该给出提示<br>  Input file not found,退出并返回相应值<br>4)新用户的登录Shell为 /bin/false,无需设置密码<br>5)用户列表测试文件:<br><a href="http://classroom.example.com/pub/materials/userlist" target="_blank" rel="noopener">http://classroom.example.com/pub/materials/userlist</a></p><p>[root@server0 /]# vim /root/batchusers </p><p>#!/bin/bash<br>if [ $# -eq 0 ];then                  #判断用户是否输入参数<br> echo ‘Usage: /root/batchusers’ &gt;&amp;2<br> exit 2<br>elif [ -f $1 ];then                   #判断参数是否存在<br>  for a in $(cat $1)<br>  do<br>   useradd -s /bin/false $a &amp;&gt; /dev/null<br>   echo $a 创建成功<br>  done<br>else<br>  echo ‘Input file not found’ &gt;&amp;2<br>  exit 3<br>fi</p><p>[root@server0 /]# vim /root/userlist<br>chunjie<br>yuanxiao<br>38jie<br>qingming</p><p>[root@server0 /]# /root/batchusers  /root/userlist</p><p>######################################################</p><p>系统安全保护<br>SELinux安全机制<br>SELinux概述<br>• Security-Enhanced Linux<br>– 美国NSA国家安全局主导开发,一套增强Linux系统安<br>全的强制访问控制体系</p><p>– 集成到Linux内核(2.6及以上)中运行</p><p>– RHEL7基于SELinux体系针对用户、进程、目录和文件<br>提供了预设的保护策略,以及管理工具</p><p>• SELinux的运行模式<br>– enforcing(强制)、permissive(宽松)</p><p>– disabled(彻底禁用)任何模式变成disabled都要重起才可以</p><p>• 切换运行模式<br>– 临时切换:setenforce  1|0    #本次开机临时切换状态</p><p>– 固定配置:/etc/selinux/config 文件</p><p>两台虚拟机修改SELinux状态：<br>[root@server0 ~]# getenforce       #查看当前SELinux的运行模式<br>Enforcing<br>[root@server0 ~]# setenforce 0     #修改当前运行模式<br>[root@server0 ~]# getenforce<br>Permissive</p><p>[root@server0 ~]# vim /etc/selinux/config   #每次开机运行模式<br>SELINUX=permissive</p><p>#####################################################<br>配置用户环境<br>• 查看已设置的别名<br>– alias [别名名称]<br>• 定义新的别名<br>– alias 别名名称= ‘实际执行的命令行’<br>• 取消已设置的别名<br>– unalias [别名名称]</p><p>##############################################</p><p>• 影响指定用户的 bash 解释环境<br>– ~/.bashrc,每次开启 bash 终端时生效</p><p>• 影响所有用户的 bash 解释环境<br>– /etc/bashrc,每次开启 bash 终端时生效</p><p>[root@server0 ~]# vim  /root/.bashrc          #只影响root<br>alias hello=’echo hi’</p><p>[root@server0 ~]# vim  /home/student/.bashrc  #只影响student<br>alias hi=’echo hello’</p><p>[root@server0 ~]# vim  /etc/bashrc   #全局配置文件<br>alias haxi=’echo hahaxixi’</p><p>请问root可以执行的别名？ hello、haxi</p><p>请问student可以执行的别名？ hi、haxi</p><p>####################################################<br>防火墙策略管理</p><pre><code>严格过滤入站  ， 允许出站</code></pre><p>搭建基本Web服务<br>服务端：虚拟机Server0<br>1.安装软件包 Apache（httpd）<br>[root@server0 ~]# yum -y install httpd</p><p>2.重起httpd服务<br>[root@server0 ~]# systemctl restart httpd  #重起httpd服务<br>[root@server0 ~]# systemctl enable httpd   #设置为开机自启动<br>ln -s ‘/usr/lib/systemd/system/httpd.service’ ‘/etc/systemd/system/multi-user.target.wants/httpd.service’</p><p>3.本机访问测试<br>[root@server0 ~]# firefox 172.25.0.11    #本机访问本机</p><p>4.书写一个自己的页面文件<br>  默认网页文件存放路径：/var/www/html<br>  默认主页文件名称： index.html<br>[root@server0 ~]# vim /var/www/html/index.html</p><p><marquee><font color="red"><h1>NSD1807<br>  滚动                红色              字体变大</h1></font></marquee></p><p>[root@server0 ~]# firefox 172.25.0.11   </p><p>搭建基本FTP服务:文件传输<br>1.安装软件包vsftpd<br>[root@server0 ~]# yum -y install vsftpd</p><p>2.重起vsftpd服务<br>[root@server0 ~]# systemctl restart vsftpd<br>[root@server0 ~]# systemctl enable vsftpd</p><p>3.本机测试验证<br>[root@server0 ~]# firefox <a href="ftp://172.25.0.11" target="_blank" rel="noopener">ftp://172.25.0.11</a></p><p>4.默认vsftpd共享路径 /var/ftp/</p><p>###################################################<br>防火墙策略管理：隔离</p><p>  硬件防火墙</p><p>  软件防火墙： firewalld </p><p>• 管理工具:firewall-cmd（命令）、firewall-config（图形）</p><p>预设安全区域<br>• 根据所在的网络场所区分,预设保护规则集<br>– public:仅允许访问本机的sshd dhcp ping等少数几个服务<br>– trusted:允许任何访问<br>– block:阻塞任何来访请求,明确拒绝<br>– drop:丢弃任何来访的数据包，直接丢弃</p><p>防火墙默认区域：public</p><p>防火墙进入区域的判断规则：匹配及停止<br>     1.查看访问请求中源IP地址，查询所有的区域中，哪个区域有该源IP地址的策略，则进入该区域</p><pre><code>2.进入默认区域即可</code></pre><p>#######################################################<br>默认区域修改<br>虚拟机server0：</p><h1 id="firewall-cmd-–get-default-zone-查看默认区域"><a href="#firewall-cmd-–get-default-zone-查看默认区域" class="headerlink" title="firewall-cmd  –get-default-zone    #查看默认区域"></a>firewall-cmd  –get-default-zone    #查看默认区域</h1><p>虚拟机desktop0：</p><h1 id="ping-c-2-172-25-0-11-可以通信"><a href="#ping-c-2-172-25-0-11-可以通信" class="headerlink" title="ping -c 2 172.25.0.11    #可以通信"></a>ping -c 2 172.25.0.11    #可以通信</h1><p>虚拟机server0：</p><h1 id="firewall-cmd-–set-default-zone-block-修改默认区域"><a href="#firewall-cmd-–set-default-zone-block-修改默认区域" class="headerlink" title="firewall-cmd  –set-default-zone=block  #修改默认区域"></a>firewall-cmd  –set-default-zone=block  #修改默认区域</h1><h1 id="firewall-cmd-–get-default-zone"><a href="#firewall-cmd-–get-default-zone" class="headerlink" title="firewall-cmd  –get-default-zone"></a>firewall-cmd  –get-default-zone</h1><p>虚拟机desktop0：</p><h1 id="ping-c-2-172-25-0-11-不可以通信，有回应"><a href="#ping-c-2-172-25-0-11-不可以通信，有回应" class="headerlink" title="ping -c 2 172.25.0.11    #不可以通信，有回应"></a>ping -c 2 172.25.0.11    #不可以通信，有回应</h1><p>虚拟机server0：</p><h1 id="firewall-cmd-–set-default-zone-drop-修改默认区域"><a href="#firewall-cmd-–set-default-zone-drop-修改默认区域" class="headerlink" title="firewall-cmd  –set-default-zone=drop  #修改默认区域"></a>firewall-cmd  –set-default-zone=drop  #修改默认区域</h1><h1 id="firewall-cmd-–get-default-zone-1"><a href="#firewall-cmd-–get-default-zone-1" class="headerlink" title="firewall-cmd  –get-default-zone"></a>firewall-cmd  –get-default-zone</h1><p>虚拟机desktop0：</p><h1 id="ping-c-2-172-25-0-11-不可以通信，没有回应"><a href="#ping-c-2-172-25-0-11-不可以通信，没有回应" class="headerlink" title="ping -c 2 172.25.0.11    #不可以通信，没有回应"></a>ping -c 2 172.25.0.11    #不可以通信，没有回应</h1><p>######################################################<br>默认区域的服务添加</p><p>虚拟机server0：</p><h1 id="firewall-cmd-–set-default-zone-public-修改默认区域"><a href="#firewall-cmd-–set-default-zone-public-修改默认区域" class="headerlink" title="firewall-cmd –set-default-zone=public  #修改默认区域"></a>firewall-cmd –set-default-zone=public  #修改默认区域</h1><h1 id="firewall-cmd-–zone-public-–list-all-查看public区域规则"><a href="#firewall-cmd-–zone-public-–list-all-查看public区域规则" class="headerlink" title="firewall-cmd –zone=public –list-all   #查看public区域规则"></a>firewall-cmd –zone=public –list-all   #查看public区域规则</h1><h1 id="firewall-cmd-–zone-public-–add-service-http-添加允许协议"><a href="#firewall-cmd-–zone-public-–add-service-http-添加允许协议" class="headerlink" title="firewall-cmd –zone=public –add-service=http #添加允许协议"></a>firewall-cmd –zone=public –add-service=http #添加允许协议</h1><h1 id="firewall-cmd-–zone-public-–list-all"><a href="#firewall-cmd-–zone-public-–list-all" class="headerlink" title="firewall-cmd –zone=public –list-all"></a>firewall-cmd –zone=public –list-all</h1><p>虚拟机desktop0：</p><h1 id="firefox-172-25-0-11-可以访问"><a href="#firefox-172-25-0-11-可以访问" class="headerlink" title="firefox 172.25.0.11   可以访问"></a>firefox 172.25.0.11   可以访问</h1><h1 id="firefox-ftp-172-25-0-11-不可以访问"><a href="#firefox-ftp-172-25-0-11-不可以访问" class="headerlink" title="firefox ftp://172.25.0.11   不可以访问"></a>firefox <a href="ftp://172.25.0.11" target="_blank" rel="noopener">ftp://172.25.0.11</a>   不可以访问</h1><p>虚拟机server0：</p><h1 id="firewall-cmd-–zone-public-–add-service-ftp-添加允许协议"><a href="#firewall-cmd-–zone-public-–add-service-ftp-添加允许协议" class="headerlink" title="firewall-cmd –zone=public –add-service=ftp #添加允许协议"></a>firewall-cmd –zone=public –add-service=ftp #添加允许协议</h1><h1 id="firewall-cmd-–zone-public-–list-all-1"><a href="#firewall-cmd-–zone-public-–list-all-1" class="headerlink" title="firewall-cmd –zone=public –list-all"></a>firewall-cmd –zone=public –list-all</h1><p>虚拟机desktop0：</p><h1 id="firefox-172-25-0-11-可以访问-1"><a href="#firefox-172-25-0-11-可以访问-1" class="headerlink" title="firefox 172.25.0.11   可以访问"></a>firefox 172.25.0.11   可以访问</h1><h1 id="firefox-ftp-172-25-0-11-可以访问"><a href="#firefox-ftp-172-25-0-11-可以访问" class="headerlink" title="firefox ftp://172.25.0.11   可以访问"></a>firefox <a href="ftp://172.25.0.11" target="_blank" rel="noopener">ftp://172.25.0.11</a>   可以访问</h1><p>######################################################<br>互联网中常见协议：<br>           http:超文本传输协议<br>           https：安全的超文本传输协议<br>           ftp:文件传输协议<br>           tftp:简单的文件传输协议<br>           telnet:远程管理协议<br>           dns：域名解析协议<br>           smtp：发邮件协议<br>           pop3：收邮件协议<br>           snmp：网络管理协议</p><p>#####################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY3/Engineer-Exec03-exec/"/>
      <url>/2018/10/20/ENGINEER/DAY3/Engineer-Exec03-exec/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例1:为虚拟机 server 配置以下静态地址参数<br>  –主机名:server0.example.com<br> –IP地址:172.25.0.11<br>  –子网掩码:255.255.255.0<br>  –默认网关:172.25.0.254<br> –DNS服务器:172.25.254.254</p><p>案例2：设置SELinux保护<br>为虚拟机 server0、desktop0 配置SELinux<br>  1）确保 SELinux 处于强制启用模式（permissive）<br>  2）在每次重新开机后，此设置必须仍然有效</p><p>案例3：自定义用户环境<br>为系统 server0  创建自定义命令<br>  1）自定义命令的名称为 qstat<br>  2）此自定义命令将执行以下操作： /bin/ps -Ao pid,tt,user,fname,rsz<br>  3）此自定义命令对系统中的所有用户都有</p><p>案例4：Shell脚本<br>为系统 server0 书写脚本/root/user.sh<br>运行脚本，可以判断用户输入的用户是否存在<br>如果存在，输出用户基本信息（id  用户名）<br>如果用户，不存在则创建用户，并输出用户创建成功</p><p>案例5：实现本机server0 的Web服务<br>  1）利用httpd软件搭建Web服务，页面显示内容为 小蝌蚪找妈妈 </p><p>案例6：实现本机server0 的防火墙配置<br>  1）修改虚拟机 server0防火墙配置，明确拒绝所有客户端访问<br>  2）在虚拟机 desktop0上测试能否访问server0 的Web服务<br>  3）在虚拟机 desktop0上测试能否 ping通 虚拟机 server0</p><p>案例7：实现本机server0 的防火墙配置<br>  1）修改虚拟机 server0防火墙配置，将默认区域修改为public<br>  2）在虚拟机 desktop0上测试能否访问server0 的Web服务<br>  3）在虚拟机 desktop0上测试能否 ping通 虚拟机 server0</p><p>案例8：实现本机server0 的防火墙配置<br>  1）修改虚拟机 server0防火墙配置，将默认区域修改为public<br>  2）修改虚拟机 server0防火墙配置，在public区域中添加http服务<br>  3）在虚拟机 desktop0上测试能否访问server0 的Web服务</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY2/Engineer02/"/>
      <url>/2018/10/20/ENGINEER/DAY2/Engineer02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist       #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>#######################################################<br>Shell脚本基础</p><pre><code>脚本：可以执行的一个文本文件，可以实现某种功能</code></pre><p>[root@server0 ~]# vim /root/hello.sh<br> echo hello world</p><p>[root@server0 ~]# chmod +x  /root/hello.sh</p><p>[root@server0 ~]# /root/hello.sh    #绝对路径来运行</p><p>规范Shell脚本的一般组成<br> • #! 环境声明（以下所有代码利用哪一个程序解释）<br> • # 注释文本<br> • 可执行代码<br>案例1：书写hello world脚本<br>[root@server0 ~]# vim /root/hello.sh</p><p> #!/bin/bash<br> echo hello world<br> cat /etc/redhat-release<br> uname -r<br> hostname<br> ifconfig | head -2</p><p>[root@server0 ~]# chmod +x /root/hello.sh<br>[root@server0 ~]# /root/hello.sh</p><p>######################################################</p><p>管道传递<br>– 将前一条命令的标准输出交给后一条命令处理</p><p>重定向输出<br>     &gt; :  只收集正确输出<br>     2&gt;：只收集错误输出<br>     &amp;&gt;：正确输出与错误输出都收集<br>[root@server0 ~]# echo 123456 &gt; /opt/1.txt<br>[root@server0 ~]# cat  /opt/1.txt<br>[root@server0 ~]# cat  /etc<br>[root@server0 ~]# cat  /etc /opt/1.txt </p><p>[root@server0 ~]# cat /etc/ /opt/1.txt &gt; /opt/a.txt<br>[root@server0 ~]# cat /opt/a.txt </p><p>[root@server0 ~]# cat /etc/ /opt/1.txt 2&gt; /opt/a.txt<br>[root@server0 ~]# cat /opt/a.txt</p><p>[root@server0 ~]# cat /etc/ /opt/1.txt &amp;&gt; /opt/a.txt<br>[root@server0 ~]# cat /opt/a.txt</p><p>  $[] :代表运算  +   -   *  /    %（取余数运算）</p><p>[root@server0 ~]# echo $[3+1]<br>[root@server0 ~]# echo $[3-1]<br>[root@server0 ~]# echo $[3*2]<br>[root@server0 ~]# echo $[10/2]<br>[root@server0 ~]# echo $[10/3]    #默认取整<br>[root@server0 ~]# echo $[3-4]</p><p>   10 /  3  =  3      #10是被除数   3是除数    1是余数</p><p>   余数一定小于除数 </p><pre><code>&apos;  &apos;:取消所有字符特殊意义</code></pre><p>[root@server0 ~]# echo ‘<em>‘</em><br>[root@server0 ~]# echo ‘* &gt; ? []  {} % $’</p><ul><li><blockquote><p>? []  {} % $</p></blockquote><p>$( ):将命令的输出，当作参数，参与其他命令执行<br>[root@server0 ~]# date  +%F</p></li></ul><p>[root@server0 ~]# cd /opt<br>[root@server0 opt]# mkdir nsd-$(date +%F)<br>[root@server0 opt]# ls</p><p>[root@server0 opt]# mkdir $(hostname)<br>[root@server0 opt]# ls</p><p>[root@server0 opt]# mkdir  $(date +%F)<br>[root@server0 opt]# ls</p><p>#####################################################<br>案例2：创建用户，并设置密码</p><pre><code>黑洞设备:/dev/null</code></pre><p>[root@server0 /]# vim /root/user.sh</p><p>#!/bin/bash<br>useradd nsd03 &amp;&gt; /dev/null<br>echo 用户nsd03创建成功<br>echo 123 | passwd –stdin nsd03 &amp;&gt; /dev/null<br>echo 用户nsd03密码设置成功</p><p>[root@server0 /]# chmod +x /root/user.sh<br>[root@server0 /]# /root/user.sh</p><p>#######################################################<br>  为了增加脚本灵活度，适应多变的环境<br>  变量:会变化的量 ，以不变的名称存放的可以变化的值</p><p>  变量：容器     不变的是容器本身，存放内容可以变化</p><p>[root@server0 /]# vim /root/user.sh</p><p> #!/bin/bash<br> a=zhangsan<br> useradd $a &amp;&gt; /dev/null<br> echo 用户$a创建成功<br> echo 123 | passwd –stdin $a &amp;&gt; /dev/null<br> echo 用户$a密码设置成功</p><p>######################################################<br>变量的赋值</p><p>– 变量名=变量值</p><p>变量名要求<br>– 等号两边不要有空格<br>– 变量名只能由字母/数字/下划线组成,区分大小写<br>– 变量名不能以数字开头,不要使用关键字和特殊字符<br>– 若指定的变量名已存在,相当于为此变量重新赋值</p><ol start="17"><li>下列变量名中有效的shell变量名是（ C  ）<br>A：-2-time            B：_2$3<br>C：trust_no_1        D：2004file</li></ol><p>使用变量的值</p><p>– 查看变量值:echo $变量名、echo ${变量名}</p><p>[root@server0 /]# a=rhel<br>[root@server0 /]# echo  $a<br>rhel<br>[root@server0 /]# echo  ${a}<br>rhel<br>[root@server0 /]# echo  $a7</p><p>[root@server0 /]# echo  ${a}7<br>rhel7<br>[root@server0 /]# b=zhang<br>[root@server0 /]# c=san<br>[root@server0 /]# echo $b$c</p><p>###################################################</p><p>环境变量:由系统定义完成，并且赋值完成，用户直接使用即可</p><p>  USER=永远储存当前登陆的用户名</p><p>位置变量:由系统定义完成，并且赋值完成，用户直接使用即可<br>作用：在执行脚本时提供的命令行参数<br>– 表示为 $n,n为序号<br>– $1、$2、.. .. ${10}、${11}、.. ..</p><p>[root@server0 /]# vim /root/user.sh </p><p>#!/bin/bash<br>useradd $1 &amp;&gt; /dev/null<br>echo 用户$1创建成功<br>echo 123 | passwd –stdin $1 &amp;&gt; /dev/null<br>echo 用户$1密码设置成功</p><p>[root@server0 /]#  /root/user.sh   lisi<br>[root@server0 /]#  /root/user.sh   zhangsan<br>[root@server0 /]#  /root/user.sh   wangwu </p><p>[root@server0 /]# vim /root/1.sh </p><p> #!/bin/bash<br> echo $1<br> echo $2<br> echo $3<br>[root@server0 /]# /root/1.sh haha xixi hehe</p><p>[root@server0 /]# vim /root/cat.sh </p><p> #!/bin/bash<br> cat  -n  $1  |  head  -$2</p><p>[root@server0 /]# /root/cat.sh  /etc/passwd  3</p><p>####################################################<br> 增加用户的体验程度,降低用户的使用难度</p><p>   read：产生交互，捕捉用户在键盘上的输入，并且赋值给一个变量</p><pre><code>-p：&apos;屏幕提示信息&apos;</code></pre><p>[root@server0 /]# vim /root/user.sh</p><p> #!/bin/bash<br> read -p  ‘请输入您要创建的用户名:’     a<br> useradd  $a  &amp;&gt; /dev/null<br> echo  用户$a创建成功<br> echo  123  |  passwd  –stdin  $a &amp;&gt; /dev/null<br> echo  用户$a密码设置成功</p><p>[root@server0 /]# /root/user.sh</p><p>####################################################<br>预定义变量:由系统定义完成，并且赋值完成，用户直接使用即可</p><pre><code>$#  已加载的位置变量的个数,求和$*  所有位置变量的值</code></pre><p>[root@server0 /]# vim /root/1.sh </p><p>#!/bin/bash<br>echo $1<br>echo $2<br>echo $3<br>echo $#<br>echo $*<br>[root@server0 /]# /root/1.sh haha xixi hehe lele miaomiao</p><pre><code>$?  程序退出后的状态值,0表示正常,其他值异常    </code></pre><p>[root@server0 /]# cat /etc/redhat-release<br>Red Hat Enterprise Linux Server release 7.0 (Maipo)<br>[root@server0 /]# echo $?<br>0<br>[root@server0 /]# cat /etc<br>cat: /etc: 是一个目录<br>[root@server0 /]# echo $?<br>1</p><p>#####################################################</p><p>条件测试及选择判断</p><p>条件表达式：每一部分都要有空格<br> – [ 测试表达式 ]</p><p>• 检查文件状态<br>    -e：文档存在为真<br>    -d：存在且为目录为真<br>    -f：存在且为文件为真</p><p>[root@server0 /]# [ -d /etc/passwd ]<br>[root@server0 /]# echo $?<br>1<br>[root@server0 /]# [ -d /etc/ ]<br>[root@server0 /]# echo $?<br>0<br>[root@server0 /]# [ -e /etc/ ]<br>[root@server0 /]# echo $?<br>0<br>[root@server0 /]# [ -f /etc/ ]<br>[root@server0 /]# echo $?<br>1<br>[root@server0 /]# [ -f /etc/passwd ]<br>[root@server0 /]# echo $?<br>0</p><p>• 比较整数大小( g代表大  l代表小  e代表等于)<br>    -gt:大于<br>    -ge:大于等于<br>    -eq:等于<br>    -ne:不等于<br>    -lt:小于<br>    -le:小于等于</p><p>[root@server0 /]# [ 0 -eq 1 ]        等于<br>[root@server0 /]# echo $?<br>1<br>[root@server0 /]# [ 0 -le 0 ]        小于等于<br>[root@server0 /]# echo $?<br>0<br>[root@server0 /]# [ 0 -gt 0 ]         大于<br>[root@server0 /]# echo $?<br>1<br>[root@server0 /]# [ 0 -ge 0 ]        大于等于<br>[root@server0 /]# echo $?<br>0<br>[root@server0 /]# [ 1 -ne 0 ]        不等于<br>[root@server0 /]# echo $?<br>0</p><p>• 字符串比对<br>     == ：字符串相等为真<br>     !=：字符串不相等为真<br>[root@server0 /]# [ root == student  ]<br>[root@server0 /]# echo $?<br>1<br>[root@server0 /]# [ $USER == root ]<br>[root@server0 /]# echo $?<br>0<br>[root@server0 /]# [  a  !=  b ]<br>[root@server0 /]# echo $?<br>0</p><p>##################################################<br>if选择结构</p><p>if双分支处理</p><pre><code>if  [条件测试];then    命令序列xxelse    命令序列yyfi</code></pre><p>案例3： 测试IP地址脚本<br>    利用read读入用户输入IP地址，进行判断<br>    如果本机能够ping，则输出可以通信<br>    如果本机不能够ping，则输出不可以通信</p><p>[root@server0 /]# vim /root/ip.sh</p><p> #!/bin/bash<br> read   -p   ‘请输入您要测试的IP地址:’     ip<br> ping -c 2  $ip  &amp;&gt; /dev/null<br> if  [ $? -eq 0 ];then<br>   echo  可以通信<br> else<br>   echo  不可以通信<br> fi<br>[root@server0 /]# </p><p>####################################################<br>案例4: 猜数的脚本<br>  利用read实现<br>  计算机系统随机产生一个 0至9之间的数字<br> 用户输入 一个 0至9之间的数字<br> 判断，<br> 如果用户输入的数字与计算机系统随机产生的数字相等,则输出 恭喜您猜对了<br> 如果用户输入的数字与计算机系统随机产生的数字不相等,则输出 抱歉猜错了</p><p>  系统环境变量  RANDOM 储存随机数字的变量</p><p>计算机系统随机产生一个 0至9之间的数字:  $[$RANDOM%10]</p><p>[root@server0 /]# vim  /root/num.sh</p><p>#!/bin/bash<br>num1=$[$RANDOM%10]<br>read -p  ‘请输入一个0至9之间的数字:’      num2<br>if  [  $num1  -eq  $num2  ];then<br> echo 恭喜您猜对了<br>else<br> echo 抱歉猜错了<br> echo 正确的数字为$num1<br>fi</p><p>[root@server0 /]# </p><p>####################################################<br>if多分支处理</p><pre><code>if [条件测试1];then    命令序列xxelif [条件测试2];then    命令序列yyelif [条件测试3];then    命令序列aa     ......else    命令序列zzfi</code></pre><p>案例5：<br>      利用read实现<br>      用户输入考试成绩，<br>      如果成绩 大于等于90，则输出   优秀<br>      如果成绩 大于等于80，则输出   良好<br>      如果成绩 大于等于70，则输出   一般<br>      如果成绩 大于等于60，则输出   合格<br>      以上均不满足：则输出  在牛的肖邦，也弹不出哥的悲伤</p><p>[root@server0 /]# vim /root/nsd.sh</p><pre><code>#!/bin/bashread  -p   &apos;请输入您的成绩：&apos;    numif [  $num  -ge  90 ];then   echo  优秀elif [  $num  -ge  80 ];then   echo  良好elif [  $num  -ge  70 ];then   echo 一般elif [  $num  -ge  60 ];then   echo  合格else   echo  &apos;在牛的肖邦，也弹不出哥的悲伤!&apos;fi</code></pre><p>[root@server0 /]# </p><p>######################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY2/Engineer-Study01/"/>
      <url>/2018/10/20/ENGINEER/DAY2/Engineer-Study01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.划分  分区的命令是什么？<br>    fdisk</p><p>2.一般在磁盘中一个扇区为多少字节？<br>     512</p><p>3.Linux中新硬盘经历哪些步骤才能存储文档？<br>    识别硬盘—&gt;分区规划—&gt;格式化—&gt;挂载使用</p><p>4.MBR常见的分区类型有那三种？<br>    主分区  扩展分区  逻辑分区</p><p>5.刷新  新的分区表命令是什么？<br>     partprobe</p><p>6.格式化ext4文件系统的命令？格式化xfs文件系统的命令？<br>    mkfs.ext4  mkfs.xfs</p><p>7.查看分区的文件系统类型的命令是什么？<br>      blkid</p><p>8.如何在开机状态下，检测/etc/fstab文件中是否书写正确，命令是？<br>    mount -a</p><p>9.查看正在挂载的分区，使用情况的命令是什么？<br>     df  -h</p><p>10.开机挂载配置文件六个字段分别为什么？<br>  设备路径    挂载点   文件系统类型     参数     备份标记     检测顺序</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY1/Engineer01/"/>
      <url>/2018/10/20/ENGINEER/DAY1/Engineer01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist      #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>######################################################</p><p>扇区大小 512 字节</p><p>硬盘的“艺术”之旅<br>• 识别硬盘 =&gt; 分区规划 =&gt; 格式化 =&gt; 挂载使用<br>   毛坯楼层 =&gt; 打隔断 =&gt; 装修 =&gt; 入驻</p><p>一、识别硬盘<br>1.由系统自动完成<br>2.查看查看识别的硬盘</p><p>[root@server0 ~]# lsblk<br>NAME     SIZE  TYPE  MOUNTPOINT<br>vda      10G   disk<br>└─vda1  10G   part  /<br>vdb      10G   disk  </p><p>[root@server0 ~]# ls /dev/vdb<br>/dev/vdb<br>[root@server0 ~]# </p><p>二、分区规划 </p><p>• MBR/msdos 分区模式<br>–  主分区、扩展分区、逻辑分区<br>– 1~4个主分区   或者  3个主分区+1个扩展分区(n个逻辑分区)<br>– 最大支持容量为 2.2TB 的磁盘<br>– 扩展分区不能格式化，不能存储数据，只是基于它创建逻辑分区</p><p>划分分区<br>[root@server0 ~]# fdisk  /dev/vdb<br>   n 创建新的分区—–&gt;回车—–&gt;回车—-&gt;回车—–&gt;在last结束时 +1G<br>   p 查看分区表<br>   n 创建新的分区—–&gt;回车—–&gt;回车—-&gt;回车—–&gt;在last结束时 +2G<br>   d 删除分区<br>   w 保存并退出</p><p>[root@server0 ~]# lsblk<br>[root@server0 ~]# ls /dev/vdb[1-2]</p><p>三、格式化相当于装修，赋予空间文件系统（存放数据的规则）</p><p>[root@server0 ~]# mkfs.ext4  /dev/vdb1  #格式化ext4文件系统<br>[root@server0 ~]# mkfs.xfs  /dev/vdb2  #格式化xfs文件系统</p><p>[root@server0 ~]# blkid /dev/vdb1   #查看分区文件系统<br>[root@server0 ~]# blkid /dev/vdb2   #查看分区文件系统</p><p>[root@server0 ~]# mkfs.xfs /dev/vdb2<br>mkfs.xfs: /dev/vdb2 appears to contain an existing filesystem (xfs).<br>mkfs.xfs: Use the -f option to force overwrite.</p><p>###################################################<br>四、挂载访问<br>[root@server0 ~]# mkdir /mypart1<br>[root@server0 ~]# mount /dev/vdb1 /mypart1<br>[root@server0 ~]# df  -h     #查看正在挂载的设备的使用情况</p><p>[root@server0 ~]# mkdir /mypart2<br>[root@server0 ~]# mount /dev/vdb2 /mypart2<br>[root@server0 ~]# df  -h     #查看正在挂载的设备的使用情况</p><p>[root@server0 ~]# df -h | tail -2<br>/dev/vdb1       976M  2.6M  907M    1% /mypart1<br>/dev/vdb2       2.0G   33M  2.0G    2% /mypart2<br>[root@server0 ~]# cp /etc/passwd /mypart1/abc.txt<br>[root@server0 ~]# cp /etc/shadow /mypart1/nsd.txt<br>[root@server0 ~]# ls /mypart1/<br>abc.txt  lost+found  nsd.txt</p><p>[root@server0 ~]# umount /mypart1<br>[root@server0 ~]# ls /mypart1</p><p>[root@server0 ~]# mount /dev/vdb1 /mnt/<br>[root@server0 ~]# ls /mnt/<br>abc.txt  lost+found  nsd.txt</p><p>####################################################<br>五、开机自动挂载<br> 配置文件 /etc/fstab 的记录格式</p><p>–  设备路径     挂载点           文件系统类型       参数     备份标记      检测顺序</p><p>补充 ： vim 命令模式,按 o  另起新的一行,进入输入模式<br>[root@server0 ~]# vim /etc/fstab </p><p> /dev/vdb1   /mypart1  ext4  defaults  0 0<br> /dev/vdb2   /mypart2  xfs   defaults  0 0</p><p>[root@server0 ~]# umount /mypart1<br>[root@server0 ~]# umount /mypart2<br>[root@server0 ~]# df -h<br>[root@server0 ~]# mount -a<br>[root@server0 ~]# df -h<br>   检测/etc/fstab开机自动挂载配置文件,格式是否正确<br>   检测/etc/fstab中,书写完成,但当前没有挂载的设备,进行挂载</p><p>###################################################<br>六、综合分区<br>  最终有3个主分区，分别为1G、2G、1G<br>  创建扩展分区<br>  两个逻辑分区，分别为1G、1G<br>[root@server0 ~]# fdisk  /dev/vdb<br>   p 查看分区表<br>   n 创建主分区—–&gt;回车—–&gt;回车—-&gt;回车—–&gt;在last结束时 +1G<br>   p 查看分区表<br>   n 创建扩展分区<br>                   —–&gt;回车—-&gt;起始回车—–&gt;结束回车  将所有空间给扩展分区<br>   p 查看分区表<br>   n 创建逻辑分区—–&gt;起始回车——&gt;结束+1G<br>   n 创建逻辑分区—–&gt;起始回车——&gt;结束+1G<br>   p 查看分区表<br>   w 保存并退出<br>[root@server0 ~]# partprobe  刷新所有分区<br>[root@server0 ~]# lsblk</p><p>#################################################<br>  /dev/sda5该设备的含义：SCSI设备第一块的第1个逻辑分区<br>  /dev/sda6该设备的含义：SCSI设备第一块的第2个逻辑分区</p><p>#################################################<br>总结：<br> 1.查看识别的硬盘—&gt;lsblk<br> 2.划分分区—&gt;fdisk<br> 3.刷新分区—&gt;partprobe<br> 4.格式化—&gt; mkfs.ext4  mkfs.xfs—-》blkid查看文件系统<br> 5.挂载使用—&gt;mount–》通过/etc/fstab实现开机自动挂载—》mount -a<br> 6.查看正在挂载设备的使用情况—&gt;df -h</p><p>###################################################<br>七、图形添加一块新的60G硬盘</p><p> 1.关闭虚拟机Server0<br> 2.为虚拟机Server0，添加一块新的60G硬盘<br> [root@room9pc01 ~]# gos<br> [root@server0 ~]# lsblk<br> vdc    253:32   0  60G  0 disk </p><p>  综合分区：划分5个10G的可用分区<br>     思路：划分3个主分区   1个扩展分区    2个逻辑分区<br>[root@server0 ~]# fdisk  /dev/vdc<br>   p 查看分区表<br>   n 创建主分区—–&gt;回车—–&gt;回车—-&gt;回车—–&gt;在last结束时 +10G<br>         连续创建3个10G主分区<br>      ……<br>   n 创建扩展分区<br>                   —–&gt;回车—-&gt;起始回车—–&gt;结束回车  将所有空间给扩展分区<br>   p 查看分区表<br>   n 创建逻辑分区—–&gt;起始回车——&gt;结束+10G<br>   n 创建逻辑分区—–&gt;起始回车——&gt;结束+10G<br>   p 查看分区表<br>   w 保存并退出<br>[root@server0 ~]# lsblk </p><p>#####################################################<br>LVM逻辑卷的管理</p><p>  作用：1.空间可以变大  2.整合分散的空间</p><p>– 零散空闲存储 —- 整合的虚拟磁盘 —- 虚拟的分区</p><pre><code>物理卷（PV）          卷组（VG）</code></pre><p> /dev/vdb1  10G   整合                  划分<br> /dev/vdc1  10G   —-   40G   —–   15G（LV逻辑卷）<br> /dev/vdc2  10G   —-         —–<br> /dev/vdd1  10G</p><p>   /dev/vda—-》将磁盘所有的空间全部交给/dev/vda1 </p><p>   将众多的物理卷（PV）组成卷组（VG），再从卷组中划分逻辑卷(LV)</p><pre><code>面粉---------&gt;大面团--------&gt;小面团-------&gt;蒸（格式化）-------&gt;吃（挂载）砖 ---------&gt; 大房子--------&gt;打隔断---------&gt;装修（格式化）---------&gt;入住(挂载)</code></pre><p>######################################################<br>一、创建逻辑卷 </p><p>1.创建卷组<br> 命令格式： vgcreate   卷组的名称     分区路径</p><p>[root@server0 ~]# vgcreate systemvg /dev/vdc[1-2]</p><p>[root@server0 ~]# vgs   #查看所有卷组信息<br>[root@server0 ~]# pvs   #查看所有物理卷信息</p><p>2.划分逻辑卷<br> 命令格式：lvcreate -L 大小   -n 逻辑卷的名称   卷组的名称 </p><p>[root@server0 ~]# lvcreate -L 16G -n mylv systemvg</p><p>[root@server0 ~]# vgs   #查看所有卷组信息<br>[root@server0 ~]# lvs   #查看所有逻辑卷信息</p><p>3.逻辑卷的使用</p><p>[root@server0 ~]# mkfs.ext4 /dev/systemvg/mylv  #格式化</p><p>[root@server0 ~]# mkdir /lv        #创建挂载点<br>[root@server0 ~]# vim /etc/fstab   #修改配置文件</p><p>/dev/systemvg/mylv   /lv    ext4    defaults   0   0</p><p>[root@server0 ~]# mount -a</p><p>[root@server0 ~]# df -h | tail -1<br>/dev/mapper/systemvg-mylv   16G   45M   15G    1% /lv</p><p>######################################################<br>逻辑卷空间的扩大</p><p>一、卷组有足够的剩余空间<br>1.扩展逻辑卷的空间<br>[root@server0 ~]# lvcreate -L 16G -n mylv systemvg<br>[root@server0 ~]# mkfs.ext4 /dev/systemvg/mylv  #格式化</p><p>[root@server0 ~]# mkdir /lv        #创建挂载点<br>[root@server0 ~]# vim /etc/fstab   #修改配置文件<br>/dev/systemvg/mylv   /lv    ext4    defaults   0   0</p><p>[root@server0 ~]# mount -a</p><p>[root@server0 ~]# lvextend -L 18G /dev/systemvg/mylv </p><p>[root@server0 ~]# vgs<br>[root@server0 ~]# lvs</p><p>2.扩展逻辑卷的文件系统<br>   ext4文件系统： resize2fs<br>   xfs文件系统：xfs_growfs</p><p>[root@server0 ~]# blkid /dev/systemvg/mylv</p><p>[root@server0 ~]# df -h | tail -1<br>[root@server0 ~]# resize2fs /dev/systemvg/mylv<br>[root@server0 ~]# df -h | tail -1</p><p>二、卷组没有足够的剩余空间</p><p>1.扩大卷组的空间<br>[root@server0 ~]# vgextend systemvg /dev/vdc3 /dev/vdc5<br>[root@server0 ~]# vgs</p><p>2.扩展空间<br>[root@server0 ~]# lvextend -L 25G /dev/systemvg/mylv<br>[root@server0 ~]# vgs<br>[root@server0 ~]# lvs</p><p>3.扩展逻辑卷的文件系统<br>   ext4文件系统： resize2fs<br>   xfs文件系统：xfs_growfs</p><p>[root@server0 ~]# blkid /dev/systemvg/mylv<br>[root@server0 ~]# df -h | tail -1<br>[root@server0 ~]# resize2fs /dev/systemvg/mylv<br>[root@server0 ~]# df -h | tail -1</p><p>#####################################################<br>了解：逻辑卷可以变小<br>         ext4文件系统支持缩小<br>         xfs文件系统不支持缩小</p><p>###################################################<br> 卷组划分空间的单位PE  默认大小4M</p><ol><li><p>基于刚建立的 2000MiB 分区构建新的 LVM 存储<br>– 新的逻辑卷命名为 database,大小为50个物理扩展单<br>元(Physical Extent),属于 datastore 卷组<br>– 在 datastore 卷组中的所有逻辑卷,其物理扩展单元<br>(Physical Extent)的大小为16MiB<br>– 使用 EXT3 文件系统对逻辑卷 database 格式化,<br>此逻辑卷应该在开机时自动挂载到 /mnt/database 目录</p><pre><code>逻辑卷有50个PE组成</code></pre><p> datastore 卷组中PE的大小为16M</p></li></ol><p>• 创建卷组的时候设置PE大小<br>– vgcreate -s PE大小 卷组名 空闲分区…  #创建卷组修改PE的大小<br>– vgchange -s PE大小 卷组名     #卷组已存在修改PE的大小</p><p>• 创建逻辑卷的时候指定PE个数<br>– lvcreate -l PE个数 -n 逻辑卷名 卷组名</p><p>####################################################<br>[root@server0 ~]# vgchange -s 1M systemvg   #修改PE的大小</p><p>[root@server0 ~]# vgdisplay systemvg    #查看卷组详细信息<br>  PE Size               1.00 MiB</p><p>[root@server0 ~]# lvcreate -l 89 -n lvtest03 systemvg</p><p>[root@server0 ~]# lvs</p><p>#####################################################<br>删除逻辑卷</p><p>1.首先删除逻辑卷，然后在删除卷组，最后删除物理卷<br>2.在删除卷组时，确认没有任何一个逻辑卷基于其创建</p><p>1.删除逻辑卷<br>[root@server0 ~]# lvremove /dev/systemvg/mylv<br>[root@server0 ~]# umount /lv</p><p>[root@server0 ~]# lvremove /dev/systemvg/mylv<br>Do you really want to remove active logical volume mylv? [y/n]: y</p><p>[root@server0 ~]# lvremove  /dev/systemvg/lvtest01<br>Do you really want to remove active logical volume lvtest01? [y/n]: y</p><p>[root@server0 ~]# lvremove  /dev/systemvg/lvtest02<br>Do you really want to remove active logical volume lvtest02? [y/n]: y</p><p>[root@server0 ~]# lvremove  /dev/systemvg/lvtest03<br>Do you really want to remove active logical volume lvtest03? [y/n]: y</p><p>2.删除卷组</p><p>[root@server0 ~]# vgs<br>[root@server0 ~]# vgremove systemvg<br>  Volume group “systemvg” successfully removed</p><p>3.删除物理卷<br>[root@server0 ~]# pvremove /dev/vdc[1-3] /dev/vdc5<br>  Labels on physical volume “/dev/vdc1” successfully wiped<br>  Labels on physical volume “/dev/vdc2” successfully wiped<br>  Labels on physical volume “/dev/vdc3” successfully wiped<br>  Labels on physical volume “/dev/vdc5” successfully wiped<br>[root@server0 ~]# pvs</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ENGINEER/DAY1/Engineer-Exec01/"/>
      <url>/2018/10/20/ENGINEER/DAY1/Engineer-Exec01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例练习,准备:<br>            rht-vmctl  reset  classroom<br>            rht-vmctl  reset  server<br>            rht-vmctl  reset  desktop</p><p>######################################################</p><p>案例1:为虚拟机 server 配置以下永久的静态地址参数<br>– 主机名:server0.example.com<br>– IP地址:172.25.0.11<br>– 子网掩码:255.255.255.0<br>– 默认网关:172.25.0.254<br>– DNS服务器:172.25.254.254</p><p>案例2：复制、粘贴、移动<br> 以root用户新建/example/目录，在此目录下新建nsd.txt文件，并进一步完成下列操作</p><p> 1）将“I love Study”写入到文件nsd.txt<br> 2）将nsd.txt重命名为mylove.txt<br> 3）将/etc/passwd、/boot、/etc/group同时拷贝到/example/目录下<br> 4）将ifconfig命令的前两行内容，追加写入mylove.txt<br> 5）将主机名永久配置文件，拷贝到/example/目录下<br> 6）将DNS永久配置文件，拷贝到/example/目录下<br> 7）将开机自动挂载配置文件，拷贝到/example/目录下</p><p>案例3:在server上操作,（MBR分区模式）规划分区<br> 添加一块80G的硬盘并规划分区：<br>   划分2个10G的主分区；1个12G的主分区;1个20G的逻辑分区。</p><p>案例4:在server上操作,分区使用</p><p>1、案例3中新添加80G硬盘的第一个逻辑分区<br>– 格式化成xfs文件系统，实现该分区开机自动挂载，挂载点为/mnt/xfs</p><p>2、案例3中新添加80G硬盘的第一个主分区<br>– 完成开机自动挂载，挂载点/mnt/mypart,文件系统为ext4</p><p>案例5:虚拟机 server0操作，构建 LVM 存储</p><p>– 新建一个名为 systemvg 的卷组<br>– 在此卷组中创建一个名为 vo 的逻辑卷，大小为8G<br>– 将逻辑卷 vo 格式化为 xfs 文件系统<br>– 将逻辑卷 vo 挂载到 /vo 目录，并在此目录下建立一个测试文件 votest.txt，内容为“I AM KING.”<br>– 实现逻辑卷vo开机自动挂载到/vo</p><p>案例6:虚拟机 server0操作，构建 LVM 存储(修改PE大小)<br>– 新的逻辑卷命名为 database，其大小为50个PE的大小，属于 datastore 卷组<br>– 在 datastore 卷组中其PE的大小为1M<br>– 使用 EXT4 文件系统对逻辑卷 database 格式化，此逻辑卷应该在开机时自动挂载到 /mnt/database 目录</p><p>案例7:虚拟机 server0操作，扩展逻辑卷</p><p>– 将/dev/systemvg/vo逻辑卷的大小扩展到20G</p><p>案例8: vim文本编辑器练习，命令模式下的基本操作（重点知识）</p><p> 1）将/etc/passwd的前20行，写入到文件/opt/pass20.txt<br> 2）将/etc/shadow的前10行,追加写入到文件/opt/pass20.txt </p><p> 2）利用/opt/pass20.txt，进项如下操作：<br>    – 命令模式下移动光标：键盘上下左右键、Home键、End键<br>    – 命令模式下行间跳转：到全文的第一行（1G或gg）、到全文的最后一行（G）、到全文的第10行（10G）</p><pre><code>– 命令模式下复制、粘贴：     复制1行（yy）、复制3行（3yy）     粘贴到当前行之后（小写p）– 命令模式下删除：     删除单个字符（x）     删除到行首（d^）、删除到行尾（d$）     删除1行（dd）、删除3行（3dd）– 命令模式下查找关键词：      搜索（/word）切换结果（n、N）– 补充：在命令模式下大写的C，可以删除光标之后，并且进入输入模式</code></pre>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY7/NSD1807-exec01/"/>
      <url>/2018/10/20/ADMIN/DAY7/NSD1807-exec01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例练习,准备:<br>            rht-vmctl  reset  classroom<br>            rht-vmctl  reset  server<br>            rht-vmctl  reset  desktop</p><p>########################################################################</p><p>﻿案例1:为虚拟机 server0 配置以下静态地址参数<br>– 主机名:server0.example.com<br>– IP地址:172.25.0.169<br>– 子网掩码:255.255.255.0<br>– 默认网关:172.25.0.254<br>– DNS服务器:172.25.254.254</p><p>案例3:指定yum软件源<br>为 server0 指定可用的 yum 软件源<br>– YUM软件库的地址为 <a href="http://classroom.example.com/content/rhel7.0/x86_64/dvd" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/x86_64/dvd</a><br>– 将此配置为虚拟机 server0 的默认软件仓库<br>– 确认可用的仓库列表<br>– 利用yum仓库安装httpd与vsftpd</p><p>案例4:指定yum软件源<br>为 desktop0 指定可用的 yum 软件源<br>– YUM软件库的地址为 <a href="http://classroom.example.com/content/rhel7.0/x86_64/dvd" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/x86_64/dvd</a><br>– 将此配置为虚拟机 server0 的默认软件仓库<br>– 确认可用的仓库列表<br>– 利用yum仓库安装httpd与vsftpd</p><p>案例5：虚拟机 server0上操作，复制、粘贴、移动<br> 以root用户新建/nsddir/目录，在此目录下新建readme.txt文件，并进一步完成下列操作</p><p> 1）将“I love Linux”写入到文件readme.txt<br> 2）将readme.txt重命名为mylove.txt<br> 3）将/etc/passwd、/boot、/etc/group同时拷贝到/nsddir目录下<br> 4）将ifconfig命令的前两行内容，追加写入mylove.txt<br> 5）将主机名永久配置文件，拷贝到/nsddir目录下<br> 6）将DNS永久配置文件，拷贝到/nsddir目录下</p><p>案例6：虚拟机Server上操作</p><ol><li>新建目录结构/nsd/test</li><li>在目录/nsd/test创建文件nsd.txt并写入内容 NSD  Student</li><li>将/nsd/test/nsd.txt文件复制到/root目录下，同时 改名为 tedu.txt</li><li>利用vim 修改文件/etc/hostname将其原有内容全部删除，写入新的内容为student0.example.com</li><li>将/etc/passwd 、/etc/resolv.conf、/etc/hostname 同时拷贝到/nsd/test/目录下</li><li>将文件 /nsd/test/hostname 重改名为 hn.txt </li><li>创建目录结构/nsd/test/kernel</li><li>将目录 /boot内容中以 vm 开头的 复制到/nsd/test/kernel目录下 </li></ol><p>案例7:虚拟机 server0上操作，查找并处理文件<br> – 利用find查找所有用户 student 拥有的必须是文件,把它们拷贝到 /root/findfiles/(首先创建目录) 文件夹中<br> – 利用find查找/boot目录下大于10M并且必须是文件，拷贝到/opt</p><p>– 利用find查找/boot/ 目录下以 vm 开头且必须是文件，拷贝到/opt<br> – 利用find查找/boot/ 目录下为快捷方式<br> – 利用find查找/etc 目录下，以 tab 作为结尾的 必须是文件</p><p>案例8:虚拟机 server0上操作,查找并提取文件内容<br>1.在文件 /usr/share/dict/words 中查找到所有包含字符串 seismic 的行,将输出信息,写入到/opt/nsd18.txt</p><p>2.查看内核版本，将显示结果重定向到/root/version.txt<br>3.查看红帽系统版本，将显示结果追加到/root/version.txt<br>4.查看主机名将显示结果追加到/root/version.txt</p><p>4.将/etc/fstab文件中以UUID开头的信息，写入到/root/fstab.txt<br>5.提取/etc/passwd以bash结尾的行，将其信息写入/opt/pass.txt  </p><p>6.复制/etc/login.defs文件到当前目录下，改名为init.txt<br>7.提取init.txt文件里的有效配置（去除以#号开头，去除空行），保存为init2.txt</p><p>案例9:虚拟机 server0上操作,tar制作/释放归档压缩包（zcf、ztf、zxf、jcf、jtf、jxf、cf、tf）<br>    1）备份/boot、/home这两个文件夹，保存为boothome.tar.gz文件<br>    2）查看boothome.tar.gz文件内包含哪些内容 </p><pre><code>3）创建/root/boothome/文件夹  4）将boothome.tar.gz释放到文件夹/root/boothome/下    5）创建一个名为 /root/backup.tar.bz2 的归档文件，其中包含 /usr/local 目录中的内容6）查看 /root/backup.tar.bz2 归档压缩包的内容</code></pre><p>案例10:虚拟机 server0上操作<br>    • 新建用户 alex，其用户ID为3456，密码是flectrag<br>    • 创建下列用户、组以及组的成员关系：<br>     – 一个名为 adminuser 的组<br>     – 一个名为 natasha 的用户，其属于 adminuser 组， 这个组是该用户的从属组 </p><pre><code>   – 一个名为 harry 的用户，其属于 adminuser 组，这个 组是该用户的从属组    – 一个名为 sarah 的用户，其在系统中没有可交互的 Shell（/sbin/nologin），并且不是 adminuser 组的成员 – natasha 、harry、sarah 的密码都要设置为 flectra</code></pre><p>案例11：组账号基本管理<br>    1）新建组账号stugrp<br>    2）创建用户lily、zhangsan<br>    3）为stugrp组添加三个成员用户（lily、root、zhangsan）<br>   4）从stugrp组删除一个成员（lily）</p><p>案例12：配置NTP网络时间客户端 </p><pre><code>配置虚拟机 server0，自动校对系统时间NTP服务器位于 classroom.example.com 此客户机的时间与NTP服务器的时间保持同步</code></pre><p>案例13:虚拟机 server0上操作<br>    为用户 natasha 配置一个定时任务<br>       – 每天在本地时间 14:23 执行<br>       – 需要完成的任务操作为 /bin/echo  hiya</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY7/Admin07/"/>
      <url>/2018/10/20/ADMIN/DAY7/Admin07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum  clean  all     #清空Yum缓存<br>[root@server0 ~]# yum  repolist      #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>######################################################<br>周期性计划任务</p><p>cron任务概述<br>• 用途:按照设置的时间间隔为用户反复执行某一项固<br>定的系统任务</p><p>• 软件包:cronie、crontabs<br>• 系统服务:crond<br>• 日志文件:/var/log/crond</p><p>crontab任务记录</p><p>– 分   时   日   月    周    任务命令行(绝对路径)</p><hr><pre><code>*:匹配范围内任意时间,:分隔多个不连续的时间点-:指定连续时间范围/n:指定时间频率,每n ...</code></pre><p>• 使用 crontab 命令<br>– 编辑:crontab -e [-u 用户名]<br>– 查看:crontab -l [-u 用户名]<br>– 清除:crontab -r [-u 用户名]</p><p>利用计划任务：<br>   每分钟记录当前的系统时间，写入到/opt/time.txt</p><p>[root@server0 ~]# date &gt;&gt; /opt/time.txt<br>[root@server0 ~]# cat /opt/time.txt</p><p>[root@server0 ~]# crontab -e -u root   #书写计划任务</p><ul><li><ul><li><ul><li><ul><li><ul><li>date &gt;&gt; /opt/time.txt</li></ul></li></ul></li></ul></li></ul></li></ul><p>[root@server0 ~]# crontab -l           #查看计划任务</p><ul><li><ul><li><ul><li><ul><li><ul><li>date &gt;&gt; /opt/time.txt</li></ul></li></ul></li></ul></li></ul></li></ul><p>[root@server0 ~]# cat /var/spool/cron/root   #任务文件</p><ul><li><ul><li><ul><li><ul><li><ul><li>date &gt;&gt; /opt/time.txt</li></ul></li></ul></li></ul></li></ul></li></ul><p>##################################################<br>附加权限</p><p>Set UID<br>• 附加在属主的 x 位上<br>– 属主的权限标识会变为 s<br>– 适用于可执行文件,Set UID可以让使用者具有文件属主的身份及部分权限<br>– 传递所有者身份</p><p>#######################################################<br>Sticky Bit<br>• 附加在其他人的 x 位上<br>– 其他人的权限标识会变为 t<br>– 适用于开放 w 权限的目录,可以阻止用户滥用 w 写入权限(禁止操作别人的文档)</p><p>[root@server0 ~]# mkdir /public<br>[root@server0 ~]# chmod ugo=rwx /public<br>[root@server0 ~]# ls -ld /public<br>drwxrwxrwx. 2 root root 6 8月   8 10:58 /public</p><p>[root@server0 ~]# chmod o+t /public/<br>[root@server0 ~]# ls -ld /public/</p><p>#####################################################<br>查找文本内容<br>• 根据字符串模式提取文本行<br>– grep [选项] ‘匹配模式’ 文本文件…<br>– 命令行 | grep [选项] ‘匹配模式’</p><p>• 常用命令选项<br>– -v,取反匹配<br>– -i,忽略大小写<br>[root@server0 /]# grep  man /etc/man_db.conf<br>[root@server0 /]# grep -i man /etc/man_db.conf</p><p>[root@server0 /]# grep  root /etc/passwd</p><p>[root@server0 /]# grep  ROOT /etc/passwd</p><p>[root@server0 /]# grep  -i  ROOT /etc/passwd</p><p>[root@server0 /]# grep  -v  root /etc/passwd</p><p>#####################################################<br>• 常用的匹配模式</p><p>– word  包含字符串word<br>– ^word 以字符串word开头<br>– word$ 以字符串word结尾<br>–  ^$       匹配空行</p><p>[root@server0 /]# grep ^root /etc/passwd</p><p>[root@server0 /]# grep bash$ /etc/passwd</p><p>[root@server0 /]# cat  /etc/default/useradd<br>[root@server0 /]# grep -v ^$ /etc/default/useradd</p><p>  显示文件有效配置信息（去除空行，去除注释）<br>[root@server0 /]# cat  /etc/login.defs<br>[root@server0 /]# grep -v ^# /etc/login.defs </p><h1 id="grep-v-etc-login-defs-grep-v"><a href="#grep-v-etc-login-defs-grep-v" class="headerlink" title="grep -v ^# /etc/login.defs  |  grep -v  ^$"></a>grep -v ^# /etc/login.defs  |  grep -v  ^$</h1><h1 id="grep-v-etc-login-defs-grep-v-gt-opt-1-txt"><a href="#grep-v-etc-login-defs-grep-v-gt-opt-1-txt" class="headerlink" title="grep -v ^# /etc/login.defs   |  grep -v ^$   &gt; /opt/1.txt"></a>grep -v ^# /etc/login.defs   |  grep -v ^$   &gt; /opt/1.txt</h1><p>###################################################<br>查找文件<br>• 根据预设的条件递归查找对应的文件路径<br>– find [目录] [条件1] [-a|-o] [条件2] …<br>    -type 类型(f 文本文件、d 目录、l 快捷方式)<br>    -name “文档名称”<br>    -size +|-文件大小(k、M、G)<br>    -user 用户名</p><p>[root@server0 /]# find /boot/ -type  d      #查找是目录</p><p>[root@server0 /]# find /boot/ -type  f      #查找是文件</p><p>[root@server0 /]# find /boot/ -type  l      #查找是快捷方式<br>[root@server0 /]# ls /boot/grub/menu.lst<br>[root@server0 /]# ls -l /boot/grub/menu.lst</p><p>[root@server0 /]# find /root -type  d</p><p>[root@server0 /]# find /etc  -type  l</p><p>#####################################################<br>  -name  “文档的名字”  </p><p>[root@server0 /]# touch /root/nsd01.txt  /root/nsd02.txt<br>[root@server0 /]# mkdir /root/nsd1807</p><p>[root@server0 /]# find /root/ -name “nsd<em>“<br>[root@server0 /]# find /root/ -name “nsd</em>“ -a -type f<br>[root@server0 /]# find /root/ -name “nsd<em>“  -type f<br>[root@server0 /]# find /root/ -name “nsd</em>“  -type d</p><p>[root@server0 /]# find /etc -name “<em>.conf”<br>[root@server0 /]# find /etc -name “</em>tab”<br>[root@server0 /]# find /boot -name “vm*”</p><p>######################################################<br> -size +与-       #单位  k  M  G</p><p> -user 用户名    #按照文档的所有者</p><p>[root@server0 /]# find /boot  -size +10M<br>[root@server0 /]# find /boot  -size -10M</p><p>[root@server0 /]# find /  -user student<br>[root@server0 /]# find /  -user student -type f<br>[root@server0 /]# find /  -user student -type d</p><p>####################################################<br>使用find命令的 -exec 操作<br>– find .. .. -exec 处理命令 {} \;<br>– 优势:以 {} 代替每一个结果,逐个处理,遇 \; 结束</p><h1 id="find-etc-name-“-tab”"><a href="#find-etc-name-“-tab”" class="headerlink" title="find  /etc/  -name  “*tab”"></a>find  /etc/  -name  “*tab”</h1><h1 id="find-etc-name-“-tab”-exec-cp-mnt"><a href="#find-etc-name-“-tab”-exec-cp-mnt" class="headerlink" title="find  /etc/  -name  “*tab”  -exec  cp  {}  /mnt  \;"></a>find  /etc/  -name  “*tab”  -exec  cp  {}  /mnt  \;</h1><h1 id="ls-mnt"><a href="#ls-mnt" class="headerlink" title="ls /mnt/"></a>ls /mnt/</h1><h1 id="find-boot-size-10M"><a href="#find-boot-size-10M" class="headerlink" title="find  /boot/ -size  +10M"></a>find  /boot/ -size  +10M</h1><h1 id="find-boot-size-10M-exec-cp-mnt"><a href="#find-boot-size-10M-exec-cp-mnt" class="headerlink" title="find  /boot/ -size  +10M  -exec  cp  {}  /mnt  \;"></a>find  /boot/ -size  +10M  -exec  cp  {}  /mnt  \;</h1><h1 id="ls-mnt-1"><a href="#ls-mnt-1" class="headerlink" title="ls /mnt/"></a>ls /mnt/</h1><p>• 使用find命令完成以下任务<br>– 找出所有用户 student 拥有的文件<br>– 把它们拷贝到 /root/findfiles/ 文件夹中</p><h1 id="mkdir-root-findfiles"><a href="#mkdir-root-findfiles" class="headerlink" title="mkdir /root/findfiles"></a>mkdir /root/findfiles</h1><h1 id="find-user-student-type-f"><a href="#find-user-student-type-f" class="headerlink" title="find  / -user student  -type f"></a>find  / -user student  -type f</h1><h1 id="find-user-student-type-f-exec-cp-root-findfiles"><a href="#find-user-student-type-f-exec-cp-root-findfiles" class="headerlink" title="find  / -user student  -type f  -exec cp {} /root/findfiles/  \;"></a>find  / -user student  -type f  -exec cp {} /root/findfiles/  \;</h1><h1 id="ls-A-root-findfiles"><a href="#ls-A-root-findfiles" class="headerlink" title="ls -A /root/findfiles/"></a>ls -A /root/findfiles/</h1><p>#######################################################</p><p>• 根据名称查找,忽略大小写<br>– -iname</p><p>• 根据所属组<br>– -group</p><p>• 限制目录查找的深度(最大层数)<br>– -maxdepth</p><p>[root@server0 /]# find /etc/ -maxdepth 1 -name “*.conf”</p><p>[root@server0 /]# find /etc/ -maxdepth 2 -name “*.conf”</p><p>[root@server0 /]# find /etc/ -maxdepth 3 -name “*.conf”</p><p>• 根据文件修改时间,所有的时间都是过去时间<br> -mtime  +10   #10天之前<br> -mtime  -10   #最近10天之内</p><p>[root@server0 /]# find /var/log/ -mtime +90<br>[root@server0 /]# find /var/log/ -mtime +1000</p><p>[root@server0 /]# find /var/log/ -mtime -10</p><p>##################################################<br>tar制作归档及压缩的包</p><p> tar  -zcf   /路径/包名称.tar.gz    /路径/源文档  ……<br> tar  -jcf   /路径/包名称.tar.bz2   /路径/源文档  ……<br> tar  -Jcf   /路径/包名称.tar.xz    /路径/源文档  ……</p><p>释放tar制作归档及压缩的包<br>  tar -xf   /路径/包名称.tar.xz   -C  /路径/</p><p>#################################################<br> 权限内容</p><p>1.看用户身份     所有者&gt;所属组&gt;其他人</p><p>2.看相应位置的权限</p><p>附加权限（有特殊的需要）<br>  SUID ：传递所有者身份<br>  SGID ：让新增的子文档，自动继承父目录所属组<br>   t权限：开放w权限的目录，防止操作非本人的文档</p><p>   基本权限        ACL访问控制列表       </p><p>  1.尽量利用基本权限解决,尽量不要修改所有者与所属组<br>  2.利用书写ACL访问控制列表  解决</p><p>###################################################<br>  Yum仓库</p><p>  服务端: 1,搭建Web服务或FTP服务  2,共享光盘所有内容</p><p>  客户端:  书写/etc/yum.repos.d/*.repo</p><pre><code>baseurl= 服务端:显示光盘内容</code></pre><p>  1./etc/yum.repos.d/*.repo  文件名  有没有错误的文件</p><p>  2.baseurl= 服务端:显示光盘内容    复制到浏览器中查看是否有光盘内容</p><p>#######################################################<br>DNS域名解析，将域名解析为IP地址</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY7/ADMIN-Study06/"/>
      <url>/2018/10/20/ADMIN/DAY7/ADMIN-Study06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.Linux中权限分类，主要分为哪几类？<br>     基本权限  附加权限   ACL策略</p><p>2.基本权限的分类？归属关系分为 那几种？<br>   r  w  x<br>     所有者   所属组   其他人</p><p>3.Linux中如何查看一个文件或目录的权限？<br>     ls -l<br>     ls -ld</p><p>4.修改权限的命令是什么？修改归属关系的命令是什么？<br>  chmod         chown</p><p>5.一位用户能否切换到一个目录里面，只和什么权限有关？<br>      执行权限    x</p><p>6.一位用户对目录具备W权限，该用户对目录进行哪些操作？<br>    对目录内容，可以删除 新建  移动  复制  改名 等</p><p>7.Linux中SGID权限用什么符号表示？出现的位置？有什么作用？<br>        s     所属组的x权限位<br>               让新增的子文档，自动继承父目录的所属组</p><p>8.ACL权限的作用？<br>   为单独 的用户设置权限</p><p>9.设置ACL权限的命令是什么？常用的选项有哪些？<br>   setfacl   -m  -x  -b  -R</p><p>10.查看ACL权限的命令？<br>    getfacl</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY6/Exec06/"/>
      <url>/2018/10/20/ADMIN/DAY6/Exec06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例练习,准备:<br>            rht-vmctl  reset  classroom<br>            rht-vmctl  reset  server<br>           rht-vmctl  reset  desktop</p><p>######################################################</p><p>案例1:指定yum软件源<br>为 server0 指定可用的 yum 软件源<br>– YUM软件库的地址为 <a href="http://classroom.example.com/content/rhel7.0/x86_64/dvd/" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/x86_64/dvd/</a><br>– 将此配置为虚拟机 server0 的默认软件仓库<br>– 确认可用的仓库列表<br>– 利用yum仓库安装xeyes</p><p>案例2：chmod权限设置<br>    1）以root用户新建/nsddir/目录，在该目录下新建文件readme.txt<br>    2）使用户zhangsan能够在/nsddir/目录下创建/删除子目录<br>    3）使用户zhangsan能够修改/nsddir/readme.txt文件的容</p><p>案例3：chown归属设置<br>    1）新建/tarena1目录<br>    a）将属主设为gelin01，属组设为tarena组<br>    b）使用户gelin01对此目录具有rwx权限，其他人对此目录无任何权限</p><pre><code>2）使用户gelin02能进入、查看/tarena1文件夹（提示：将gelin02加入所属组）3）新建/tarena2目录a）将属组设为tarenab）使tarena组的任何用户都能在此目录下创建、删除文件4）新建/tarena/public目录a）使任何用户对此目录都有rwx权限b）拒绝zhangsan进入此目录，对此目录无任何权限</code></pre><p>案例4:权限设置<br>    1、创建文件夹/data/test,设置目录的访问权限，使所有者和所属组具备读写执行的权限；其他人无任何权限。<br>    2、递归修改文件夹/data/test的归属使所有者为zhangsan，所属组为tarena。<br>    3、请实现在test目录下，新建的所有子文件或目录的所属组都会是tarena。<br>    4、为lisi创建ACL访问权限，使得lisi可以查看/etc/shadow文件</p><p>案例5：绑定到LDAP验证服务</p><p> –  使用系统 classroom.example.com 提供的LDAP服务<br> –  验证服务的基本DN是：dc=example,dc=com<br> –  账户信息和验证信息都是由 LDAP 提供的<br> –  连接要使用证书加密，证书可以在下面的链接下载：<br>      <a href="http://classroom.example.com/pub/example-ca.crt" target="_blank" rel="noopener">http://classroom.example.com/pub/example-ca.crt</a><br> –  确认本地可以识别ldapuser0用户</p><p>案例6：访问NFS共享<br> –  查看classroom.example.com的NFS共享<br> –  将classroom.example.com的NFS共享目录，挂载到本地/home/guests</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY6/Admin06/"/>
      <url>/2018/10/20/ADMIN/DAY6/Admin06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、真机上，还原三台虚拟机环境<br>[root@room9pc01 ~]# rht-vmctl  reset classroom<br>[root@room9pc01 ~]# rht-vmctl  reset server<br>[root@room9pc01 ~]# rht-vmctl  reset desktop</p><p>[root@room9pc01 ~]# gos          #远程管理</p><p>[root@server0 ~]# yum clean all     #清空Yum缓存<br>[root@server0 ~]# yum repolist      #显示Yum仓库信息</p><p>源标识        源名称                            状态<br>rhel_dvd      Remote classroom copy of dvd      4,305<br>repolist: 4,305</p><p>######################################################<br>基本权限的类别<br>• 访问方式(权限)<br>– 读取:允许查看内容-read   r<br>– 写入:允许修改内容-write  w<br>– 可执行:允许运行和切换-execute   x</p><p>   对于文本文件<br>        r：cat  less  head  tail<br>        w：vim   &gt;   &gt;&gt;<br>        x：Shell脚本  可以运行</p><p>• 权限适用对象(归属)<br>  – 所有者:拥有此文件/目录的用户-user   u<br>  – 所属组:拥有此文件/目录的组-group     g<br>  – 其他用户:除所有者、所属组以外的用户-other   o</p><p>###################################################</p><p>查看权限<br>• 使用 ls -l 命令<br>– ls -ld 文件或目录…</p><pre><code>开头 d 为目录开头 - 为文本文件开头l 为快捷方式</code></pre><p>[root@server0 /]# ls -ld /etc/</p><p>[root@server0 /]# ls -l /etc/passwd</p><p>[root@server0 /]# ls -ld /root/</p><p>[root@server0 /]# ls -ld /tmp</p><p>[root@server0 /]# ls -ld /home/student</p><p>[root@server0 /]# ls -ld /</p><p>[root@server0 /]# ls -l /etc/shadow</p><p>#####################################################<br>设置基本权限<br>• 使用 chmod 命令<br>– chmod [-R] 归属关系+-=权限类别   文档…</p><pre><code>[-R]:递归设置</code></pre><p>[root@server0 /]# mkdir /nsd01<br>[root@server0 /]# ls -ld /nsd01</p><p>[root@server0 /]# chmod u-w /nsd01<br>[root@server0 /]# ls -ld /nsd01</p><p>[root@server0 /]# chmod u+w /nsd01<br>[root@server0 /]# ls -ld /nsd01</p><p>[root@server0 /]# chmod o=— /nsd01<br>[root@server0 /]# ls -ld /nsd01</p><p>[root@server0 /]# chmod ugo=rwx /nsd01<br>[root@server0 /]# ls -ld /nsd01</p><p>[root@server0 /]# chmod o-w /nsd01<br>[root@server0 /]# ls -ld /nsd01</p><p>[root@server0 /]# chmod u=rwx,g=rx,o=— /nsd01<br>[root@server0 /]# ls -ld /nsd01</p><p>[root@server0 /]# mkdir -p /opt/aa/bb/cc/dd<br>[root@server0 /]# chmod -R o=— /opt/aa<br>[root@server0 /]# ls -ld /opt/aa</p><p>###################################################</p><p>Linux中如何判断用户权限：<br>   1.判断用户的角色                 顺序：所有者&gt;所属组&gt;其他人   匹配及停止</p><p>   2.查看相应权限位置的权限设置</p><p>###################################################<br> Permission denied : 权限不足<br> command not found： 命令没有找到</p><p>目录的 r 权限:能够 ls 浏览此目录内容<br>目录的 w 权限:能够执行 rm/mv/cp/mkdir/touch/ 等更改目录内容的操作<br>目录的 x 权限:能够 cd 切换到此目录</p><p>以root用户新建/nsddir/目录，在此目录下新建readme.txt文件，并进一步完成下列操作<br> 1）使用户lisi能够在此目录下创建子目录   切换用户  su  -  lisi<br>     chmod o+w  /nsddir/</p><p> 2）使用户lisi不能够在此目录下创建子目录<br>     chmod o-w  /nsddir/</p><p> 3）使用户lisi能够修改readme.txt文件<br>     chmod o+w  /nsddir/readme.txt</p><p> 4）调整此目录的权限，使所有用户都不能cd进入此目录<br>     chmod u-x,g-x,o-x  /nsddir/</p><p> 5）为此目录及其下所有文档设置权限 rwxr-x—<br>     chmod -R  u=rwx,g=rx,o=—  /nsddir/</p><p>########################################################<br>设置文档归属<br>• 使用 chown 命令<br>– chown [-R] 属主 文档…<br>– chown [-R] :属组 文档…<br>– chown [-R] 属主:属组 文档…</p><pre><code>[-R]:递归设置</code></pre><p>[root@server0 /]# mkdir /nsd03<br>[root@server0 /]# ls -ld /nsd03</p><p>[root@server0 /]# groupadd tarena<br>[root@server0 /]# chown lisi:tarena /nsd03<br>[root@server0 /]# ls -ld /nsd03</p><p>[root@server0 /]# chown student /nsd03<br>[root@server0 /]# ls -ld /nsd03</p><p>[root@server0 /]# chown :lisi  /nsd03<br>[root@server0 /]# ls -ld /nsd03</p><p>#######################################################<br> 附加权限(特殊权限)</p><p>Set GID<br>• 附加在属组的 x 位上<br>– 属组的权限标识会变为 s<br>– 适用于目录,Set GID可以使目录下新增的文档自动设<br>置与父目录相同的属组<br>– 让新增的子文档，自动继承父目录的所属组<br>[root@server0 /]# mkdir /msd06<br>[root@server0 /]# chown :tarena /nsd06   #修改所属组<br>[root@server0 /]# ls -ld /nsd06</p><p>[root@server0 /]# mkdir /nsd06/test01<br>[root@server0 /]# ls -ld /nsd06/test01</p><p>[root@server0 /]# chmod g+s /nsd06      #赋予Set GID权限<br>[root@server0 /]# ls -ld /nsd06</p><p>[root@server0 /]# mkdir /nsd06/test02<br>[root@server0 /]# ls -ld /nsd06/test02</p><p>[root@server0 /]# touch /nsd06/1.txt<br>[root@server0 /]# ls -l /nsd06/1.txt</p><p>####################################################<br>acl策略的作用<br>• 文档归属的局限性<br>– 任何人只属于三种角色:属主、属组、其他人<br>– 无法实现更精细的控制</p><p>• acl访问策略<br>– 能够对个别用户、个别组设置独立的权限<br>– 大多数挂载的EXT3/4、XFS文件系统默认已支持</p><p>设置acl访问控制策略<br>• 使用 getfacl、setfacl 命令<br>– getfacl 文档…<br>– setfacl [-R] -m u:用户名:权限类别 文档…<br>– setfacl [-R] -m g:组名:权限类别 文档…</p><p>– setfacl [-R] -x u:用户名   文档..     #清除指定的ACL策略<br>– setfacl [-R] -b 文档…       #清空所有ACL策略</p><p>[root@server0 /]# mkdir /nsd07<br>[root@server0 /]# chmod o=— /nsd07<br>[root@server0 /]# ls -ld /nsd07<br>[root@server0 /]# su - lisi</p><p>[lisi@server0 ~]$ cd /nsd07<br>-bash: cd: /nsd07: Permission denied<br>[lisi@server0 ~]$ exit</p><p>[root@server0 /]# setfacl -m u:lisi:rx /nsd07    #设置ACL<br>[root@server0 /]# getfacl /nsd07              #查看ACL权限<br>[root@server0 /]# su - lisi</p><p>[lisi@server0 ~]$ cd /nsd07<br>[lisi@server0 nsd07]$ pwd<br>[lisi@server0 nsd07]$ exit<br>[root@server0 /]# </p><p>####################################################<br>[root@server0 /]# mkdir /nsd08<br>[root@server0 /]# chmod ugo=rwx /nsd08<br>[root@server0 /]# ls -ld /nsd08</p><p>[root@server0 /]# setfacl -m u:tom:— /nsd08<br>[root@server0 /]# getfacl /nsd08</p><p>##################################################</p><p>[root@server0 /]# mkdir /nsd09<br>[root@server0 /]# setfacl -m u:lisi:rwx  /nsd09<br>[root@server0 /]# setfacl -m u:zhangsan:rx  /nsd09<br>[root@server0 /]# setfacl -m u:dc:rwx  /nsd09</p><p>[root@server0 /]# getfacl /nsd09</p><p>[root@server0 /]# setfacl -x u:lisi  /nsd09  #删除指定ACL<br>[root@server0 /]# getfacl /nsd09<br>[root@server0 /]# setfacl -b  /nsd09         #删除所有ACL</p><p>[root@server0 /]# getfacl /nsd09</p><p>####################################################<br>使用LDAP认证</p><pre><code>实现网络用户：用户集中管理，用户由LDAP服务器创建      本地用户：本地机器创建，只能用于本地登陆</code></pre><p>– 网络用户:用户名、密码信息存储在 LDAP 服务端</p><p>  LDAP服务器：虚拟机classroom.example.com</p><pre><code>客户端：虚拟机Server0.example.com1.安装软件包sssd,专用于与LDAP服务端沟通的软件</code></pre><p>  [root@server0 /]# yum  -y  install  sssd<br>  [root@server0 /]# rpm -q sssd<br>  sssd-1.11.2-65.el7.x86_64</p><pre><code>2.图形的工具authconfig-gtk ,设置sssd，指定LDAP服务端位置</code></pre><p>  [root@server0 /]# yum  -y  install  authconfig-gtk<br>  [root@server0 /]# exit<br>      登出<br>   Connection to 172.25.0.11 closed.<br>  [root@room9pc01 ~]# ssh -X <a href="mailto:root@172.25.0.11" target="_blank" rel="noopener">root@172.25.0.11</a></p><p>  [root@server0 ~]# authconfig-gtk<br>    选择LDAP<br>     dc=example,dc=com             #指定服务端域名<br>     classroom.example.com         #指定服务端主机名</p><p>   勾选TLS加密<br>   使用证书加密:<br>    <a href="http://classroom.example.com/pub/example-ca.crt" target="_blank" rel="noopener">http://classroom.example.com/pub/example-ca.crt</a></p><pre><code>选择LDAP密码3.重起sssd</code></pre><p>  [root@server0 ~]# systemctl restart sssd<br>  [root@server0 ~]# systemctl enable sssd</p><pre><code>4.验证：</code></pre><p>  [root@server0 ~]# grep ldapuser0 /etc/passwd   #非本地用户<br>  [root@server0 ~]# id ldapuser0          #检测ldap服务器用户<br>  [root@server0 ~]# authconfig-gtk<br>    选择LDAP<br>     dc=example,dc=com             #指定服务端域名<br>     classroom.example.com         #指定服务端主机名</p><p>   勾选TLS加密<br>   使用证书加密:<br>    <a href="http://classroom.example.com/pub/example-ca.crt" target="_blank" rel="noopener">http://classroom.example.com/pub/example-ca.crt</a></p><pre><code>选择LDAP密码</code></pre><p>#####################################################<br>家目录漫游</p><p>什么是NFS共享<br>• Network File System,网络文件系统<br>– 由NFS服务器将指定的文件夹共享给客户机<br>– 客户机将此共享目录 mount 到本地目录,访问此共享<br>资源就像访问本地目录一样方便<br>– 类似于 EXT4、XFS等类型,只不过资源在网上</p><p>  NFS共享服务器：虚拟机classroom.example.com</p><pre><code>客户端：虚拟机Server0访问共享1.查看服务端有哪些共享？</code></pre><p>  [root@server0 ~]# showmount  -e  classroom.example.com<br>  Export list for classroom.example.com:<br>  /home/guests 172.25.0.0/255.255.0.0</p><pre><code>2.访问共享</code></pre><p>[root@server0 ~]# umount /nsd<br>[root@server0 ~]# mkdir /home/guests</p><h1 id="mount-classroom-example-com-home-guests-home-guests"><a href="#mount-classroom-example-com-home-guests-home-guests" class="headerlink" title="mount classroom.example.com:/home/guests/   /home/guests/"></a>mount classroom.example.com:/home/guests/   /home/guests/</h1><p>[root@server0 ~]# ls /home/guests/</p><p>######################################################<br>修改用户家目录<br>[root@server0 /]# useradd harry</p><p>[root@server0 /]# usermod -d /abc  harry<br>[root@server0 /]# grep harry /etc/passwd<br>[root@server0 /]# su - harry</p><p>[root@server0 /]# cp -r /home/harry/  /abc<br>[root@server0 /]# ls -ld /abc/<br>[root@server0 /]# ls -lA /abc/</p><p>[root@server0 /]# chown -R harry:harry /abc<br>[root@server0 /]# ls -ld /abc<br>[root@server0 /]# ls -lA /abc<br>[root@server0 /]# su - harry</p><p>######################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY6/ADMIN-Study05/"/>
      <url>/2018/10/20/ADMIN/DAY6/ADMIN-Study05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.创建用户的命令是什么？常用的选项都有那些？<br>     useradd   -u   -d   -s   -G</p><p>2.非交互式lisi设置密码为123  请写出该命令<br>       echo 123 | passwd –stdin  lisi</p><p>3.请写出 存放用户基本信息的配置文件<br>      /etc/passwd</p><p>4.请写出 禁止用户登录系统的解释器程序<br>      /sbin/nologin</p><p>5.将harry用户加入tedu组，请写出该命令<br>    gpasswd -a  harry  tedu</p><p>6.请写出 组账号基本信息配置文件<br>      /etc/group</p><p>7.将/usr/local进行归档及压缩为/root/file.tar.gz  请写出该命令<br>    tar -zcf /root/file.tar.gz   /usr/local</p><p>8.将/root/file.tar.gz进行解压缩到/opt目录下  请写出该命令<br>   tar -xf /root/file.tar.gz  -C  /opt</p><p>9.yum客户端配置文件放在什么路径下？具体都有哪些字段？<br>       /etc/yum.repos.d/*.repo<br>       []、name、baseurl、enabled、gpgcheck</p><p>10.请写出 重启chronyd的命令<br>    systemctl  restart  chronyd</p><p>11.请写出 设置chronyd为开机自启的命令<br>    systemctl  enable  chronyd</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY5/Exec05/"/>
      <url>/2018/10/20/ADMIN/DAY5/Exec05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例练习,准备:<br>            rht-vmctl  reset  classroom<br>            rht-vmctl  reset  server<br>            rht-vmctl  reset  desktop</p><p>######################################################</p><p>案例1:为虚拟机 server 手工配置静态地址参数<br>– 主机名:server0.example.com<br>– IP地址:172.25.0.120<br>– 子网掩码:255.255.255.0<br>– 默认网关:172.25.0.254<br>– DNS服务器:172.25.254.254</p><p>案例2:指定yum软件源<br>为 server0 指定可用的 yum 软件源<br>– YUM软件库的地址为 <a href="http://classroom.example.com/content/rhel7.0/x86_64/dvd" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/x86_64/dvd</a><br>– 将此配置为虚拟机 server0 的默认软件仓库<br>– 确认可用的仓库列表<br>– 利用yum仓库安装system-config-kickstart </p><p>案例3:tar制作/释放归档压缩包（zcf、ztf、zxf、jcf、jtf、jxf、cf、tf）<br>  首先创建/root/boothome/与/root/usrsbin/目录<br>    1）备份/boot、/home这两个文件夹，保存为boothome.tar.gz文件<br>    2）查看boothome.tar.gz文件内包含哪些内容<br>    3）将boothome.tar.gz释放到文件夹/root/boothome/下<br>    4）备份/usr/sbin目录，保存为usrsbin.tar.bz2文件<br>    5）查看usrsbin.tar.bz2文件内包含哪些内容<br>    6）将usrsbin.tar.bz2释放到/root/usrsbin/文件夹下</p><p>案例4：添加并测试用户账号<br>    1）创建一个名为stu01的用户账号<br>    2）检查/etc/passwd、/etc/shadow文件的最后一行<br>    3）检查/home/新增加的宿主目录（家目录）<br>    4）为用户stu01设置一个密码（123456）</p><p>案例5：添加账号时设置不同属性<br>    1）新建用户nsd01，宿主目录位于/opt/nsd01<br>    2）新建系统账号sys01，将UID设为1234，登录Shell设为/sbin/nologin<br>    3）为用户sys01设置密码，并测试是否能够登录<br>    4）新建用户admin，附加组设为adm、root</p><p>案例6：passwd设置密码<br>    1）给用户nsd01设置密码123456<br>    2）采用–stdin方式将用户nsd01的密码设为654321</p><p>案例7：usermod修改用户<br>    1）新建一个用户nsd03，将宿主目录设为/opt/home03，并设置密码<br>    2）设置nsd03密码为redhat<br>    3）将用户nsd03的宿主目录改为/home/nsd03<br>    4）将用户sys01的登录Shell改为/bin/bash</p><p>案例8：组账号基本管理<br>    1）新建组账号stugrp<br>    2）为stugrp组添加三个成员用户（user01、root、zhangsan）<br>    3）从stugrp组删除一个成员（user01）</p><p>案例9：配置NTP网络时间客户端<br>    配置虚拟机 server0，自动校对系统时间<br>    NTP服务器位于 classroom.example.com<br>    此客户机的时间与NTP服务器的时间保持同步</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY5/Admin05/"/>
      <url>/2018/10/20/ADMIN/DAY5/Admin05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、设置永久的DNS服务器，域名解析 ： 将域名解析为IP地址<br>       指定DNS服务器配置文件</p><p>[root@server0 ~]# vim  /etc/resolv.conf<br> nameserver 172.25.254.254</p><p>[root@server0 ~]# nslookup  域名</p><p>[root@server0 ~]# nslookup classroom.example.com<br>[root@server0 ~]# nslookup server0.example.com<br>[root@server0 ~]# nslookup desktop0.example.com</p><p>######################################################</p><p>二、重定向输出:将前面命令的输出结果,写入到文本文件中</p><pre><code>&gt;:覆盖重定向&gt;&gt;:追加重定向</code></pre><p>[root@server0 ~]# ls –help<br>[root@server0 ~]# ls –help  &gt;  /opt/ls.txt<br>[root@server0 ~]# vim /opt/ls.txt</p><p>[root@server0 ~]# hostname<br>[root@server0 ~]# hostname &gt; /opt/ls.txt<br>[root@server0 ~]# cat /opt/ls.txt<br>[root@server0 ~]# hostname &gt;&gt; /opt/ls.txt<br>[root@server0 ~]# cat /opt/ls.txt</p><p>[root@server0 ~]# ifconfig  &gt;&gt; /opt/ls.txt<br>[root@server0 ~]# vim  /opt/ls.txt<br>[root@server0 ~]# less  /opt/ls.txt</p><p>[root@server0 ~]# echo 123456 &gt; /opt/ls.txt<br>[root@server0 ~]# cat /opt/ls.txt</p><p>[root@server0 ~]# echo hello &gt;&gt; /opt/ls.txt<br>[root@server0 ~]# cat /opt/ls.txt</p><h1 id="echo-nameserver-172-25-254-254-gt-etc-resolv-conf"><a href="#echo-nameserver-172-25-254-254-gt-etc-resolv-conf" class="headerlink" title="echo nameserver 172.25.254.254  &gt;  /etc/resolv.conf"></a>echo nameserver 172.25.254.254  &gt;  /etc/resolv.conf</h1><h1 id="cat-etc-resolv-conf"><a href="#cat-etc-resolv-conf" class="headerlink" title="cat /etc/resolv.conf"></a>cat /etc/resolv.conf</h1><p>[root@server0 ~]# echo  A.tedu.cn  &gt;  /etc/hostname<br>[root@server0 ~]# cat  /etc/hostname</p><p>[root@server0 ~]# exit</p><p>[root@room9pc01 ~]# gos<br>[root@A ~]# </p><p>#####################################################<br> 管道操作：将前面命令的输出结果，交由后面命令再处理一次</p><p>  显示文件内容/etc/passwd的8-12行？</p><p>[root@A ~]# head -12 /etc/passwd   |   tail -5 </p><p>[root@A ~]# cat -n /etc/passwd  |  head -12  |  tail -5</p><p>[root@A ~]# ifconfig  |  less</p><p>[root@A ~]# ifconfig  |  head  -2   #查看第一张网卡IP地址</p><p>#################################################</p><p>管理用户和组</p><p> 用户帐号：1.能够登陆操作系统  2.不同的用户不同的身份，可以进行很好控制</p><p>  组 ： 方便管理用户 ，权限分配方面。<br>          将想要具备相同权限的用户，加入一个组，最后给组设置权限</p><p>  组的分类：基本组        附加组（从属组）<br>   一个用户必须至少属于一个组</p><p>  UID:唯一标识一个用户，编号<br>  GID:唯一标识一个组，编号</p><pre><code>管理员root的UID：永远为0</code></pre><p>  RHEL7普通用户的UID：默认从1000起始<br>    系统程序用户UID范围：1-999</p><p>###################################################<br>添加用户<br>所有用户的基本信息存放在 /etc/passwd 文件<br>每一个用户占用，一行信息<br> [root@A ~]# head -1 /etc/passwd<br> root:x:0:0:root:/root:/bin/bash<br> 用户名:密码占位符:UID:基本组的GID:用户的描述信息:用户的家目录:解释器</p><p>• 使用 useradd 命令<br>– useradd [选项]… 用户名</p><p>• 常用命令选项<br> -u 用户id、-d 家目录路径、-G 附加组、-s 登录Shell(登陆解释器程序)</p><p>[root@A ~]# useradd nsd01<br>[root@A ~]# id nsd01<br>uid=1002(nsd01) gid=1002(nsd01) 组=1002(nsd01)<br>[root@A ~]# useradd nsd02<br>[root@A ~]# id nsd02<br>[root@A ~]# useradd nsd03<br>[root@A ~]# id nsd03</p><p>[root@A ~]# useradd  -u 1500 nsd04    #指定用户的UID创建用户<br>[root@A ~]# id nsd04<br>uid=1500(nsd04) gid=1500(nsd04) 组=1500(nsd04)</p><p>[root@A ~]# useradd -d /mnt/nsd07  nsd07   #指定家目录创建用户<br>[root@A ~]# id nsd07</p><p>[root@A ~]# grep nsd07 /etc/passwd<br>nsd07:x:1502:1502::/mnt/nsd07:/bin/bash<br>用户名:密码占位符:UID:基本组的GID:用户的描述信息:用户的家目录:解释器<br>[root@A ~]# ls /mnt/</p><p>[root@A ~]# groupadd  tarena          #创建组<br>[root@A ~]# useradd -G tarena nsd08   #创建用户指定加入附加组<br>[root@A ~]# id nsd08</p><p> /sbin/nologin:禁止用户登录系统</p><p>[root@A ~]# useradd -s /sbin/nologin nsd09<br>[root@A ~]# grep nsd09 /etc/passwd</p><p>[root@A ~]# useradd -s /sbin/nologin nsd10<br>[root@A ~]# grep nsd10 /etc/passwd</p><p>#####################################################</p><p>设置登录密码</p><p>• 使用 passwd 命令<br>– passwd [用户名]</p><p>[root@A ~]# passwd nsd01<br>更改用户 nsd01 的密码 。<br>新的 密码：                          #输入新密码<br>无效的密码： 密码少于 8 个字符<br>重新输入新的 密码：             #重新输入新密码<br>passwd：所有的身份验证令牌已经成功更新。</p><p>[root@A ~]# su - nsd01    # 临时切换用户身份： su  -  用户名<br>[nsd01@A ~]$ passwd<br>Changing password for user nsd01.<br>Changing password for nsd01.<br>(current) UNIX password:        #输入旧密码<br>New password:             #输入新密码，符合复性要求<br>Retype new password:      #重新输入新密码，符合复性要求<br>passwd: all authentication tokens updated successfully.</p><p>[nsd01@A ~]$ exit     #退出回到root</p><p>#####################################################</p><p>非交互式设置密码<br>[root@A ~]# echo 123456 | passwd –stdin nsd01</p><p>[root@A ~]# echo 123456 | passwd –stdin nsd02</p><p>###################################################<br>用户密码信息存放在 /etc/shadow 文件</p><p>  用户名：密码加密字符串：上一次修改密码的时间…….</p><p>####################################################<br>修改用户属性<br>• 使用 usermod 命令<br>– usermod [选项]… 用户名</p><p>• 常用命令选项<br>– -u 用户id、-d 家目录路径、-s 登录Shell<br>– -G 附加组</p><p>[root@A ~]# useradd nsd12<br>[root@A ~]# grep nsd12 /etc/passwd</p><p>[root@A ~]# usermod -u 1510 -d /opt/nsd12      -G tarena  -s /sbin/nologin  nsd12</p><p>[root@A ~]# grep nsd12 /etc/passwd</p><p>[root@A ~]# id nsd12</p><p>  可以通过vim修改/etc/passwd文件内容，达到修改用户属性</p><p>#######################################################<br>删除用户<br>• 使用 userdel      命令<br>– userdel  [-r]   用户名      #连同家目录一并删除</p><p>[root@A ~]# userdel nsd01<br>[root@A ~]# id nsd01</p><p>######################################################<br>管理组账号</p><p>添加组<br>组基本信息存放在 /etc/group 文件<br>[root@A ~]# grep stugrp /etc/group<br> stugrp:x:1702:</p><p>  组名：组的密码占位符：组的GID标识：组的成员列表</p><p>• 使用 groupadd 命令<br>– groupadd [-g 组ID] 组名</p><p>[root@A ~]# groupadd  stugrp</p><p>[root@A ~]# useradd  harry<br>[root@A ~]# useradd  natasha<br>[root@A ~]# useradd  kenji<br>[root@A ~]# useradd  jack</p><p>####################################################</p><p>• 使用 gpasswd 命令<br>– gpasswd -a 用户名 组名<br>– gpasswd -d 用户名 组名</p><p>[root@A ~]# grep stugrp /etc/group</p><p>[root@A ~]# gpasswd -a harry stugrp     #将用户加入组<br>[root@A ~]# grep stugrp /etc/group</p><p>[root@A ~]# gpasswd -a natasha stugrp<br>[root@A ~]# grep stugrp /etc/group</p><p>[root@A ~]# gpasswd -d natasha stugrp   #将用户从组中删除<br>[root@A ~]# grep stugrp /etc/group</p><p>[root@A ~]# gpasswd -a kenji stugrp<br>[root@A ~]# grep stugrp /etc/group</p><p>[root@A ~]# gpasswd -a jack stugrp<br>[root@A ~]# grep stugrp /etc/group</p><p>删除组<br>• 使用 groupdel 命令<br>– groupdel 组名</p><p>[root@A ~]# groupdel stugrp</p><p>#####################################################<br>tar备份与恢复(归档及压缩)</p><p> Linux常见的压缩格式及命令工具:<br>    gzip —&gt; .gz<br>    bzip2 —&gt; .bz2<br>    xz —&gt; .xz </p><p>制作tar包:</p><p> tar  选项       /路径/归档及压缩包的名字      /路径/源文档 …….</p><p>释放tar包:</p><p> tar  选项    /路径/归档及压缩包的名字   -C  /路径/</p><p>– -C（大写）:指定释放的位置</p><p>– -c:创建归档<br>– -x:释放归档<br>– -f:指定归档文件名称,必须放在所有选项的最后<br>– -z、-j、-J:调用 .gz、.bz2、.xz 格式的工具进行处理</p><p>– -t:显示归档中的文件清单</p><p>红色：压缩包</p><p>[root@A ~]# tar -zcf /opt/test01.tar.gz /home/ /etc/passwd<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# tar -jcf /opt/abc.tar.bz2 /home/ /etc/passwd<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# tar -Jcf /opt/nsd.tar.xz /home/ /etc/passwd<br>[root@A ~]# ls /opt/</p><p>使用 tar 工具完成以下备份任务:<br>– 创建一个名为 /root/backup.tar.bz2 的归档文件<br>– 其中包含 /usr/local 目录中的内容<br>– tar 归档必须使用 bzip2 进行压缩</p><p>[root@A ~]# tar -jcf /root/backup.tar.bz2 /usr/local/<br>[root@A ~]# ls /root/</p><p>######################################################<br>释放<br>[root@A ~]# rm -rf /mnt/*<br>[root@A ~]# ls /mnt/<br>[root@A ~]# tar  -xf  /root/backup.tar.bz2  -C  /mnt/<br>[root@A ~]# ls /mnt/<br>[root@A ~]# ls /mnt/usr/<br>[root@A ~]# ls /mnt/usr/local/</p><p>查看tar包内容<br>[root@A ~]# tar -tf /root/backup.tar.bz2</p><p>######################################################<br>NTP时间同步</p><p>补充命令： date<br>修改时间：date  -s  “年-月-日    时：分：秒”</p><p>[root@A ~]# date<br>[root@A ~]# date -s “2008-10-1  12:10”<br>[root@A ~]# date</p><p>#################################################<br>时间同步</p><p>• Network Time Protocol<br>– NTP服务器为客户机提供标准时间<br>– NTP客户机需要与NTP服务器保持沟通</p><p> NTP服务器:虚拟机classroom.example.com</p><p> NTP客户机：虚拟机Server0.example.com<br>  1.安装一个和NTP服务器沟通的软件<br>  [root@A ~]# rpm -q chrony<br>  chrony-1.29.1-1.el7.x86_64</p><p>  2.指定NTP服务器，修改配置文件/etc/chrony.conf<br>  [root@A ~]# vim /etc/chrony.conf<br>    在Linux系统中大多数配置文件中，以#开头的行为注释内容</p><pre><code>#server 0.rhel.pool.ntp.org iburst#server 1.rhel.pool.ntp.org iburst#server 2.rhel.pool.ntp.org iburstserver classroom.example.com iburst</code></pre><p>   3.重起刷新<br>   [root@A ~]# systemctl restart chronyd<br>   [root@A ~]# systemctl enable chronyd    #设置开机自启动</p><p>   daemon:超级守护程序；守护神;（希腊神话中）半人半神的精灵;</p><pre><code>4.验证</code></pre><p>   [root@A ~]# date</p><p>   [root@A ~]# date -s “2008-10-1  8:0”<br>   [root@A ~]# systemctl restart chronyd<br>   [root@A ~]# date<br>   [root@A ~]# date<br>   [root@A ~]# date</p><p>######################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY4/Exec04/"/>
      <url>/2018/10/20/ADMIN/DAY4/Exec04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例练习,准备:<br>            rht-vmctl  reset  classroom<br>            rht-vmctl  reset  server<br>           rht-vmctl  reset  desktop</p><p>######################################################</p><p>案例1:为虚拟机 server 手工配置静态地址参数<br>– 主机名:server0.example.com<br>– IP地址:172.25.0.150<br>– 子网掩码:255.255.255.0<br>– 默认网关:172.25.0.254</p><p>案例2：真机上操作：永久别名与vim的使用</p><ol><li>定义一个永久别名（修改/root/.bashrc文件)，执行c可以实现还原虚拟机classroom</li><li>定义一个永久别名（修改/root/.bashrc文件)，执行s可以实现还原虚拟机server</li><li>定义一个永久别名（修改/root/.bashrc文件)，执行d可以实现还原虚拟机Desktop</li><li>定义一个永久别名（修改/root/.bashrc文件)，执行gos可以远程管理server</li><li>定义一个永久别名（修改/root/.bashrc文件)，执行god可以远程管理desktop</li></ol><p>案例3：虚拟机Server上操作：复制、删除、移动及vim文本编辑器</p><ol><li>在目录/mnt下创建一个子目录public </li><li>在目录/mnt/public 创建文件linux.txt,利用vim写入内容 Study Linux</li><li>将/mnt/public/linux.txt文件复制到/root目录下，同时 改名为 study.txt</li><li>利用vim 修改文件/etc/hostname将其原有内容全部删除，写入新的内容为<a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a></li><li>将/etc/passwd 、/etc/resolv.conf、/etc/hostname 同时拷贝到/mnt/public/目录下</li><li>将文件 /mnt/public/hostname 重改名为 stu.txt </li><li>创建目录结构/mnt/public/test/vm</li><li>将目录 /boot内容中以 vm 开头的 复制到/mnt/public/test/vm目录下 </li><li>将/home目录复制到/mnt/public/test/目录下 </li></ol><p>案例4：虚拟机Server上操作：ls与cat、head</p><ol><li>显示根目录下所有内容</li><li>显示/etc目录下所有已tab结尾的文件</li><li>显示/etc/resolv.conf文件的详细属性并加上易读的单位</li><li>显示/etc/sysconfig/network-scripts/ifcfg-eth0文件的详细属性并加上易读的单位</li><li>显示/etc/sysconfig/network-scripts/ifcfg-eth0文件的头4行内容</li></ol><p>案例4：虚拟机Server上操作：搭建Yum仓库</p><p>为 server0 指定可用的 yum 软件源<br>– YUM软件库的地址为 <a href="http://classroom.example.com/content/rhel7.0/x86_64/dvd/" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/x86_64/dvd/</a><br>– 将此配置为虚拟机 server0 的默认软件仓库<br>– 确认可用的仓库列表<br>– 利用yum仓库安装sssd软件<br>– 利用yum仓库安装xeyes软件</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY4/Admin04/"/>
      <url>/2018/10/20/ADMIN/DAY4/Admin04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>教学环境介绍</p><p>• 每个学员机上有三台预先配置好的虚拟机<br>  – server —— 作为练习用服务器<br>  – desktop —— 作为练习用客户机<br>  – classroom —— 提供网关/DNS/软件素材等资源       </p><p>一、 优先classroom开启系统<br>二、 还原操作,优先classroom虚拟机</p><p>[root@room9pc01 ~]# rht-vmctl reset classroom<br>[root@room9pc01 ~]# rht-vmctl reset server<br>[root@room9pc01 ~]# rht-vmctl reset desktop</p><p>三、虚拟机Server与虚拟机Desktop<br>      用户：root<br>      密码：redhat</p><p>虚拟机Server<br>       操作系统版本：RHEL7.0<br>       主机名：server0.example.com<br>       网卡eth0的IP地址：172.25.0.11/24</p><p>虚拟机Desktop<br>       操作系统版本：RHEL7.0<br>       主机名：desktop0.example.com<br>       网卡eth0的IP地址：172.25.0.10/24</p><p>默认两台虚拟机可以进行ping通信</p><p>四、利用真机，进行远程管理</p><p>1.利用真机进行ping测试<br>[root@room9pc01 ~]# ping 172.25.0.11<br>[root@room9pc01 ~]# ping 172.25.0.10</p><p>2.在真机上，可以利用ssh进行远程管理<br>[root@room9pc01 ~]# ssh    用户名@对方的IP地址<br>[root@room9pc01 ~]# ssh   <a href="mailto:root@172.25.0.11" target="_blank" rel="noopener">root@172.25.0.11</a><br>Last login: Fri Aug  3 09:22:26 2018<br>[root@server0 ~]# hostname<br>server0.example.com<br>[root@server0 ~]# ifconfig<br>[root@server0 ~]# exit        #退出到真机</p><p>   补充快捷键：  Ctrl+shift+t  新开一个终端</p><p>  -X(大写) :运程管理时，在本机运行对方的图形程序</p><p>[root@server0 ~]# exit</p><p>[root@room9pc01 ~]# ssh -X <a href="mailto:root@172.25.0.11" target="_blank" rel="noopener">root@172.25.0.11</a></p><p>[root@server0 ~]# firewall-config   #运行防火墙图形程序</p><p>[root@server0 ~]# firefox           #运行图形浏览器</p><p>####################################################<br>辅助操作：方便远程管理<br>真机操作：设置永久别名的配置文件<br>[root@room9pc01 ~]# vim  /root/.bashrc   系统级配置文件</p><h1 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a>.bashrc</h1><p> alias   gos=’ssh  -X  <a href="mailto:root@172.25.0.11" target="_blank" rel="noopener">root@172.25.0.11</a>‘<br> alias   god=’ssh  -X  <a href="mailto:root@172.25.0.10" target="_blank" rel="noopener">root@172.25.0.10</a>‘</p><p> /root/.bashrc :新开一个终端生效</p><p>##################################################<br>软件包管理</p><p>一、具备软件包<br>[root@server0 ~]# poweroff </p><p>[root@room9pc01 ~]# gos</p><p>[root@server0 ~]# mkdir /dvd</p><p>[root@server0 ~]# mount  /dev/cdrom  /dvd<br>[root@server0 ~]# ls  /dvd</p><p>#######################################################<br>零散的软件管理<br>• RPM Package Manager,RPM包管理器<br>– rpm -q 软件名…<br>– rpm -ivh 软件名-版本信息.rpm…<br>– rpm -e 软件名…</p><p>Linux安装软件包：<br>    默认情况下不允许选择安装位置，不允许选择安装功能</p><p>[root@server0 ~]# rpm -q vsftpd    #查询软件包是否安装<br>未安装软件包 vsftpd<br>[root@server0 ~]# rpm -q firefox</p><p>[root@server0 ~]# rpm -q  vsftpd      #查询是否安装成功<br>[root@server0 ~]# rpm -ql vsftpd      #查询软件包安装清单</p><p>[root@server0 ~]# rpm -e  vsftpd      #卸载软件<br>[root@server0 ~]# rpm -q  vsftpd      #查询软件包是否卸载成功</p><p>补充：导入红帽签名信息</p><h1 id="rpm-–import-dvd-RPM-GPG-KEY-redhat-release"><a href="#rpm-–import-dvd-RPM-GPG-KEY-redhat-release" class="headerlink" title="rpm –import /dvd/RPM-GPG-KEY-redhat-release"></a>rpm –import /dvd/RPM-GPG-KEY-redhat-release</h1><p>########################################################<br>常见的报错：依赖关系<br>[root@server0 ~]# rpm -ivh /dvd/Packages/bind-chroot-9.9.4-50.el7.x86_64.rpm<br>错误：依赖检测失败：<br>    bind = 32:9.9.4-50.el7 被 bind-chroot-32:9.9.4-50.el7.x86_64 需要</p><p>######################################################<br> Yum软件包仓库，自动解决依赖关系</p><p>   服务：为客户端自动解决依赖关系安装软件</p><p> 虚拟机classroom默认搭建Web服务，将光盘利用Web共享给所有客户端</p><p> 服务端：虚拟机classroom,具备众多rpm包，具备仓库清单文件</p><p> <a href="http://classroom.example.com/content/rhel7.0/x86_64/dvd/" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/x86_64/dvd/</a><br> <a href="http://classroom.example.com/content/dvd/" target="_blank" rel="noopener">http://classroom.example.com/content/dvd/</a></p><p> 客户端：虚拟机server,指定服务端位置<br> 书写Yum客户端配置文件：/etc/yum.repos.d/*.repo<br>  错误的配置文件与正确配置文件会相互影响</p><p>[root@server0 ~]# rm -rf /etc/yum.repos.d/*<br>[root@server0 ~]# vim  /etc/yum.repos.d/rhel7.repo<br>  [rhel7]           #仓库标识，仓库的名字<br>  name=rhel7.0      #仓库的描述信息<br>  baseurl=<a href="http://classroom.example.com/content/rhel7.0/" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/</a><br>  x86_64/dvd/       #指定服务端位置，最好浏览器进行复制粘贴</p><p>  enabled=1         #启用该文件<br>  gpgcheck=0        #不检测红帽的签名信息</p><p>[root@server0 ~]# yum  repolist    #显示仓库信息</p><p>#####################################################<br>yum的使用</p><p>[root@server0 ~]# yum  -y  install  httpd<br>[root@server0 ~]# yum  -y  install  gcc<br>[root@server0 ~]# yum  -y  install  bind-chroot<br>[root@server0 ~]# yum  -y  install  system-config-kicstart<br>[root@server0 ~]# yum  -y  install  sssd<br>[root@server0 ~]# yum remove httpd    #卸载</p><p>清空Yum缓存：</p><p>[root@server0 ~]# yum clean all</p><p>搜寻关键字<br>[root@server0 ~]# yum search  ftp</p><p>#####################################################<br>升级内核，安装一个新的内核</p><p>• 使用wget下载工具,默认下载到当前目录下<br>– wget 软件包的URL网址</p><p>[root@server0 /]# wget <a href="http://classroom.example.com/content/rhel7.0/x86_64/errata/Packages/kernel-3.10.0-123.1.2.el7.x86_64.rpm" target="_blank" rel="noopener">http://classroom.example.com/content/rhel7.0/x86_64/errata/Packages/kernel-3.10.0-123.1.2.el7.x86_64.rpm</a></p><p>[root@server0 /]# ls<br>[root@server0 /]# uname  -r</p><h1 id="rpm-ivh-kernel-3-10-0-123-1-2-el7-x86-64-rpm-安装新内核"><a href="#rpm-ivh-kernel-3-10-0-123-1-2-el7-x86-64-rpm-安装新内核" class="headerlink" title="rpm -ivh kernel-3.10.0-123.1.2.el7.x86_64.rpm  #安装新内核"></a>rpm -ivh kernel-3.10.0-123.1.2.el7.x86_64.rpm  #安装新内核</h1><p>[root@server0 /]# uname  -r<br>[root@server0 /]# reboot       #重起虚拟机<br>[root@room9pc01 ~]# gos<br>[root@server0 ~]# uname  -r     #查看内核版本<br>3.10.0-123.1.2.el7.x86_64<br>[root@server0 ~]# </p><p>######################################################<br>wget 软件包的URL网址   -O  /目录路径/新文件  </p><p>  -O 另存为，必须要写文件名</p><p>#####################################################<br>网络配置</p><p>一、永久的主机名配置<br>[root@server0 ~]# vim /etc/hostname   #主机名配置文件<br> A.tedu.cn<br>[root@server0 ~]# exit</p><p>[root@room9pc01 ~]# gos</p><p>[root@A ~]# hostname<br> A.tedu.cn<br>[root@A ~]# </p><p>二、配置IP地址、子网掩码、网关地址</p><p>网卡配置：/etc/sysconfig/network-scripts/ifcfg-eth0</p><p>1.利用命令显示识别的网卡名字</p><p>[root@A ~]# nmcli connection show</p><p>2.配置IP地址、子网掩码、网关地址<br>[root@A ~]# nmcli  connection  modify  ‘System eth0’<br>  ipv4.method    manual<br>  ipv4.addresses   ‘172.25.0.110/24      172.25.0.254’<br>  connection.autoconnect   yes</p><p>  nmcli  connection   修改    ‘ 网卡的名称’<br>  ipv4.方法      手工配置<br>  ipv4.地址      ‘IP地址/子网掩码     网关地址’<br>    每次开机自动启用配置</p><p>3.激活网卡配置<br>[root@A ~]# nmcli connection up ‘System eth0’<br>[root@room9pc01 ~]# ssh -X <a href="mailto:root@172.25.0.110" target="_blank" rel="noopener">root@172.25.0.110</a> #真机进行远程管理<br>[root@A ~]# ifconfig    #查看IP地址的命令<br>[root@A ~]# route       #查看网关地址的命令<br>          Gateway<br>                 172.25.0.254    </p><p>########################################################<br>字符界面图形方式修改网络IP地址、子网掩码、网关地址<br>[root@A ~]# nmtui<br>[root@A ~]# nmcli connection up ‘System eth0’  #激活网卡配置</p><p>###################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY4/Admin-Study03/"/>
      <url>/2018/10/20/ADMIN/DAY4/Admin-Study03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.Linux中命令的执行依赖于解释器，默认的解释器是哪个程序？<br>     /bin/bash</p><p>2.如何结束当前正在运行的命令，快捷键是？<br>          Ctrl + c</p><p>3.切换上一级目录的操作命令？去往用户root的家目录？<br>          cd ..<br>          cd  ~root  或    cd  /root</p><p>4.ls常用选项有哪些？不用写作用<br>        -l   -A   -h   -d</p><ol start="5"><li>常见的通配符都有哪些？不用写作用<ul><li>?    []    {}</li></ul></li></ol><p>6.如何定义一个别名？如何查看所有的别名？如何删除一个别名？<br>    alias  别名=’实际执行的命令’<br>    alias<br>    unalias  别名</p><p>7.移动的命令是？<br>    mv</p><p>8.强制删除一个文件夹以及其内容的命令是？<br>    rm  -rf </p><p>9.cp命令在使用时，源是一个目录时需要加什么选项？<br>      -r</p><p>10.vim编辑器有几种工作模式？分别是什么？<br>            3   命令模式    输入模式     末行模式</p><p>11.在vim末行模式中，输入什么可以不保存退出？<br>      :q！</p><p>12.使用 ls 命令完成以下任务,找出/etc/目录下以re开头.conf结尾的文件<br>         ls  /etc/re*.conf</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY3/Study01/"/>
      <url>/2018/10/20/ADMIN/DAY3/Study01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>Linux目录结构中“/”与“/dev”主要存放的内容？</p><pre><code>根目录/:所有数据都在此目录下</code></pre><p> /dev:设备文件</p></li><li><p>Linux中磁盘的表示，第三块SCSI磁盘的第二个分区？<br>  /dev/sdc2</p></li><li><p>Linux中常见的文件系统都有哪些？</p><pre><code>ext4   xfs   swap </code></pre></li><li><p>Linux中查看文本文件命令是？</p><pre><code>cat</code></pre></li><li><p>Linux中查看目录内容的命令是？</p><pre><code>ls</code></pre></li><li><p>Linux中查看主机名的命令是？</p><pre><code>hostname</code></pre></li><li><p>Linux中查看IP地址的命令是？</p><pre><code>ifconfig</code></pre></li><li><p>Linux中切换到/dev目录的命令是？</p><pre><code>cd    /dev</code></pre></li><li><p>Linux中显示当前位置的命令是？</p><pre><code>pwd</code></pre><p>10.Linux中显示/root目录内容详细属性怎么实现？</p><pre><code>ls  -l  /root</code></pre></li></ol><p> 11.Linux中显示当前主机的内核版本的命令？<br>            uname -r</p><p> 12.Linux中查看CPU信息命令是？<br>            lscpu</p><p> 13.Linux中查看内存信息命令是？<br>           cat  /proc/meminfo</p><p> 14.Linux中查看/boot目录内容如何操作？<br>           ls  /boot</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY3/Exec03/"/>
      <url>/2018/10/20/ADMIN/DAY3/Exec03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例：复制、删除、移动</p><ol><li>在目录/opt下创建一个子目录 nsd </li><li>在目录/opt/nsd/创建文件readme.txt,利用vim写入内容 I Love Linux</li><li>将/etc/passwd 和 /etc/resolv.conf同时拷贝到/opt/nsd目录下</li><li>将文件 /etc/redhat-release复制到 /root/ 下，同时 改名为 version.txt </li><li>将文件 /root/version.txt 移动到/opt/nsd/目录下 </li><li>将/home目录复制到/opt/nsd/目录下 </li></ol><p>案例：ls命令练习</p><ol><li>查看根目录下内容</li><li>显示根目录本身详细属性   </li><li>切换到/boot目录，显示当前目录内容的详细属性，并加上易读的容量单位</li><li>显示/root的全部内容，包括隐藏文档</li><li>显示/bin/bash程序，详细属性</li><li>显示/dev/cdrom光驱设备，详细属性</li></ol><p>案例：mount挂载</p><ol><li>在根目录下创建目录结构/rhel7/dvd</li><li>利用图形将光盘文件rhel-server-7.4-x86_64-dvd.iso放入光驱设备中</li><li>将光驱设备挂载到/rhel7/dvd目录，以/rhel7/dvd目录作为其访问点</li><li>查看/rhel7/dvd/Packages目录内容</li><li>将/rhel7/dvd/Packages目录中以vsftpd开头的软件包，拷贝到/opt下</li></ol><p>案例：别名与vim的使用</p><ol><li>为虚拟机定义一个别名，执行byebye可以实现关闭系统</li><li>利用vim 修改文件/etc/hostname将其原有内容全部删除，写入新的内容为student.tmooc.cn</li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY3/Admin03/"/>
      <url>/2018/10/20/ADMIN/DAY3/Admin03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文本内容操作<br>• less分屏阅读工具<br>• 格式:less [选项] 文件名…</p><p>– 优势:支持前后翻页<br>• 基本交互操作<br>– 按 / 键向后查找(n、N切换)</p><p>[root@A /]# less /etc/passwd<br>     按键盘上下键，进行滚动<br>     输入  /a 全文查找a，按n、N切换跳转匹配项<br>     按q退出less模式</p><p>######################################################<br>• head、tail 命令<br>– 格式:head -n 数字 文件名<br>      tail -n 数字 文件名</p><p>[root@A /]#  head -3  /etc/passwd</p><p>[root@A /]#  head -4   /etc/passwd<br>[root@A /]#  head -12  /etc/passwd</p><p>[root@A /]#  tail  -3  /etc/passwd<br>[root@A /]#  tail    /etc/passwd     #默认显示10行</p><p>#####################################################<br>• grep工具<br>– 用途:输出包含指定字符的行<br>– 格式:grep   ‘查找条件’      目标文件</p><p>[root@A /]# grep  root  /etc/passwd</p><p>[root@A /]# grep  bin   /etc/passwd</p><p>[root@A /]# grep  bash  /etc/passwd</p><p>##################################################<br>什么是命令?<br>• Linux命令<br>  – 用来实现某一类功能的指令或程序<br>   Linux执行命令，一般都要找到对应的程序进行运行</p><pre><code>绿色：可以执行的程序</code></pre><p>  – 命令的执行依赖于解释器( 默认解释器：/bin/bash )</p><pre><code>用户 --------&gt; 解释器 -------&gt; 内核 -------&gt; 硬件</code></pre><p>###################################################</p><p>• Linux命令的分类<br>– 内部命令:属于解释器的一部分<br>– 外部命令:解释器之外的其他程序</p><p>##################################################<br>• 基本用法<br>– 命令字    [选项]…   [参数1]     [参数2]…</p><p>##################################################<br>• Tab键自动补全<br>– 可补齐命令字、选项、参数、文件路径、软件名、服务名<br>[root@A /]# if(连续两次tab)<br>[root@A /]# ifco(tab)<br>[root@A /]# cat  /et(tab)/red(tab)-r(tab)</p><h1 id="ls-et-tab-sysco-tab-netw-tab-tab-ifc-tab-e-tab"><a href="#ls-et-tab-sysco-tab-netw-tab-tab-ifc-tab-e-tab" class="headerlink" title="ls /et(tab)/sysco(tab)/netw(tab)-(tab)/ifc(tab)-e(tab)"></a>ls /et(tab)/sysco(tab)/netw(tab)-(tab)/ifc(tab)-e(tab)</h1><p>[root@A /]#ho(tab)na(tab)</p><p>#####################################################<br>• 快捷键<br>– Ctrl + c:废弃当前编辑的命令行,结束正在运行的命令<br>– Esc + . 或  Alt + . :粘贴上一个命令的参数</p><p>[root@A /]# ls /etc/redhat-release </p><p>[root@A /]# ls  -l  Alt + .</p><p>[root@A /]# cat     Alt + .</p><p>[root@A /]# cat -n  Alt + .</p><p>– Ctrl + l:清空整个屏幕</p><p>– Ctrl + u:清空至行首<br>– Ctrl + w:往回删除一个单词(以空格界定)</p><p>######################################################<br>mount挂载操作<br>1.软件包可以通过互联网下载<br>2.从光盘中获得软件包</p><p>  Windows系统：<br>      光盘 ——–&gt; 光驱设备 ——-&gt; CD驱动器（图标）访问点</p><p>  Linux系统：在Linux系统中，访问设备资源必须通过访问点</p><pre><code>光盘 ----------&gt; 光驱设备 -----------&gt; 访问点（目录）      /dev/cdrom </code></pre><p>1.图形将光盘放入虚拟光驱设备<br>2.查看光驱设备<br>[root@A /]# ls /dev/cdrom<br>/dev/cdrom<br>[root@A /]# ls -l /dev/cdrom<br>lrwxrwxrwx. 1 root root 3 8月   2 11:03 /dev/cdrom -&gt; sr0</p><p>  青色：快捷方式</p><p>3.mount挂载：可以让一个目录成为访问点（挂载点）<br>• 使用mount命令<br>– 格式:mount   设备路径     挂载点目录</p><p>[root@A ~]# mkdir  /dvd<br>[root@A ~]# ls  /<br>[root@A ~]# ls  /dvd</p><p>[root@A ~]# mount  /dev/cdrom   /dvd</p><p>[root@A ~]# ls /dvd/<br>[root@A ~]# ls /dvd/P(tab)</p><p>4.卸载<br>[root@A ~]# umount   /dvd     #进行卸载<br>[root@A ~]# ls /dvd/</p><p>[root@A ~]# mount   /dev/cdrom   /dvd<br>[root@A ~]# ls /dvd/</p><p>####################################################<br>注意事项：<br>1.目录没有找到<br>[root@A ~]# mount /dev/cdrom  /nsd<br>mount: 挂载点 /nsd 不存在</p><p>2.当前正在访问点路径下<br>[root@A dvd]# umount /dvd/<br>umount: /dvd：目标忙。<br>        (有些情况下通过 lsof(8) 或 fuser(1) 可以<br>         找到有关使用该设备的进程的有用信息)<br>[root@A dvd]# cd /<br>[root@A /]# umount /dvd/</p><p>3.建议挂载点的选择，不要是根目录下已存在的目录，尽量自己创建目录</p><p>######################################################<br>目录文件管理<br>cd — Change Directory<br>– 用途:切换工作目录<br>– 格式:cd [目标文件夹位置]</p><pre><code>~user表示用户user的家目录   ～：用户的家目录</code></pre><p>   /root：系统管理员root的家目录<br>   /home：存放所有普通用户的家目录</p><p>[root@A 桌面]# cd ~zhangsan<br>[root@A zhangsan]# pwd</p><p>[root@A zhangsan]# useradd  lisi    #创建普通用户lisi<br>[root@A zhangsan]# useradd  harry   #创建普通用户harry<br>[root@A zhangsan]# useradd  dc      #创建普通用户dc<br>[root@A zhangsan]# useradd  tc      #创建普通用户tc<br>[root@A zhangsan]# cd  ~lisi<br>[root@A lisi]# pwd<br>[root@A lisi]# cd  ~harry<br>[root@A harry]# pwd<br>[root@A harry]# cd  ~dc<br>[root@A dc]# pwd</p><p>  . 表示当前目录</p><p>#################################################<br>如何查看命令的帮助信息<br>[root@A ~]# 命令    –help</p><p>权威帮助手册<br>[root@A ~]# man  命令<br>  按 q 退出</p><p>[root@A ~]# ls  –help</p><p>[root@A ~]# man  ls<br>[root@A ~]# man  useradd<br>[root@A ~]# man  ifconfig<br>[root@A ~]# man  date</p><p>#################################################<br>• ls — List<br>– 格式:ls [选项]… [目录或文件名]</p><p>• 常用命令选项<br> – -l:以长格式显示,显示详细属性<br> – -h:提供易读的容量单位(K、M等)<br> – -d:显示目录本身(而不是内容)的属性<br> – -A:包括名称以 . 开头的隐藏文档</p><p>[root@A ~]# ls -A /root/</p><p>[root@A ~]# ls -l /boot<br>[root@A ~]# ls -lh /boot<br>[root@A ~]# ls -ld /boot</p><p>[root@A ~]# ls -lA /root/</p><p>###############################################<br>使用通配符<br>• 针对不确定的文档名称,以特殊字符表示<br> – *:任意多个任意字符<br> – ?:单个字符</p><p>[root@A ~]# ls /boot/vm<em>     #列出以vm开头的文档<br>[root@A ~]# ls /etc/</em>tab     #列出以tab结尾的文档</p><p>[root@A ~]# ls /dev/tty<em>     #列出以tty开头的文档<br>[root@A ~]# ls /etc/</em>.conf   #列出以.conf结尾的文档</p><p>[root@A ~]# ls /dev/tty?     #列出tty后面只能有一个字符的<br>[root@A ~]# ls /dev/tty??    #列出tty后面只能有两个字符的</p><p>  列出/etc/下以re开头并且以.conf结尾？<br>[root@A ~]# ls /etc/re*.conf</p><p>– [a-z]:多个字符或连续范围中的一个,若无则忽略<br>– {a,min,xy}:多组不同的字符串,全匹配</p><p>[root@A ~]# ls /dev/tty[3-8]<br>[root@A ~]# ls /dev/tty[1-5]</p><p>[root@A ~]# ls /dev/tty{1,3,7,9,12,38,S0}<br>[root@A ~]# ls /dev/tty{1,3,5,7,9,11,S1}</p><pre><code>列出/dev/tty20至/dev/tty30之间所有设备文件？</code></pre><p>[root@A ~]# ls  /dev/tty2[0-9]  /dev/tty30<br>[root@A ~]# ls  /dev/tty{2[0-9],30}</p><p>#################################################<br>别名的定义：简化复杂的命令</p><p>• 查看已设置的别名<br>– alias  [别名名称]</p><p>• 定义新的别名<br>– alias  别名名称= ‘实际执行的命令行’</p><p>• 取消已设置的别名<br>– unalias  [别名名称]</p><p>[root@A ~]# alias hn=’hostname’    #定义别名<br>[root@A ~]# alias                  #显示当前正在生效的别名</p><p>[root@A ~]# hn            #执行成功</p><p>[root@A ~]# unalias hn    #删除别名<br>[root@A ~]# hn            #执行失败</p><p>######################################################<br>  文档：目录和文件</p><p>• mkdir — Make Directory<br>– 格式:mkdir [-p] [/路径/]目录名…</p><pre><code>#-p表示连父目录</code></pre><p>[root@A ~]# mkdir -p  /vod/movie/cartoon<br>[root@A ~]# ls  /vod</p><p>[root@A ~]# mkdir -p  /opt/aa/bb/cc/dd<br>[root@A ~]# ls  /opt/</p><p>[root@A ~]# mkdir  /root/nsd01  /opt/nsd02<br>[root@A ~]# ls  /root<br>[root@A ~]# ls  /opt</p><p>rm 删除<br>• rm — Remove<br>– 格式:rm  [选项]…  文件或目录…</p><p>• 常用命令选项<br>  -r:递归删除(含目录)      递归:目录本身以及目录下所有<br>  -f:强制删除 </p><p>[root@A ~]# touch  /opt/1.txt<br>[root@A ~]# mkdir  /opt/nsd01<br>[root@A ~]# mkdir  /opt/test<br>[root@A ~]# ls  /opt/<br>1.txt  nsd01  test<br>[root@A ~]# rm  -rf  /opt/1.txt   /opt/nsd01<br>[root@A ~]# ls /opt/<br>test<br>[root@A ~]# rm  -rf  /opt/test/<br>[root@A ~]# ls  /opt/</p><p>#############################################<br>移动</p><p>mv 移动/改名<br>• mv — Move<br>– 格式:mv    原文件…        目标路径</p><p>[root@A ~]# rm  -rf  /opt/*<br>[root@A ~]# mkdir  /opt/nsd01<br>[root@A ~]# touch  /opt/1.txt<br>[root@A ~]# ls  /opt/</p><p>[root@A ~]# mv  /opt/1.txt    /opt/nsd01<br>[root@A ~]# ls  /opt/</p><p>[root@A ~]# ls  /opt/nsd01/</p><p>重命名：路径不变的移动</p><p>[root@A ~]# mv /opt/nsd01  /opt/student<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# mv /opt/student/  /opt/nsd<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# mkdir /opt/pub<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# mv /opt/pub  /opt/test<br>[root@A ~]# ls /opt/</p><p>##################################################<br>cp 复制<br>• cp — Copy<br>– 格式:cp [选项]… 原文件…   目标路径</p><p>• 常用命令选项<br>– -r:递归,复制目录时必须有此选项</p><p>[root@A ~]# rm -rf /opt/*<br>[root@A ~]# ls /opt/<br>[root@A ~]# cp /etc/passwd   /opt/<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# cp /etc/redhat-release  /opt/<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# cp /boot/   /opt/<br>cp: 略过目录”/boot/“<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# cp -r /boot/  /opt/<br>[root@A ~]# ls /opt/</p><p>[root@A ~]# ls /opt/boot/</p><p>###################################################<br>1.解决复制时出现重复<br>  在本次操作，临时取消别名的定义</p><p>[root@A ~]# cp  -r  /boot/  /opt/<br>[root@A ~]# cp  -r  /boot/  /opt/</p><p>[root@A ~]# \cp  -r  /boot/  /opt/</p><p>2.复制可以支持两个以上的参数<br>   永远把最后一个参数作为目标，其他的所有参数都做为源文档</p><p>[root@A ~]# cp /etc/fstab /etc/shadow  /opt/<br>[root@A ~]# ls /opt/</p><p>3.复制与   .    连用<br>[root@A ~]# cd /opt<br>[root@A opt]# cp  -r  /root    .    #将/root复制到当前路径下</p><p>[root@A ~]# cd /etc/sysconfig/network-scripts/<br>[root@A network-scripts]# cp  /etc/passwd    .</p><p>4.复制时可以重新命名，目标路径文件名<br>[root@A /]# cp /etc/redhat-release  /opt/abc<br>[root@A /]# ls /opt/</p><p>[root@A /]# cp -r /mnt/  /opt/haha<br>[root@A /]# ls /opt/</p><p>[root@A /]# rm -rf /opt/*           #清空/opt目录内容<br>[root@A /]# cp -r /mnt/  /opt/test  #将/mnt放入/opt命名为test<br>[root@A /]# ls /opt<br>[root@A /]# ls /opt/test<br>[root@A /]# cp -r /mnt/  /opt/test  </p><pre><code>#将/mnt放入/opt/test目录下</code></pre><p>[root@A /]# ls /opt<br>[root@A /]# ls /opt/test</p><p>######################################################<br>使用vim创建/修改文件<br>• vim文本编辑器<br>– 格式:vim [[/目录/]文件名]</p><p>– 若目标文件不存在,则新建空文件并编辑<br>– 若目标文件已存在,则打开此文件并编辑</p><p>vim模式：命令模式    输入模式(插入模式  编辑模式)    末行模式</p><p>[root@A /]# vim  /opt/haxi.txt</p><pre><code>      i 键命---------------------&gt;输入模式(按Esc 键 回到命令模式)令模式---------------------&gt;末行模式(按Esc 键 回到命令模式)                  : 键末行模式  ：wq    保存并退出末行模式  ：q！   强制不保存并退出</code></pre><p>[root@A /]# cat  /opt/haxi.txt</p><p>##################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY3/ADMIN-Study02/"/>
      <url>/2018/10/20/ADMIN/DAY3/ADMIN-Study02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>Linux目录结构中“/”与“/dev”主要存放的内容？</p><pre><code>/ ：所有的数据都在此目录下（Linux系统的起点）</code></pre><p> /dev: 存放设备文件相关</p></li><li><p>Linux中磁盘的表示，第三块SCSI磁盘的第二个分区？</p><pre><code>sdc2</code></pre></li><li><p>Linux中常见的文件系统都有哪些？</p><pre><code>ext4   xfs   swap</code></pre></li><li><p>Linux中查看文本文件内容命令是？</p><pre><code>cat</code></pre></li><li><p>Linux中查看目录内容的命令是？</p><pre><code>ls</code></pre></li><li><p>Linux中查看主机名的命令是？</p><pre><code>hostname</code></pre></li><li><p>Linux中查看IP地址的命令是？</p><pre><code>ifconfig</code></pre></li><li><p>Linux中切换到/dev目录的命令是？</p><pre><code>cd   /dev</code></pre></li><li><p>Linux中显示当前位置的命令是？</p><pre><code>pwd</code></pre><p>10.Linux中显示/root目录内容详细属性怎么实现？</p><pre><code>ls  -l   /root</code></pre><p>11.Linux中显示当前主机的内核版本的命令？</p><pre><code>uname   -r</code></pre></li></ol><p> 12.Linux中查看CPU信息命令是？<br>         lscpu</p><p> 13.Linux中查看内存信息命令是？<br>          cat  /proc/meminfo</p><p> 14.Linux中查看/boot目录内容如何操作？<br>          ls   /boot</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY2/Admin02/"/>
      <url>/2018/10/20/ADMIN/DAY2/Admin02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux是一种操作系统</p><p>   操作系统:一堆软件的集合，可以让计算机的硬件正常工作</p><p>• UNIX诞生,1970-1-1</p><p>• Linux之父,Linus Torwalds</p><pre><code>内核：底层软件    用户-------&gt;内核------&gt;硬件</code></pre><p>  – 版本号:主版本.次版本.修订号</p><p>• 是一套公开发布的完整Linux系统:   内核 + 各种应用软件</p><p>######################################################<br>利用虚拟机，安装RHEL7系统</p><p>  按Ctrl+Alt 鼠标回到真机</p><p>修改桌面背景<br>关闭节电功能</p><p>#####################################################<br>RHEL7基本概念</p><p>如何使用硬盘?<br>• 一块硬盘的“艺术”之旅</p><p>– 物理硬盘==&gt;分区规划==&gt;格式化==&gt;读/写文档</p><p>– 毛坯楼层==&gt;打隔断==&gt;装修==&gt;入驻</p><p>  格式化：赋予空间文件系统的过程，赋予空间的规则</p><p>  文件系统：存储数据的规则</p><p>• 典型的文件系统类型<br>– EXT4,第四代扩展文件系统,RHEL6系列默认<br>– XFS,高级日志文件系统,RHEL7系列默认<br>– SWAP,交换空间(虚拟内存)：利用硬盘空间，缓解物理真实内存不足</p><p>Linux目录结构：树型结构</p><pre><code>根目录  /  ：所有的数据都在此目录下，Linux系统的起点路径表示：  /test/abc/1.txt    一个路径开始的  /  为根目录</code></pre><p>  /dev：设备相关的数据（例如：键盘、鼠标、硬盘、光驱…….）</p><p>磁盘与分区表示<br>  hd,表示IDE设备<br>  sd,表示SCSI设备</p><p>   /dev/hda1   /dev/hdb2     /dev/hdc1    /dev/hdd2</p><p>   /dev/sda1   /dev/sdb2     /dev/sdc3    /dev/sdd4</p><pre><code>/dev/sda5:表示SCSI设备,第一块磁盘，第5个分区</code></pre><p>#####################################################<br>RHEL7基本操作</p><p>获取命令行界面<br>• 虚拟控制台切换( Ctrl + Alt + Fn 组合键)<br>– tty1:图形桌面<br>– tty2~tty6:字符控制台</p><p>开启图形命令行<br>• 桌面空白处，右键“打开终端”<br>• 应用程序 –&gt; 工具 –&gt; 终端</p><p>######################################################<br>• 命令行提示标识的含义<br>– [当前用户@主机名 工作目录]$</p><p>– 若当前用户是root,则最后一个字符为 #<br>[root@svr7 桌面]#</p><p>– 否则,最后一个字符为 $<br>[teacher@svr7 桌面]$</p><p>#####################################################<br>查看及切换目录<br>• pwd — Print Working Directory<br>– 用途:查看当前工作目录，显示当前所在位置</p><p>• cd — Change Directory<br>– 用途:切换工作目录<br>– 格式:cd   [目标文件夹位置]</p><p>• ls — List<br>– 格式:ls [选项]… [目录或文件名]…</p><p>[root@localhost ~]# pwd           #显示当前所在位置<br>[root@localhost ~]# cd    /       #切换目录到根目录下<br>[root@localhost /]# pwd<br>[root@localhost /]# ls            #显示当前目录内容</p><p>[root@localhost /]# cd  /dev<br>[root@localhost dev]# pwd<br>[root@localhost dev]# ls </p><p>[root@localhost dev]# cd /root<br>[root@localhost root]# pwd<br>[root@localhost root]# ls</p><p>[root@localhost root]# cd /boot<br>[root@localhost boot]# pwd<br>[root@localhost boot]# ls</p><p>颜色方面：<br>    蓝色：目录<br>    黑色：文本文件</p><p>[root@localhost ~]# ls  /  /home/  /root/</p><p>[root@localhost ~]# ls  /boot<br>[root@localhost ~]# ls  /bin<br>[root@localhost ~]# ls  /etc<br>[root@localhost ~]# ls  /opt<br>[root@localhost ~]# ls  /tmp</p><p>######################################################<br>cat查看文本文件的内容</p><p>[root@localhost ~]# ls   /root/<br>[root@localhost ~]# cat  /root/anaconda-ks.cfg</p><p>[root@localhost ~]# ls   /etc/passwd<br>[root@localhost ~]# cat  /etc/passwd</p><p>[root@localhost ~]# ls   /etc/fstab<br>[root@localhost ~]# cat  /etc/fstab</p><p>存放当前系统版本信息配置文件/etc/redhat-release<br>查看当前系统版本<br>[root@localhost ~]# cat  /etc/redhat-release</p><p>######################################################<br>• 完整的命令一般格式</p><p>– 命令字     [选项]…      [参数1]      [参数2]…</p><p>[root@localhost ~]# cat  -n   /etc/redhat-release<br>[root@localhost ~]# cat  -n   /etc/default/useradd<br>[root@localhost ~]# cat  -n   /etc/passwd</p><p>• 常用命令选项<br>– -l :以长格式显示，显示目录内容的详细属性</p><p>[root@localhost ~]# ls  -l  /root<br>[root@localhost ~]# ls  -l  /boot<br>[root@localhost ~]# ls  -l  /etc</p><p>###################################################<br>• 列出内核版本<br>[root@svr7 桌面]# uname -r<br>3.10.0-327.el7.x86_64      #主版本.次版本.修订号</p><p>• 列出CPU处理器信息<br>[root@svr7 桌面]# lscpu<br>……<br>CPU(s):                4           #4个核心<br>……<br>型号名称：        Intel(R) Core(TM) i5-4430S CPU @ 2.70GHz<br>……<br>• 检查内存大小、空闲情况<br>[root@room9pc01 ~]# cat /proc/meminfo<br>MemTotal:       16166612 kB<br>……</p><p>#####################################################</p><p>第一步：查看系统版本<br>第二步：查看系统的主机名<br>第三步：查看系统的IP地址    </p><p>######################################################</p><p>• 列出当前系统的主机名称<br>[root@A ~]# hostname<br>[root@A ~]# hostname  A.tedu.cn   #设置主机名<br>[root@A ~]# hostname</p><p> 新开一个终端进行验证提示符的变化</p><p>• 列出网卡连接信息<br>[root@svr7 桌面]# ifconfig</p><pre><code>127.0.0.1 ：永远代表本机</code></pre><p>[root@A ~]# ping 127.0.0.1</p><p> 结束正在运行的命令：Ctrl + c</p><p>[root@A ~]# ifconfig eth0 192.168.1.1   #为网卡eth0 配置IP地址<br>[root@A ~]# ifconfig </p><p>[root@A ~]# ping 192.168.1.1</p><p>######################################################</p><p>• 关机:poweroff<br>[root@svr7 ~]# poweroff</p><p>• 重启:reboot<br>[root@svr7 ~]# reboot</p><p>#####################################################<br>• mkdir — Make Directory<br>– 格式:mkdir   [/路径/]目录名…</p><p>[root@A ~]# mkdir  test01     #当前创建<br>[root@A ~]# ls                #查看当前路径下内容</p><p>[root@A ~]# mkdir  /student   #在根目录下创建student目录<br>[root@A ~]# ls  /             #查看根目录下内容</p><p>[root@A ~]# mkdir /opt/test02  #在/opt目录创建test02目录<br>[root@A ~]# ls /opt            #查看/opt目录内容</p><p>• touch命令<br>– 用途:新建空文件<br>– 格式:touch 文件名…</p><p>[root@A ~]# touch  /opt/2.txt<br>[root@A ~]# ls /opt/</p><p>###################################################<br>  绝对路径：以根（/）开始的路径<br>  相对路径：不以根（/）开始的路径，以当前路径为参照</p><p>[root@A /]# cd   /etc/pki/<br>[root@A pki]# ls</p><p>[root@A pki]# cd   /etc/pki/java/     #绝对路径<br>[root@A java]# pwd</p><p>[root@A java]# cd   /etc/pki/<br>[root@A pki]# pwd<br>[root@A pki]# ls</p><p>[root@A pki]# cd   java               #相对路径<br>[root@A java]# pwd</p><p>##################################################</p><p> cd  .. :返回上一层</p><p>[root@A /]# cd /etc/pki/<br>[root@A pki]# pwd<br>/etc/pki<br>[root@A pki]# cd   ..<br>[root@A etc]# pwd<br>/etc<br>[root@A etc]# cd  ..<br>[root@A /]# pwd<br>/<br>[root@A /]# </p><p>##################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY2/Admin-Exec02/"/>
      <url>/2018/10/20/ADMIN/DAY2/Admin-Exec02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>案例：ls命令练习</p><ol><li>查看根目录下内容</li><li>显示根目录内容的详细属性</li><li>显示/boot目录内容的详细属性</li><li>显示/root的内容</li><li>显示/bin/bash程序，详细属性</li><li>显示/opt目录内容的详细属性</li></ol><p>案例：查看文件内容练习<br>  1.查看/etc/passwd文件内容<br>  2.查看/etc/default/useradd文件内容<br>  3.查看内存信息<br>  4.查看/etc/default/useradd文件内容，并显示行号</p><p>案例：cd命令练习<br>  1.切换到根目录，利用pwd命令查看当前位置<br>  2.切换到/root，利用pwd命令查看当前位置<br>  3.切换到/boot，利用pwd命令查看当前位置<br>  4.切换到/opt，利用pwd命令查看当前位置<br>  5.切换到/tmp，利用pwd命令查看当前位置<br>  6.切换到/var，利用pwd命令查看当前位置<br>  7.切换到/home，利用pwd命令查看当前位置<br>  8.切换到/etc，利用pwd命令查看当前位置<br>  9.切换到/proc，利用pwd命令查看当前位置<br>  10.切换到/etc/pki，利用pwd命令查看当前位置,再利用cd ..进行返回上一层目录</p><p>案例：主机名与查看网卡命令练习<br>  1.显示当前系统主机名<br>  2.显示当前系统内核版本<br>  3.设置eth0网卡IP地址为192.168.10.1<br>  4.查看当前系统eth0网卡IP地址信息</p><p>案例：创建命令练习<br>  1.请在/root创建三个目录分别为student、file、nsd1807<br>  2.请在/opt创建三个文本文件分别为1.txt、a.txt、nsd.txt</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/20/ADMIN/DAY1/Admin01/"/>
      <url>/2018/10/20/ADMIN/DAY1/Admin01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>牛犇</p><p> 第一阶段课程内容共19天<br> 云计算系统管理、 云计算应用管理、系统&amp;服务管理进阶</p><p> 云计算系统管理<br>    DAY01    开学典礼、云计算介绍、TCP/IP协议及配置<br>    DAY02    Linux系统简介、安装RHEL7系统、RHEL7基本操作<br>    DAY03    命令行基础、 目录和文件管理    、  教学环境介绍<br>    DAY04    软件包管理、配置网络、文本/文件查找<br>    DAY05    管理用户和组、tar备份与恢复、NTP时间同步、cron计划任务<br>    DAY06    权限和归属、使用LDAP认证、家目录漫游<br>    DAY07    综合串讲    、综合练习    </p><p> 云计算应用管理<br>    DAY01 分区规划及使用、LVM逻辑卷<br>    DAY02 Shell脚本基础、使用变量、条件测试及选择、列表式循环<br>    DAY03 系统安全保护、配置用户环境、配置高级连接、防火墙策略管理<br>    DAY04 配置SMB共享、配置NFS共享<br>    DAY05 ISCSI共享存储、数据库服务基础、管理表数据<br>    DAY06 HTTP服务基础、网页内容访问、部署动态网站<br>    DAY07 综合串讲、综合练习</p><p> 系统&amp;服务管理进阶<br>    DAY01    扩展的几个应用、发布网络YUM源、vim编辑技巧、源码编译安装、systemctl控制<br>    DAY02    DNS服务基础、特殊解析、DNS子域授权、缓存DNS<br>    DAY03    Split分离解析、RAID磁盘阵列、进程管理、日志管理<br>    DAY04    批量装机环境、配置PXE引导、kickstart自动应答<br>    DAY05    rsync同步操作、inotify实时同步、Cobbler网络装机        </p><p>##################################################################################################</p><p>  准备笔记本与笔，先讲解后练习，勤奋的练习</p><pre><code>每日课程安排                 8:30-------9:15      休息15分钟                                  9:30-------10:10     休息10分钟                 10:20------11:05     休息15分钟                 11:20------12:00                  14:00------14:45      休息15分钟                                15:00------15:50      休息15分钟                 16:05------16:50      休息15分钟                  17:05------18:00      休息15分钟</code></pre><p>##################################################################<br> 真机Linux操作系统，用户账户 root  密码  Taren1</p><p> 虚拟系统管理器（软件）：虚拟计算机的硬件</p><p>典型服务模式<br>• C/S,Client/Server架构<br>– 由服务器提供资源或某种功能<br>– 客户机使用资源或功能</p><p>#####################################################<br>TCP/IP是  最广泛支持的通信协议</p><p>• 主机与主机之间通信的三个要素<br>– IP地址(IP address)<br>–  子网掩码(subnet mask)<br>– IP路由(IP router)</p><p>#####################################################<br>– IP地址(IP address)：唯一标识 网络中一台主机</p><p>• 地址组成(点分十进制):<br>– 一共32个二进制位<br>– 表示为4个十进制数,以 . 隔开<br>• 用于一般计算机网络<br>– A类:1 ~ 127       网+主+主+主<br>– B类:128 ~ 191   网+网+主+主<br>– C类:192 ~ 223   网+网+网+主</p><p>• 组播及科研专用<br>– D类:224 ~ 239  组播<br>– E类:240 ~ 254  科研</p><p> IP地址由网络位与主机位</p><p>   座机号：区号-号码<br>     区号：标识区域<br>     010-12345678<br>     0316-7351111</p><p>  192.168.1.1—–&gt;首先看第一个数字为192—–&gt;属于C类地址 网+网+网+主<br>  192.168.1.2</p><p>  192.168.1.1：192.168.1区域（网络）中，编号为1的主机<br>  192.168.2.1：192.168.2区域（网络）中，编号为1的主机</p><pre><code>密码  Taren1</code></pre><p>配置IP地址<br>• 操作步骤:<br>– 右击桌面“网络” —&gt;“属性” —&gt;“更改适配器设置”<br>– 双击“本地连接” —&gt;“属性”<br>– 双击“Internet协议版本4(TCP/IPv4)”——&gt;”使用下面的IP地址”<br>– 配置完成后,单击“确定”完成</p><p>  配置IP地址：192.168.1.1<br>      子网掩码：255.255.255.0</p><pre><code>子网掩码作用：区分以及标识IP地址的网络位与主机位                       以数字1表示IP地址的网络位                       以数字0表示IP地址的主机位    11000000.10101000.00000001.0000000111111111.11111111.11111111.00000000子网掩码表示：192.168.1.1/24      # 24个网络位</code></pre><p>#############################################<br>IP地址的配置方式：<br>        1.手工配置<br>        2.自动获取IP地址，网络中前提有一个DHCP服务器</p><p>命令进行查看IP地址信息</p><p>  Windows键 + r = 开始 + 运行</p><pre><code>ipconfig  查看ip地址信息   exit   退出命令行界面</code></pre><p>#####################################################<br> 利用克隆方式，可以快速产生一台Windows2008，密码为 Taren1</p><p>   1.关闭模版机器<br>   2.进行克隆</p><p> 针对win2008-clone修改桌面背景<br>   控制面板—–&gt;显示—–&gt;更改桌面背景</p><p>配置IP地址<br>• 操作步骤:<br>– 右击桌面“网络” —&gt;“属性” —&gt;“更改适配器设置”<br>– 双击“本地连接” —&gt;“属性”<br>– 双击“Internet协议版本4(TCP/IPv4)”——&gt;”使用下面的IP地址”<br>– 配置完成后,单击“确定”完成</p><p>  配置IP地址：192.168.1.2<br>      子网掩码：255.255.255.0</p><p>  Windows键 + r = 开始 + 运行</p><pre><code>ipconfig  查看ip地址信息   exit   退出命令行界面</code></pre><p>####################################################<br>测试通信命令  ping 默认会发送四次请求 </p><pre><code>ping测试是双向，有去有回</code></pre><p> Windows操作系统默认防火墙会阻止ping操作</p><p>两台机器关闭防火墙<br> – 右击桌面“网络” —&gt;“属性” —&gt;“Windows防火墙（左下角）”<br> – 打开或关闭windows防火墙 —&gt;上下都选 关闭</p><p>  Windows键 + r = 开始 + 运行</p><pre><code>ping    对方机器的IP地址     #测试通信ping    192.168.1.2   </code></pre><p>###################################################<br>  网关地址：解决不同网络通信（路由器）</p><p> DNS服务器地址：将域名解析为IP地址</p><pre><code>www.qq.com---》IP地址</code></pre><p>##################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/19/hello-world/"/>
      <url>/2018/10/19/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>DB存储引擎</title>
      <link href="/2018/10/17/DBA/DB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E_3/"/>
      <url>/2018/10/17/DBA/DB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E_3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数据库默认的存储引擎innodb</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;    换行显示<span class="keyword">show</span> <span class="keyword">engines</span>\G;</span><br></pre></td></tr></table></figure><ul><li><p>engine：innodb 使用两个文件存储表文件</p></li><li><p>engine：myisam使用三个文件存储表文件</p></li><li><p>表名.frm 存储表结构</p></li><li><p>表名.ibd 存储索引和数据</p></li></ul><p>Myisam 使用三个文件存储表文件</p><ul><li><p>表名.frm 表结构</p></li><li><p>表名.myi 存储索引信息</p></li><li><p>表名.myd 数据信息</p></li></ul><p><strong>innodb</strong>：</p><ul><li><p>表名.Frm 存储表结构</p></li><li><p>表名.ibd 存储索引和数据</p></li></ul><p>修改msyql默认的存储引擎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vim /etc/my.cnf </span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">default_storage_engine=myisam</span><br><span class="line"></span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>事务日志文件：</p><p>/var/lib/mysql/ib__logfile0、ib_logfile1</p><p>innoDB 存储引擎</p><p>• 主要特点</p><p>  – 支持行级锁定</p><p>  – 支持事务、事务回滚、支持外键</p><p><strong>MySQL 锁机制</strong></p><p>解决并发访问冲突问题</p><p>• 锁粒度</p><p> – 表级锁:一次直接对整张表进行加锁。</p><p> – 行级锁:只锁定某一行。</p><p> – 页级锁:对整个页面( MySQL 管理数据的基本存储单位)进行加锁。</p><p>• 锁类型e</p><p> – 读锁(共享锁):支持并发读。</p><p> – 写锁(互斥锁、排它锁):是独占锁,上锁期间其他线程不能读表或写表。</p><p>Innodb:支持行锁，myisam:支持表锁，</p><p>行级锁innodb当第一个人访问表的时候，就会所上相应的行，其他人这时不能访问该行</p><p>表级锁Myisam 当第一个人访问表的时候，整张表都会上锁，其他人不能访问该表</p><p>查看当前的锁状态</p><p>show status like “%lock%”;</p><p><strong>事务特性 (ACID)</strong></p><p>• Atomic :原子性</p><p>– 事务的整个操作是一个整体,不可分割,要么全部成</p><p>功,要么全部失败。</p><p>• Consistency : 一致性</p><p>– 事务操作的前后,表中的记录没有变化。</p><p>• isolation :隔离性</p><p>– 事务操作是相互隔离不受影响的。不同的人对同一张表读的时候，这个操作互不影响</p><p>• Durability :持久性</p><p>– 数据一旦提交,不可改变,永久改变表数据</p><p>事务：对数据访问的一整个过程</p><p>事务回滚：</p><p>查询变量</p><p>show variables ;</p><p>​    设置当前终端的变量的改变，在其他终端不起作用</p><p>set autocommit=OFF;    </p><p>提交所有操作,数据一旦提交,不可改变,永久改变表数据</p><p>commit;</p><p>查询操作多的表适合使用myisam存储引擎，可以节省系统资源</p><p>写操作多的表适合使用innodb存储引擎，可以加大并发访问量</p><p><strong>数据导入导出</strong></p><p>查看默认使用目录及目录是否存在</p><p>fields terminated by  “间隔符“; 文件内容的间隔符</p><p>Lines terminated by  “\n”;   换行符</p><p>小技巧，在mysql命令模式下运行linux系统命令</p><p>在所需要执行的系统命令之前加上system</p><p>system ls -ld /etc/passwd </p><p>创建 待导入表</p><p>create table user(</p><p>​    -&gt; name char(100),</p><p>​    -&gt; passwd char(1),</p><p>​    -&gt; uid int(10),</p><p>​    -&gt; gid int(10),</p><p>​    -&gt; comment char(100),</p><p>​    -&gt; homedir char(150),</p><p>​    -&gt; shell char(100)</p><p>​    -&gt; );</p><p>导入表数据</p><p>load data infile “/var/lib/mysql-files/passwd”</p><p>​    -&gt; into table user</p><p>​    -&gt; fields terminated by </p><p>​    -&gt; “:”</p><p>​    -&gt; lines terminated by “\n”</p><p>​    -&gt; ;</p><p>增加id字段</p><p>alter table user add id int(3) zerofill primary key auto_increment first;</p><p>vim /etc/my.cnf</p><p>[mysqld]</p><p>secure_file_priv=/mydir</p><p>Systemctl restart mysqld</p><p>数据导出</p><p>按照原数据库的格式导出,mysql应该对/mydir拥有所有权限</p><p>select * from user into outfile “/mydir/1.txt”;</p><p>指定导出的格式</p><p>select * from user into outfile “/mydir/2.txt” fields terminated by “\t” </p><p>-&gt; lines terminated by “\n”;</p><p>增加表记录</p><p>1)给所有字段赋值</p><p>INSERT INTO 表名</p><p>-&gt; VALUES</p><p>( 字段 1 值, .. .. ,字段 N 值 ) ,</p><p>( 字段 1 值, .. .. ,字段 N 值 ) ,</p><p>( 字段 1 值, .. .. ,字段 N 值 ) ;</p><p>insert into user values</p><p>-&gt;(44,”xiao”,”x”,2222,2222,”xiao”,”/home/xiao”,”/bin/bash”),</p><p>-&gt;(45,”luo”,”x”,1234,1234,”luo is dog”,”/home/luo”,”/bin/bash”);</p><p>2)给指定字段赋值</p><p>INSERT INTO 表名 ( 字段 1,.. .., 字段 N)</p><p>-&gt; VALUES</p><p>( 字段 1 值,字段 2 值,字段 N 值 ) ,</p><p>( 字段 1 值,字段 2 值,字段 N 值 ) ,</p><p>( 字段 1 值,字段 2 值,字段 N 值 ) ;</p><p>insert into user(name,homedir)</p><p>  -&gt; values</p><p>  -&gt; (“jiu”,”/home/jiu”),</p><p>  -&gt; (“wu”,”/home/wu”);</p><p>注意事项</p><p>– 字段值要与字段类型相匹配</p><p>– 对于字符类型的字段,要用双或单引号括起来</p><p>– 依次给所有字段赋值时,字段名可以省略</p><p>– 只给一部分字段赋值时,必须明确写出对应的字段名称</p><p>更新表记录，把id为45的passwd改为a，homedir改为/home/wu</p><p>UPDATE 表名</p><p>SET</p><p>字段 1= 字段 1 值 ,</p><p>字段 2= 字段 2 值 ,</p><p>字段 N= 字段 N 值 ;</p><p>WHERE 条件表达式 ;</p><p>update user set passwd=”a”,homedir=”/home/wu” where id=45;</p><p>删除表记录</p><p>DELETE FROM 表名 WHERE 条件表达式 ;</p><p>delete from user where name=”wu”;</p><p><strong>基本查询条件</strong></p><p><strong>数值类型</strong>比较</p><table><thead><tr><th>类 型</th><th>用 途</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&gt; 、 &gt;=</td><td>大于、大于或等于</td></tr><tr><td>&lt; 、 &lt;=</td><td>小于、小于或等于</td></tr><tr><td>!=</td><td>不等于</td></tr></tbody></table><p>select name,uid from user where uid!=1000;</p><p><strong>字符</strong>比较 / 匹配空 / 非空</p><p>• 字段类型必须是字符</p><table><thead><tr><th>类 型</th><th>用 途</th></tr></thead><tbody><tr><td>=</td><td>相等</td></tr><tr><td>!=</td><td>不相等</td></tr><tr><td>IS NULL</td><td>匹配空</td></tr><tr><td>IS NOT NULL</td><td>非空</td></tr></tbody></table><p>select name from user where name is not null;</p><p><strong>逻辑</strong>比较</p><p>• 多个判断条件时使用</p><p>OR：逻辑或    ，AND：逻辑与， ！：逻辑非 ()：提高优先级</p><p>范围内匹配 / 去重显示</p><p>• 匹配范围内的任意一个值即可</p><table><thead><tr><th>类 型</th><th>用 途</th></tr></thead><tbody><tr><td>In( 值列表 )</td><td>在…里…</td></tr><tr><td>Not in ( 值列表 )</td><td>不在…里…</td></tr><tr><td>Between 数字 1 and 数字2</td><td>在…之间…</td></tr><tr><td>DISTINCT 字段名</td><td>去重显示</td></tr></tbody></table><p>select name,uid from user where uid in (10,11,1020,1111,1234);</p><p>select name,uid from user where uid between 10 and 1000;</p><p>去重显示，重复的只显示一次</p><p>select distinct shell from user where uid&lt;=1000;</p><p><strong>模糊匹配</strong></p><p>• 基本用法</p><p>– WHERE 字段名 LIKE ‘ 通配字串 ‘</p><p>– 通配符“ _” 匹配单个字符</p><p>– “%” 匹配 0~N 个字符</p><p><strong>正则匹配</strong></p><p>关键字regexp</p><p>基本用法</p><p>– WHERE 字段名 REGEXP ‘ 正则表达式‘</p><p>– ^ $ . [ ] *</p><p>​    select id,name from user where name regexp ‘[0-9]’;</p><p><strong>四则运算</strong>( +  - * \ )</p><p>select name,age,2018-age start from user where name=”root”;</p><p><strong>查询结果过滤</strong></p><p>• 基本用法</p><p>– SQL 查询 HAVING 条件表达式;</p><p>– SQL 查询 where 条件 HAVING 条件表达式;</p><p>– SQL 查询 group by 字段名</p><p>HAVING 条件表达式;</p><p><strong>限制查询结果显示行数</strong></p><p>​    控制查询结果的</p><p>• 基本用法</p><p>– SQL 查询 LIMIT N; 显示查询结果前 N 条记录</p><p>– SQL 查询 LIMIT N,M ;显示指定范围内的查询记录</p><p>– SQL 查询 where 条件查询 LIMIT N ;显示查询</p><p>结果前 N 条记录</p><p>– SQL 查询 where 条件查询 LIMIT N , M ;显示指定范围内的查询记录</p><p><strong>查询表结构指定的字段</strong></p><p>show column from table_name like “字段名”;</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>DB约束条件</title>
      <link href="/2018/10/16/DBA/DB%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6_2/"/>
      <url>/2018/10/16/DBA/DB%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6_2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>约束条件</strong></p><table><thead><tr><th>值</th><th>解释</th></tr></thead><tbody><tr><td>Null</td><td>允许为空，默认设置</td></tr><tr><td>Not null</td><td>不允许为空</td></tr><tr><td>key</td><td>索引类型</td></tr><tr><td>default</td><td>设置默认，缺省为null</td></tr></tbody></table><p><img src="https://github.com/HLQ1102/1807/blob/master/%E4%B8%89%E9%98%B6%E6%AE%B51_DBA/db%E7%BA%A6%E6%9D%9F1.png?raw=true" alt=""> </p><p>create table t8(name char(10) not null default “tom”, </p><p>age  tinyint(2) not null default 18,</p><p>likes set(“eat”,”sleep”,”move”) not null default “move”</p><p>);</p><p><strong>修改表结构</strong></p><p><strong>alter</strong>语法结构</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>add</td><td>添加字段,添加主键,设置约束</td></tr><tr><td>modify</td><td>修改字段类型、位置、及约束</td></tr><tr><td>change</td><td>修改字段名</td></tr><tr><td>drop</td><td>修改字段</td></tr><tr><td>rename</td><td>修改表名</td></tr></tbody></table><p>修改时如果表下有数据，这是不能修改表的数据类型，宽度和约束条件，不然会产生冲突，修改不成功，宽度可以调大。</p><p>增加字段并放在表的第一列</p><p>mysql&gt; alter table t9 add sex set(“man”,”wman”) default “man” after name;</p><p>增加字段并放在哪个字段之后</p><p>修改字段名</p><p>alter table 表明 change 源字段名 新字段名 类型(宽度) 约束条件;</p><p>alter table t9 change sex ssex set(“man”,”wman”,”zhong”) not null default “zhong” ;</p><p>mysql&gt; alter table t9 add sex set(“man”,”wman”) default “man” after name;</p><p>修改字段的位置</p><p>alter table t9 modify ssex set(‘man’,’wman’,’zhong’) not null default ‘zhong’ after age;</p><p>select * from t9</p><p><strong>MySql 索引</strong></p><p>是什么</p><ul><li><p>索引时对记录集的多个字段进行排序的方法</p></li><li><p>类似于数的目录</p></li><li><p>索引算法包括：Btree(二叉树)、B+tree、hash，mysql默认Btree，可修改</p></li><li><p>索引的标志是MUL</p></li></ul><p><img src="https://github.com/HLQ1102/1807/blob/master/%E4%B8%89%E9%98%B6%E6%AE%B51_DBA/%E5%9B%BE%E7%89%872.png?raw=true" alt=""> </p><p>索引优点</p><ul><li><p>通过创建为以性索引，可以保证数据库表中每一行数据的唯一性</p></li><li><p>可以加<strong>快数据的检索速度</strong></p></li></ul><p>索引优点</p><ul><li><p>当对表中的数据进行数据进行增加、删除和修改的时候，索引叶要动态的维护，降低了数据的维护速度</p></li><li><p>索引需要占用物理空间</p></li></ul><p><strong>键值类型</strong></p><p><strong>foreign key:外键</strong></p><p><strong>primary key:主键</strong></p><p>fulltext  :全文索引</p><p>unique:唯一索引</p><p><strong>index:普通索引</strong></p><p>index 使用说明</p><ul><li><p>一个表中可以有多个index字段</p></li><li><p>字段的值允许有重复，且可以赋null值</p></li><li><p>经常把做查询的条件的字段设置为index字段    </p></li><li><p>index字段的key标志是p></li></ul><p>建表的时候指定索引字段</p><ul><li>index(字段1),index(字段2)…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table ta( id tinyint not null</span><br><span class="line"></span><br><span class="line">    Name char(10) not null,</span><br><span class="line"></span><br><span class="line"> Index(id),index(name)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在已有的表中设置index字段</p><ul><li><p>create index 索引名 on 表名(字段名);</p></li><li><p>create index name on ta(name);</p></li></ul><p>删除表中的索引字段</p><ul><li><p>drop index 索引名 on 表名;</p></li><li><p>drop index name on ta(name);</p></li></ul><p>查看表的索引信息</p><ul><li>show index from 表名;</li></ul><p><strong>primary key主键</strong></p><p>注意</p><p>- 一个表中只能有一个primary key字段</p><p>- 对应的字段值不允许有重复，且不允许赋NULL值</p><p>- 如果有多个字段都做为primary key，称为复合主键，必须一起创建,一起删除</p><p>- 主键字段的key标志是PRI</p><p>- 通常与AUTO_INCREMENT连用(auto_increment)</p><p>- 经常把表中能够为以表示记录的字段设置为主键字段 [记录编号字段]</p><p>添加主键的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table ta1(id tinyint primary key, name char(10), stu tinyint, index(stu));</span><br><span class="line"></span><br><span class="line">create table ta1(id tinyint, name char(10), stu tinyint, primary key(id), index(stu));</span><br></pre></td></tr></table></figure><p>复合主键</p><p>把多个字段合并在一起充当主键</p><p>多个字段不能同时相同.</p><p>创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table ta3(cip char(15), </span><br><span class="line"></span><br><span class="line">     port tinyint, </span><br><span class="line"></span><br><span class="line">       status enum(&quot;allow&quot;,&quot;deny&quot;),</span><br><span class="line"></span><br><span class="line">     primary key(cip,port)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>desc ta3; 查询的时候cip和port的key标示是PRI</p><p>  删除主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table ta3 drop primary key;</span><br></pre></td></tr></table></figure><p>  添加主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table ta3 add primary key(cip);  //需要在key里指定主键字段名</span><br></pre></td></tr></table></figure><p>  添加复合主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table ta3 add primary key(cip,port);</span><br></pre></td></tr></table></figure><p>  在修改主键的时候不需要加上主键的设置信息，因为主键有专门删除的语句</p><p>  auto_incremen 自动增长的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table ta3(id int(3) primary key auto_increment,name char(10);</span><br></pre></td></tr></table></figure><p>  删除有自增长的主键时，需要将主键删除后才能删除主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table ta3 modify id int(3) not null;</span><br><span class="line"></span><br><span class="line">alter table ta3 drop primary key;</span><br></pre></td></tr></table></figure><p><strong>foreign key外键</strong></p><pre><code>什么是外键</code></pre><p>​        让当前表字段的值在另一个表中字段值的范围内选择</p><p>使用外键的条件</p><p>​    表的存储引擎必须是 innodb</p><p>​    字段类型要一致</p><p>​    被参照字段必须要是索引类型的一种 (primary key)</p><p>基本用法</p><p>– FOREIGN KEY( 表 A 的字段名 )</p><p>  References 表 B( 字段名 )</p><p>  ON UPDATE CASCADE</p><p>  ON DELETE CASCADE</p><p>新建员工表</p><p>create table ygtab( </p><p>yg_id int(2) primary key auto_increment,</p><p>name char(10) </p><p>)engine=innodb;</p><p>指定只添加name的字段，yg_id自动增长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into ygtab(name) values(&quot;fangfang&quot;);</span><br></pre></td></tr></table></figure><p>新建工资表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table gztab(</span><br><span class="line"></span><br><span class="line">    gz_id int(2),</span><br><span class="line"></span><br><span class="line">    pay float(7,2),</span><br><span class="line"></span><br><span class="line">    foreign key(gz_id) references ygtab(yg_id) </span><br><span class="line"></span><br><span class="line">    on update cascade on delete cascade</span><br><span class="line"></span><br><span class="line">    )engine=innodb;</span><br></pre></td></tr></table></figure><p>查看建表命令,可以查看到个种键的名字</p><p>Show create table 表名;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT `gztab_ibfk_1` FOREIGN KEY (`gz_id`) REFERENCES `ygtab` (`yg_id`)</span><br></pre></td></tr></table></figure><p>删除外键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table gztab drop foreign key 外键名;</span><br></pre></td></tr></table></figure><p>当表被外键关联着，此表无法删除</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>DBA基础</title>
      <link href="/2018/10/15/DBA/DBA_1/"/>
      <url>/2018/10/15/DBA/DBA_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h1><blockquote><p>数据库（database）：依照某种数据模型进行组织并存放到储存器的数据集合</p><p>DBMS，Database Management System</p><p>数据库管理系统：用来操纵号和管理数据库的大型服务软件</p><p>DBS，Database System</p><p>数据库系统：即DB+DBNS，指带有数据库并整合了数据库管理软件的计算机系统</p><p>最著名、应用最广泛的开原数据库软件</p></blockquote><hr><h2 id="安装mysql："><a href="#安装mysql：" class="headerlink" title="安装mysql："></a><strong>安装mysql：</strong></h2><p>1.rpm -e –nodeps  mariadb  //忽略依赖关系卸载包 </p><p>2.[root@client50 mysql-5.7.17]# rpm -Uvh mysql-community-*.rpm</p><blockquote><p>警告：mysql-community-client-5.7.17-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</p><p>错误：依赖检测失败：</p><p>​    perl(JSON) 被 mysql-community-test-5.7.17-1.el7.x86_64 需要</p></blockquote><p>​    当有依赖关系的时候用yum list | grep </p><p>3.当出现上面yum关系依赖的时侯用yum查找相关依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep -i JOSN</span><br></pre></td></tr></table></figure><p>   再使用yum去安装依赖包，最后rpm -Uvh mysql-community-*.rpm，安装就可以了</p><p>4.第一次初始化可能时间会比较长，服务会在 /var/lib/mysql/ 创建默认配置文件</p><ul><li><p>systemctl start mysqld.server</p></li><li><p>端口号为3306</p></li><li><p>服务主配置文件：/etc/my.cnf</p></li><li><p>/var/lib/mysql/mysql.sock客户端访问数据库服务时传递数据，产生的套接字文件，启动服务默认生成</p></li><li><p>服务错误日志：/var/log/mysqld.log</p></li><li><p>pid-file进程号文件：/var/run/mysqld/mysqld.pid</p></li><li><p>进程所有者(管理用户)mysql，家目录是/var/lib/mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -ld /var/lib/mysql        </span><br><span class="line">drwxr-x--x 5 mysql mysql 4096 10月 15 10:19 /var/lib/mysql</span><br></pre></td></tr></table></figure></li><li><p>文件目录/var/lib/mysql下的所有的文件权限都是mysql自己的</p></li></ul><p>5.数据库安装好后, 默认只允许root账户在本机访问</p><p>  安装mysql会生出初始密码，查询初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep password /var/log/mysqld.log </span><br><span class="line"> 2018-10-15T02:18:57.547715Z 1 [Note] A temporary password is   </span><br><span class="line"> generated for root@localhost: a14AG?na/w8-</span><br></pre></td></tr></table></figure><p>  本机访问数据库：mysql  -h localhost -u root -p’a14AG?na/w8-’ //使用单引号对密码特殊字符进行屏蔽 </p><p>5.登陆进数据库后就只能使用：SQL命令（结构化查询语言）</p><blockquote><p>取消命令的执行：  \c</p></blockquote><p>6.使用SQL命令修改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> root@<span class="string">"localhost"</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"123qqq...A"</span>;</span><br></pre></td></tr></table></figure><p>  <strong>命令行</strong>，//模糊显示，只有修改完密码才允许查看</p><p>​    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"%password%"</span>;</span><br></pre></td></tr></table></figure><ul><li><p>修改数据库服务密码策略</p></li><li><p>修改密码复杂度</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>修改密码位数  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>​    此时修改简单密码成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user root@"localhost" identified by '123456';</span><br><span class="line"></span><br><span class="line">    Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>永久设置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">      [mysqld]</span><br><span class="line">      validate_password_policy=0</span><br><span class="line">      validate_password_length=6</span><br></pre></td></tr></table></figure><h2 id="客户端把数据储存到服务器"><a href="#客户端把数据储存到服务器" class="headerlink" title="客户端把数据储存到服务器"></a>客户端把数据储存到服务器</h2><h4 id="1-客户端连接数据库服务器"><a href="#1-客户端连接数据库服务器" class="headerlink" title="1.客户端连接数据库服务器"></a>1.客户端连接数据库服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mysql -h localhost -u root -p123456</span><br></pre></td></tr></table></figure><h4 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h4><p> 新建的数据库在/var/lib/mysql/都由一个同名的文件夹，所属组及所属者都是mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();      //显示当前所在的库</span><br><span class="line"></span><br><span class="line">    <span class="keyword">use</span> 库名               //切换库</span><br><span class="line"></span><br><span class="line">    <span class="keyword">show</span> <span class="keyword">databases</span>;       //显示已有的库</span><br><span class="line"></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">database</span> 库名;  //创建新库</span><br><span class="line"></span><br><span class="line">    <span class="keyword">show</span> <span class="keyword">table</span>;            //显示已有的表</span><br><span class="line"></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">database</span> 库名;    //删除库</span><br><span class="line"></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">database</span> teadb;</span><br></pre></td></tr></table></figure><h4 id="3-创建数据表"><a href="#3-创建数据表" class="headerlink" title="3.创建数据表"></a>3.创建数据表</h4><p>​    每一个表在 /var/lib/mysql/库名/ 下对应者两个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create table 库名.表名(</span><br><span class="line">字段名1 字段类型宽度) 约束条件,</span><br><span class="line">字段名1 字段类型宽度) 约束条件,</span><br><span class="line">...);</span><br><span class="line"></span><br><span class="line">    Use </span><br><span class="line"></span><br><span class="line">    create table stuinfo( id int, age int, name char(8) ); //建表</span><br><span class="line"></span><br><span class="line">    Drop table stuinfo;  </span><br><span class="line"></span><br><span class="line">    show tables;  //显示当前数据库里的表</span><br><span class="line"></span><br><span class="line">    desc stuinfo;  //查看表结构</span><br></pre></td></tr></table></figure><h4 id="4-插入表记录"><a href="#4-插入表记录" class="headerlink" title="4.插入表记录"></a>4.插入表记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teadb.stuinfo <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">20</span>,<span class="string">"xiaowu"</span>),(<span class="number">2</span>,<span class="number">19</span>,<span class="string">"leifeng"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stuinfo;   //查看表内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> stuinfo <span class="keyword">set</span> age=<span class="number">18</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"leifeng"</span>;  //修改leifeng的age</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stuinfo <span class="keyword">where</span> age=<span class="string">'18'</span>; //删除符合where的某一行</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stuinfo ;   //删除表</span><br></pre></td></tr></table></figure><h2 id="Mysql数据类型"><a href="#Mysql数据类型" class="headerlink" title="Mysql数据类型"></a><strong>Mysql数据类型</strong></h2><h3 id="1-数值型"><a href="#1-数值型" class="headerlink" title="1.数值型"></a><em>1.数值型</em></h3><table><thead><tr><th>tinyint</th><th style="text-align:right">1 bit</th><th>微小整数</th></tr></thead><tbody><tr><td>dmallint</td><td style="text-align:right">2 bit</td><td>小整数</td></tr><tr><td>mediumint</td><td style="text-align:right">3 bit</td><td>中整数</td></tr><tr><td>int</td><td style="text-align:right">4 bit</td><td>大整数</td></tr><tr><td>bigint</td><td style="text-align:right">8 bit</td><td>极大整数</td></tr><tr><td>float</td><td style="text-align:right">4 bit</td><td>单精度浮点数</td></tr><tr><td>double</td><td style="text-align:right">8 bit</td><td>双精度浮点数</td></tr><tr><td>decimal</td><td style="text-align:right">对decimal(M,D)其中M为有效位数、D为小数位数、M应大于D、占用M+2bit</td><td></td></tr><tr><td>Unsigned</td><td style="text-align:right">无符号</td></tr></tbody></table><h3 id="2-字符型"><a href="#2-字符型" class="headerlink" title="2.字符型"></a><strong><em>2.字符型</em></strong></h3><p>​    定长：char(字符数)</p><ul><li><p>最大长度255字符数</p></li><li><p>不够指定字符数在右边用空格补齐</p></li><li><p>字符数段超出时，无法写入数据</p></li></ul><p>​    变长：varchar(字符数)</p><ul><li><p>根据存储数据的大小，去在磁盘开辟存储空间</p></li><li><p>最大存65532个字符</p></li><li><p>按数据实际大小分配存储空间</p></li><li><p>字符数段超出时，无法写入数据</p></li></ul><p>​    大文本类型：text/blob</p><ul><li>字符数大于65535存储时使用</li></ul><h3 id="3-日期时间类型"><a href="#3-日期时间类型" class="headerlink" title="3.日期时间类型"></a><strong><em>3.日期时间类型</em></strong></h3><p>​    </p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MY_sed</title>
      <link href="/2018/10/14/Shell/sed/"/>
      <url>/2018/10/14/Shell/sed/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a><strong>编辑器</strong></h3><p>逐行处理，并将结果输出到屏幕</p><p>可实现对文本的输出、删除、替换、复制、剪切、导入、导出等各种操作</p><p>选项：p d s a i c</p><p>语法：</p><p>默认是sed去读每一行，然后判断条件指令的，符合条件就执行指令，不符合就默认输出，指令与指令之间用“;”隔开</p><p>用法1：前置命令  |  sed  [选项]  ‘条件指令’</p><p>用法2：sed [选项]  ‘条件指令’  文件.. .. </p><ul><li style="list-style: none"><input type="checkbox"> -n （屏蔽默认输出，默认sed会输出读取文档的全部内容）</li><li style="list-style: none"><input type="checkbox"> -r （让sed支持扩展正则）</li><li><p>[ ] -i （sed直接修改源文件，默认sed只是通过内存临时修改文件，源文件无影响）</p></li><li><p>[ ] sed -n ‘1,3p’  /etc/passwd  //红色是条件，蓝色是指令</p></li></ul><p>条件指令：</p><p>   ‘3,5p’    打印3到5行<br>  ’3p;5p’   打印第3行和第5行<br>  ‘3,+10p’ 打印第3行以及后面的10行<br>  ‘1~2p’  以第1行开始，步长为2，即打印1,3,5,7,…行，即奇数行</p><h3 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h3><p>​        $ :表示最后一行<br>​        数字(行号)<br>​        /正则/<br>​        没有条件  //全部值</p><h2 id="指令："><a href="#指令：" class="headerlink" title="指令："></a>指令：</h2><p>​        !  非，对指令取反<br>​        P  打印行<br>​        d  删除<br>​        s  替换<br>​        =  打印行号</p><h3 id="支持正则表达式："><a href="#支持正则表达式：" class="headerlink" title="支持正则表达式："></a>支持正则表达式：</h3><p>​        -r  使用扩展正则表达式<br>​        规定：正则表达式必须放在“//”中，例： sed  -n ‘/^root/p’ 打印包含root开始的行<br>​        /正则/</p><p>#替换：<br>​    sed  ‘s/2017/XXXX/‘ wei.txt   //替换每一行的第一个2017<br>​    sed  ‘s/2017/XXXX/g’  wei.tx  //替换全文的2017<br>​    sed  ‘s/2017/XXXX/2’  wei.txt  //替换每一行的第二的2017<br>​    sed  ‘2s/2017/XXXX/2’  wei.txt //替换第二行的第二个2017<br>​    sed  -n  ‘s/2020/XXXX/p’  wei.txt //只显示被替换的行<br>   说明：可以将字符替换为空<br>   注意：替换操作的分隔“/”可改用其他字符，如#、&amp;等，便于修改文件路径<br>   例：sed -n -r ‘s#/bin/bash$#/sbin/sh#p’ /etc/passwd<br>   条件指令内的特殊符号可以使用反斜杠“\”屏蔽掉</p><h3 id="正则保留的表达式"><a href="#正则保留的表达式" class="headerlink" title="正则保留的表达式"></a>正则保留的表达式</h3><p>​        基本：()   //<br>​        扩展：()    //表示复制<br>​        插入:<br>​            i： 在指定的行之前插入文本<br>​            a：在指定的行之后追加文本<br>             c：替换指定的行<br>​            sed ‘2a XX’ a.txt            //在第二行后面，追加XX<br>​            sed ‘2i XX’ a.txt            //在第二行前面，插入XX<br>​            sed ‘2c XX’ a.txt            //将第二行替换为XX</p><p>​    </p><p>//把a.txt另存b.txt<br>sed ‘w b.txt’ a.txt<br>把a.txt的第2行存到b.txt中去<br>sed ‘2w ./b.txt’ a.txt</p><p>sed  ‘2H;5G’ a.txt<br>读取第二行</p><p>sed：逐行处理，处理完第一行再进行下一行<br>1.先将第一行读到模式空间里，若符合条件，则执行指令，再执行默认输出<br>  不符合条件，执行默认输出<br>2.读取下一行，继续匹配条件，直至读完文件为止</p><h3 id="模式空间"><a href="#模式空间" class="headerlink" title="模式空间"></a>模式空间</h3><p>​    存放当前的行，将处理结果输出<br>​    若当前行不符合处理条件，则原样输出<br>​    处理完当前行再读入下一行来处理<br>​    保持空间<br>​    作用类似于“剪切板”<br>​    默认存放一个空行</p><h3 id="基本动作"><a href="#基本动作" class="headerlink" title="基本动作"></a>基本动作</h3><p>​    H：模式空间–[追加]—&gt;保持空间||相当于向保持空间追加复制模式空间里的内容<br>​    h：模式空间–[覆盖]–&gt;保持空间||当于向保持空间复制模式空间里的内容<br>​    G：保持空间 —[追加]—-&gt;模式空间<br>​    g：保持空间 —[追加]—-&gt;模式空间</p><h2 id="总结知识点："><a href="#总结知识点：" class="headerlink" title="总结知识点："></a>总结知识点：</h2><p>​    sed [选项] ‘条件指令’ 文件<br>​    选项:<br>​    -n 屏蔽默认输出<br>​    -r 支持扩展正则<br>​    -i 修改源文件<br>​    条件：<br>​    行号 4 4,5 4~2 4,+10 //红色：步长为2，打印第4行及其以后的奇数行<br>​    /正则/<br>​    指令：<br>​    p 打印<br>​    d 删除<br>​    s 替换s/旧/新/g<br>​    a 追加<br>​    i 插入<br>​    c 替换行     sed -rn ‘/Fred/s/^//123’ 163.txt  //在有“Fred”的行的行首加入“123”<br>     sed -rn ‘/Fred/s/$/123/‘ 163.txt  //在有“Fred”的行的行尾加入“123”</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hexo简单项目部署</title>
      <link href="/2018/07/25/hexo%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/07/25/hexo%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="github相关设置"><a href="#github相关设置" class="headerlink" title="github相关设置"></a>github相关设置</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>安装包见群文件</p><h2 id="新建ssh-key"><a href="#新建ssh-key" class="headerlink" title="新建ssh key"></a>新建ssh key</h2><ol><li>在桌面右键选择git bash here</li><li>创建本地ssh key,输入如下命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure></li></ol><p>回车，然后记录下ssh的默认保存路径，</p><ol start="3"><li>后续一路回车，直到出现很多泡沫</li><li>打开ssh默认保存路径，找到id_rsa.pub文件，复制里面的内容备用</li></ol><h2 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h2><ol><li>打开<a href="https://www.github.com" target="_blank" rel="noopener">github</a>点击右上角sign up注册个人账号</li><li>点击头像右侧倒三角，选择settings按钮</li><li>选择左侧ssh and gpk keys</li><li>点击右侧 添加ssh key按钮<br>title随意，下方粘贴创建好的ssh key</li><li>点击下方create ssh按钮</li></ol><h2 id="验证ssh-key"><a href="#验证ssh-key" class="headerlink" title="验证ssh key"></a>验证ssh key</h2><ol><li>命令行输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>回车，如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully 就表示已成功连上github</p><ol start="2"><li><p>验证github用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br></pre></td></tr></table></figure></li><li><p>验证邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="测试github本地连接"><a href="#测试github本地连接" class="headerlink" title="测试github本地连接"></a>测试github本地连接</h2><ol><li>点击github主页头像左侧+，选择new repository</li><li>创建一个仓库，取名随意，比如:abc</li><li><p>创建成功后，复制提示代码,如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# abc&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:NicolasGui/abc.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>在桌面创建任意文件夹，并打开</p></li><li>右键git bash here</li><li>右键past刚才复制的代码回车</li><li>弹出框内根据提示登录github账号</li><li>个别情况下需要在命令行窗口验证github用户名</li><li>刷新github的abc仓库，如果本地文件存在，证明连接无误<br>否则删除文件夹内所有文件，重复步骤4~8<h1 id="推送本地博客到github"><a href="#推送本地博客到github" class="headerlink" title="推送本地博客到github"></a>推送本地博客到github</h1><h2 id="配置hexo的-config-yml文件"><a href="#配置hexo的-config-yml文件" class="headerlink" title="配置hexo的_config.yml文件"></a>配置hexo的_config.yml文件</h2></li><li>打开博客项目根目录的_config.yml文件</li><li>在文件底部配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/用户名/用户名.github.io</span><br></pre></td></tr></table></figure></li></ol><p>并且保存</p><ol start="3"><li><p>安装deploy依赖包（仅需操作一次）<br>在blog所在路径输入如下命令回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>添加域名解析文件<br>在vscode工具里面，选中根目录的source文件，右键选择新建文件(new file)，取名为CNAME ,不带后缀名,打开该文件，填入自己的域名，不带www也不带http，如:baidu.com保存即可</p></li><li><p>在blog所在路径依次输入如下命令<br>清除缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li></ol><p>编译博客文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><p>上传代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><ol><li>打开阿里云域名控制中心</li><li>选中自己购买的域名，点击右侧解析</li><li>删除已有的解析记录值</li><li>点击新建解析按钮添加三条记录值</li></ol><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析线路</th><th>记录值</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>默认</td><td>用户名.github.io</td></tr><tr><td>A</td><td>@</td><td>默认</td><td>192.30.252.153</td></tr><tr><td>A</td><td>@</td><td>默认</td><td>192.30.252.154</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>linux云计阶段1-必备知识</title>
      <link href="/2018/07/24/linux%E4%BA%91%E8%AE%A1%E9%98%B6%E6%AE%B51-%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/07/24/linux%E4%BA%91%E8%AE%A1%E9%98%B6%E6%AE%B51-%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux云计算-阶段1-必备知识"><a href="#Linux云计算-阶段1-必备知识" class="headerlink" title="Linux云计算-阶段1-必备知识"></a>Linux云计算-阶段1-必备知识</h1><h2 id="Linux管理员技术-——"><a href="#Linux管理员技术-——" class="headerlink" title="Linux管理员技术 ——"></a>Linux管理员技术 ——</h2><p>################################################################################</p><h3 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h3><p>01.常见的Linux发行版本<br>‘’’<br>Red Hat Enterprise Linux 5/6/7<br>Suse Linux Enterprise 12<br>Debian Linux 7.8<br>Ubuntu Linux 14.10/15.04<br>‘’’</p><p>02.Linux目录结构中“/”与“/dev”主要作用？<br>/代表的是Linux系统的根目录（系统的起点）<br>/dev目录主要存放设备文件（如硬盘、键盘、鼠标、光驱）</p><p>03.Linux中常见的文件系统都有哪些？<br>EXT4，第四代扩展文件系统，RHEL6系列默认<br>XFS，高级日志文件系统，RHEL7系列默认<br>SWAP，交换空间（虚拟内存）</p><p>04.挂载点的作用是什么<br>访问设备资源的访问点（就是一个目录）</p><p>05.查看主机名与IP地址的命令分别是？<br>hostname、ifconfig</p><p>06.关机与重启的命令分别是?<br>关机命令：poweroff、init 0、shutdown –h  now、halt<br>重启命令：reboot、init 6、shutdown  -r  now</p><p>07.切换目录的命令是？<br>cd</p><p>08.显示目录内容详细属性命令是？<br>ls  -l<br>09.敲命令提示“command not found”原因有哪些？<br>命令输入有误<br>命令程序没有安装</p><p>10.查看CPU信息命令是？<br>lscpu</p><p>11.交换空间的作用是什么<br>使用磁盘空间，缓解物理内存不足的问题</p><p>Day02<br>01.Linux中命令的执行依赖于解释器，默认的解释器是哪个程序？<br>/bin/bash</p><p>02.Linux中一条完整的命令，它的格式是什么<br>命令字  [选项]   [参数1]   [参数2]  ……<br>备注：命令字必须有，[]为可选项</p><p>03.以下<em>、?、[]、{}这些符号的作用</em>：任意多个任意字符<br>?：单个字符<br>[a-z]：多个字符或连续范围中的一个，若无则忽略<br>{a,min,xy}：多组不同的字符串，全匹配</p><p>04.在Linux中如何访问光驱设备中的内容<br>通过挂载实现访问，mount  /dev/cdrom  挂载点</p><p>05.卸载光驱设备时提示“设备正忙”无法卸载，其原因是什么<br>当前所在位置在挂载点内，有其他终端或用户正在访问</p><p>06.查看目录本身的详细属性与查看目录内容的详细属性，如何操作<br>ls  -l<br>ls  -ld</p><p>07.vim文本编辑器有哪些工作模式，如何进行切换</p><p>08.使用cp命令时，源是一个目录时需要加什么选项？<br>保持原文件的属性不变需要加什么选项？<br>复制时出现同名的文件，禁止提示该如何操作？<br>-r、-p、\cp</p><p>09.如何将文档重命名<br>路径不变的移动： mv命令</p><p>Day03<br>01.“&gt;”与“&gt;&gt;”的区别？</p><blockquote><p>是覆盖重定向，&gt;&gt;是追加重定向</p></blockquote><p>02.如何查找文本文件中包含指定字符串的行<br>grep   关键字    /路径/文件名 </p><p>03.查找在系统中所有属于student用户的文本文件,并且拷贝到/opt目录<br>find  /  -user  student  -type f  -exec cp  {}  /opt \; </p><p>04.如何查看DNS服务器地址<br>cat /etc/resolv.conf</p><p>05.如何永久修改主机名<br>修改/etc/hostname文件</p><p>06.网卡eth0配置文件所在路径<br>/etc/sysconfig/network-scripts/ifcfg-eth0</p><p>07.使用nmcli创建一个新连接，并为其配置静态IP地址等参数</p><h1 id="nmcli-connection-add-con-name-“连接名”-ifname-“接口名”-type-ethernet"><a href="#nmcli-connection-add-con-name-“连接名”-ifname-“接口名”-type-ethernet" class="headerlink" title="nmcli  connection  add  con-name  “连接名”  ifname  “接口名”  type  ethernet"></a>nmcli  connection  add  con-name  “连接名”  ifname  “接口名”  type  ethernet</h1><h1 id="nmcli-connection-modify-“连接名”-ipv4-method-manual-ipv4-address-“IP地址-掩码长度-默认网关”"><a href="#nmcli-connection-modify-“连接名”-ipv4-method-manual-ipv4-address-“IP地址-掩码长度-默认网关”" class="headerlink" title="nmcli  connection  modify  “连接名”  ipv4.method  manual  ipv4.address  “IP地址/掩码长度  默认网关”"></a>nmcli  connection  modify  “连接名”  ipv4.method  manual  ipv4.address  “IP地址/掩码长度  默认网关”</h1><h1 id="nmcli-connection-modify-“连接名”-ipv4-dns-DNS服务器地址-connection-autoconnect-yes"><a href="#nmcli-connection-modify-“连接名”-ipv4-dns-DNS服务器地址-connection-autoconnect-yes" class="headerlink" title="nmcli  connection  modify  “连接名”  ipv4.dns  DNS服务器地址  connection.autoconnect  yes"></a>nmcli  connection  modify  “连接名”  ipv4.dns  DNS服务器地址  connection.autoconnect  yes</h1><h1 id="nmcli-connection-up-“连接名”"><a href="#nmcli-connection-up-“连接名”" class="headerlink" title="nmcli  connection  up  “连接名”"></a>nmcli  connection  up  “连接名”</h1><p>08.为红帽系列Linux主机指定可用的yum软件源</p><h1 id="vim-etc-yum-repos-d-文件名-repo"><a href="#vim-etc-yum-repos-d-文件名-repo" class="headerlink" title="vim  /etc/yum.repos.d/文件名.repo"></a>vim  /etc/yum.repos.d/文件名.repo</h1><p>[仓库id]<br>name = 仓库描述文字<br>baseurl = 仓库的访问地址(<a href="http://172.25.254.254/dvd" target="_blank" rel="noopener">http://172.25.254.254/dvd</a>)<br>gpgcheck = 0</p><p>09.利用wget下载 <a href="http://classroom.example.com/redhat.txt，该命令是？" target="_blank" rel="noopener">http://classroom.example.com/redhat.txt，该命令是？</a><br>wget <a href="http://classroom.example.com/redhat.txt" target="_blank" rel="noopener">http://classroom.example.com/redhat.txt</a></p><p>10.在RHEL中利用rpm命令如何安装一个rpm包，如果出现依赖关系，怎样解决<br>利用rpm -ivh命令安装，可以手动寻找依赖包或者搭建Yum软件仓库</p><p>11.简述搭建Yum仓库配置过程<br>搭建本地Yum仓库，首先具备光盘ISO镜像文件直接挂载即可</p><h1 id="mount-ISO镜像文件-挂载点"><a href="#mount-ISO镜像文件-挂载点" class="headerlink" title="mount ISO镜像文件    挂载点"></a>mount ISO镜像文件    挂载点</h1><p>或者将光盘文件放入光驱设备，再将光驱设备挂载</p><h1 id="mount-dev-cdrom-挂载点"><a href="#mount-dev-cdrom-挂载点" class="headerlink" title="mount /dev/cdrom    挂载点"></a>mount /dev/cdrom    挂载点</h1><p>再编写Yum客户端配置文件</p><p>1.搭建网络Yum仓库，服务端搭建FTP或者Web服务，提供光盘所有内容<br>2.客户端测试访问服务端搭建FTP或者Web服务，能否看到光盘所有内容<br>3.再编写Yum客户端配置文件</p><p>Day04<br>01.重启服务chronyd 然后其设置为开机自启<br>systemctl  restart  chronyd  #重启服务<br>systemctl  enable chronyd  #设置开机自启</p><p>02.使用 tar 工具制作/root/backup.tar.bz2 的归档文件，其中包含 /usr/local 目录中的内容<br>tar  -jcf  /root/backup.tar.bz2   /usr/local</p><p>03.Linux如何标识用户账户和组账号<br>UID与GID</p><p>04.保存用户帐号的基本信息的配置文件，都有哪些字段<br>用户名:X:UID:GID:用户描述信息:家目录:解释器(shell)</p><p>05.非交互式为zhangsan设置密码123的命令<br>echo  123  |  passwd –stdin zhangsan</p><p>06.如何添加用户harry到组tarena中？<br>gpasswd  -a  harry  tarena</p><p>07.Linux中编写周期性计划任务命令是什么？<br>crontab  -e</p><p>08.使用crontab编辑计划任务时，每一条任务记录的格式组成<br>分钟  小时  日期  月份  星期      任务命令行</p><p>09.账号与组相关的配置文件有哪些？<br>用户相关：/etc/passwd  /etc/shadow<br>组相关：/etc/group   /etc/gshadow</p><p>Day05<br>01.Linux中文档的归属关系有哪些？<br>所有者、所属组、其他人</p><p>02.用户能否cd切换到某个目录下，和什么权限有关？<br>x执行权限</p><p>03.修改文档归属关系及修改文档权限的命令是什么？<br>chown、chmod</p><p>04.使用户 natasha 能够对此文件/opt/1.txt执行读和写操作，利用ACL策略操作命令是什么？<br>setfacl -m  u:natasha:rw  /opt/1.txt</p><p>05.在某个目录中创建的新文档，其所属组会自动设置，与父目录相同的所属组，如何实现？<br>为此目录设置Set GID权限<br>chmod  g+s   目录名</p><p>06.查看NFS服务器有那些共享目录列表，使用的命令？<br>showmount  -e   服务端IP地址</p><p>07.将NFS服务器(192.168.1.1)上共享目录/home/guests，挂载到本地/mnt其操作命令是？<br>mount  192.168.1.1:/home/guests  /mnt</p><p>08.LDAP用户账号与普通的系统用户账号有哪些差异<br>LDAP用户：属于网络账号，其登录名、密码存放在其他服务器上<br>普通系统用户：属于本地账号，其登录名、密码存放在本系统的/etc/passwd、/etc/shadow等文件中</p><p>Day06</p><p>01.如何使用新磁盘的空间，分区、格式化的流程<br>识别物理硬盘==&gt;分区规划==&gt;格式化==&gt;挂载使用<br>案例：<br>lsblk==&gt;识别物理硬盘<br>fdisk==&gt;划分分区<br>partprobe==&gt;刷新新的分区<br>mkfs.文件系统==&gt;格式化<br>mount==&gt;挂载使用<br>/etc/fstab==&gt;完成开机自动挂载</p><p>01.msdos分区模式的特点有哪些，如何使用fdisk工具调整硬盘的分区表<br>msdos分区模式：<br>可以划分1~4个主分区，或者0~3个主分区+1个扩展分区（n个逻辑分区），操作的磁盘&lt;2.2TB</p><h1 id="fdisk-dev-磁盘名"><a href="#fdisk-dev-磁盘名" class="headerlink" title="fdisk  /dev/磁盘名"></a>fdisk  /dev/磁盘名</h1><p>主要操作指令：n 新建、d 删除、p 查看分区表、w 保存退出、q 不保存退出</p><p>02.将分区格式化成ext4文件系统的命令是什么<br>mkfs.ext4</p><p>03.重新检测刷新分区表命令是什么<br>partprobe</p><p>04.实现开机自动挂载的配置文件都有哪些字段<br>设备路径  挂载点  类型   参数  备份标记  检测标记<br>案例：<br>/dev/sdb1  /mnt/mypart  ext4  defaults  0 0</p><p>05.查看分区挂载使用情况命令是什么<br>df  -h</p><p>06.逻辑卷创建的思路？<br>1.将硬盘或分区转化为物理卷，<br>2.将一个或多个物理卷组成卷组<br>3.再从卷组中划分逻辑卷<br>案例：<br>1.创建基本分区/dev/sdb1 /dev/sdb2等<br>2.创建卷组：vgcreate  myvg  /dev/sdb1   /dev/sdb2<br>3.划分逻辑卷：lvcreate –L 16G  -n mylv  myvg</p><p>07.卷组与逻辑卷创建的命令格式？<br>vgcreate 卷组名 物理设备<br>lvcreate -L 大小 -n 逻辑卷名 卷组名<br>或者<br>lvcreate -l PE个数  -n 逻辑卷名 卷组名</p><p>08.如何格式化swap交换文件系统，如何启用swap分区，如何查看swap空间成员信息<br>mkswap<br>swapon<br>swapon -s</p><p>09.LVM逻辑卷存储方案如何实现，其中主要命令工具的用法<br>LVM存储方案：1个或多个零散存储设备（物理卷） ==》整合为更大的虚拟磁盘（卷组） ==》从此虚拟磁盘内再划分出虚拟的分区（逻辑卷），主要优势：设备化零为整、容量动态伸缩<br>主要命令工具：</p><h1 id="vgcreate-卷组名-物理存储设备…"><a href="#vgcreate-卷组名-物理存储设备…" class="headerlink" title="vgcreate  卷组名  物理存储设备…"></a>vgcreate  卷组名  物理存储设备…</h1><h1 id="vgextend-卷组名-新增加的物理存储设备…"><a href="#vgextend-卷组名-新增加的物理存储设备…" class="headerlink" title="vgextend  卷组名  新增加的物理存储设备…"></a>vgextend  卷组名  新增加的物理存储设备…</h1><h1 id="lvcreate-L-大小-n-逻辑卷名-卷组名"><a href="#lvcreate-L-大小-n-逻辑卷名-卷组名" class="headerlink" title="lvcreate  -L  大小  -n  逻辑卷名  卷组名"></a>lvcreate  -L  大小  -n  逻辑卷名  卷组名</h1><h1 id="lvextend-L-新的大小-dev-卷组名-逻辑卷名"><a href="#lvextend-L-新的大小-dev-卷组名-逻辑卷名" class="headerlink" title="lvextend  -L  新的大小  /dev/卷组名/逻辑卷名"></a>lvextend  -L  新的大小  /dev/卷组名/逻辑卷名</h1><p>################################################################################</p><p>Linux工程师技术 —— </p><p>################################################################################<br>Day01<br>01.命令别名的作用，设置永久有效的命令别名<br>别名的作用：为需要频繁使用而又冗长的命令行建立一个更短、更好记的命令字</p><h1 id="vim-etc-bashrc"><a href="#vim-etc-bashrc" class="headerlink" title="vim  /etc/bashrc"></a>vim  /etc/bashrc</h1><p>alias  别名=’实际命令行’</p><p>02.红帽7系列防火墙服务预设的安全区域public、trusted、drop的作用和特点<br>public区域：为默认区域，只允许针对本机的 SSH 服务，其他都拒绝<br>trusted区域：对本机的任何访问都被允许<br>drop区域：访问本机的任何数据包都会被拒绝</p><p>03.SELinux是什么，对Linux系统有什么影响，当前修改及查看SELinux状态的命令<br>SELinux机制：基于内核的安全增强机制，能够为Linux系统中的文档、进程等对象提供一套预设的保护规则<br>对Linux系统的影响：在强制保护的模式下，即便是root也不能违反其保护规则（除非更改或回避规则）<br>setenforce、getenforce</p><p>04.设置RHEL7防火墙默认区域为trusted，如何操作？<br>firewall-cmd –set-default-zone=trusted</p><p>Day02<br>01.在RHEL7系统中，常用于搭建邮件服务器的软件是什么<br>postfix</p><p>02.用户收发邮件所使用协议是什么，这协议使用的端口号是多少<br>用户发送邮件：SMTP端口为25<br>用户收邮件：POP3与IMAP 端口号分别为110与143</p><p>03.请利用mail命令非交互式发一封邮件，收件人：<a href="mailto:student@example.com" target="_blank" rel="noopener">student@example.com</a>，发件人：<a href="mailto:xln@qq.com" target="_blank" rel="noopener">xln@qq.com</a>，邮件正文为“hello”，邮件主题为“firstmail<br>echo hello | mail -s firstmail  -r  <a href="mailto:xln@qq.com" target="_blank" rel="noopener">xln@qq.com</a> <a href="mailto:student@example.com" target="_blank" rel="noopener">student@example.com</a></p><p>04.为数据库用户授权, 允许用户lisi从本机访问，具有查询权限，密码为atenorth，查询的数据库为nsd<br>GRANT select ON nsd.* TO lisi@localhost IDENTIFIED BY ‘atenorth’；</p><p>05.查询在nsd数据库中user表中的信息，user表中字段为name与pass，查询user表中pass字段值为123的记录，请写出数据库查询语句<br>SELECT * FROM nsd.user WHERE pass=’123’;</p><p>Day03<br>01.配置httpd网站服务器时，快速添加新的虚拟主机<br>1）为每一个虚拟主机建立一份独立的配置文件，放到/etc/httpd/conf.d/目录下，配置文件名称以.conf结尾<br>2）配置 <virtualhost ip地址:端口号=""> .. .. </virtualhost> 区段标记，其中使用语句ServerName指定站点名称，使用DocumentRoot指定网页目录<br>3）然后重新启动httpd服务</p><p>02.基于httpd架设一个安全Web站点的条件<br>安装 mod_ssl 模块软件包<br>提供可用的网站证书、密钥并部署到正确的位置<br>修改 /etc/httpd/conf.d/ssl.conf 配置文件，指定站点名、网页目录、证书及密钥的路径</p><p>03.动态网页与静态网页的区别，基于httpd要支持PHP程序、Python程序需要具备的条件<br>静态网页：浏览器访问到的网页文件 就是 服务端提供的网页文件<br>动态网页：浏览器访问到的网页文件 是 由服务端指定的程序动态生成的网页文件<br>支持PHP程序：安装 httpd、php 软件包<br>支持Python程序：安装 httpd、mod_wsgi软件包，并在配置站点时添加程序调用别名（WSGIScriptAlias）</p><p>Day04</p><p>01.NFS指的是什么，与EXT4、XFS主要区别<br>NFS，Network File System：文档资源存放在其他主机的目录上，网络文件系统<br>EXT4、XFS：文档资源存放在本机已格式化好的分区等设备上，本地文件系统</p><p>02.参调整SELinux开关策略，查看所有SELinux布尔值的命令<br>getsebool -a</p><p>03.配置NFS共享需要修改的配置文件<br>/etc/exports</p><p>Day05</p><p>01.什么是shell脚本，使用shell脚本有什么好处<br>Shell脚本：集合了很多命令行、能够完成特定任务的、可以按照顺序批量反复去执行的文件<br>Shell脚本的优势：将重复的任务流程化、将复杂的任务简单化、将人工干预的任务自动化</p><p>02.在Shell中定义变量名有哪些要求<br>变量名有字母、下划线、数字组成，不能以数字开头</p><p>03.如何将echo hello的输出信息，变成错误输出<br>echo hello  &gt; &amp;2</p><p>04.预定义变量$？如何运用<br>该变量储存了上一条命令的返回值，如果为0则上命令运行成功，如果非0则上命令运行不成功</p><p>################################################################################</p><p>系统&amp;服务管理进阶 ——</p><p>################################################################################</p><p>Day01</p><p>01.SSH免密码登录<br>创建并部署SSH密钥<br>使用 ssh-keygen 生成密钥对<br>使用 ssh-copy-id 将公钥部署到 KVM 服务器</p><p>02.ssh使用的端口号是多少<br>22</p><p>Day02<br>01.为/root文件夹做一个快捷方式admin，放在/data下。操作命令为<br>ln -s  /root   /data/admin</p><p>02.设置文档的访问权限时，数值777、755、700、644、600、000各自表示何种权限<br>777 ==》rwxrwxrwx<br>755 ==》rwxr-xr-x<br>700 ==》rwx——<br>644 ==》rw-r–r–<br>600 ==》rw——-<br>000 ==》———</p><p>03.简述Linux目录/、/boot、/home、/root、/bin、/dev、/etc的用途<br>/：整个Linux文件系统的根目录<br>/boot：存放系统内核、启动菜单配置等文件<br>/home：存放普通用户的默认家目录（同名子目录）<br>/root：管理员的家目录<br>/bin、/sbin：存放系统命令、可执行的程序<br>/dev：存放各种设备文件<br>/etc：存放各种系统配置、系统服务配置文件</p><p>04.将/root/linux.zip解压缩到/data下的命令是什么<br>unzip  /root/linux.zip  -d  /data</p><p>05.在vim命令模式中，输入什么可以删除光标之后的内容<br>d$或者C</p><p>06.在vim命令模式中，输入什么可以删除当前行内容，输入什么可以复制当前行内容<br>dd<br>yy</p><p>07.简述从源代码编译安装软件的基本过程，其中每个环节的用途、命令工具<br>tar 解包：将下载的源码包解压释放<br>./configure 配置：建立安装清单（指定安装目录、需要的功能等）<br>make 编译：根据安装清单将源代码文件制作成二进制的可执行程序文件或相关模块<br>make install 安装：将可执行文件、相关模块、配置、文档等安装到系统中</p><p>Day03<br>01.Linux中查看进程树的命令是什么？显示完整的命令和PID？<br>pstree、pstree -ap</p><p>02.检索进程信息的命令是什么？输出进程名?<br>pgrep、pgrep -l</p><p>03.如何将进程放入后台，方式都有哪些？有什么区别？？<br>&amp;：正在运行的状态放入后台<br>Ctrl+z：暂停放入后台</p><p>04.杀死一个进程的命令都有哪些？？<br>kill、killall、pkill</p><p>05.当前切换为multi-user.target运行模式的指令是什么？<br>systemctl  isolate  multi-user.target</p><p>06.设置multi-user.target为默认运行模式的指令是什么？<br>systemctl  set-default  multi-user.target</p><p>07.RAID阵列指的是什么，RAID0、RAID1、RAID10、RAID5、RAID6各级别的特点对比<br>RAID0：条带模式，至少2块磁盘，通过并发读写提高效率<br>RAID1：镜像模式，至少2块磁盘，通过镜像备份提高磁盘设备的可靠性<br>RAID10：条件+镜像模式，相当于RAID1+RAID0，至少4块磁盘，读写效率及可靠性都更高<br>RAID5：高性价比模式，至少3块磁盘，其中1块磁盘容量用来存放恢复校验数据<br>RAID6：相当于扩展版的RAID5，至少4块磁盘，其中2块磁盘容量用来存放恢复校验数据<br>Day04<br>01.DNS服务器的作用，权威DNS、缓存DNS的区别，快速搭建缓存DNS服务器<br>DNS服务器的作用：为客户机提供“域名–&gt;IP地址”的信息查询服务<br>权威DNS：至少负责一个DNS区域，经过互联网域名管理机构授权，只提供对少量域名的查询<br>缓存DNS：不要求负责任何DNS区域，无需授权，但是能代理客户机的请求去查询几乎所有的域名</p><p>02.DNS使用的端口是多少？<br>53</p><p>03.默认存放地址库文件的路径？<br>/var/named</p><p>04.保持权限不便进行拷贝，需要添加的选项是什么？<br>-p</p><p>05.搭建DNS服务器时默认是否允许递归查询？<br>允许</p><p>06.常见的DNS资源解析记录有哪些?<br>正向解析、反向解析、NS记录</p><p>Day05<br>01.查询pxeLinux.0文件是由Yum仓库中那个包产生的，该命令是什么？<br>yum provides */pxelinux.0</p><p>02.DNCP服务端，使用的端口号是多少？<br>67</p><p>03.TFTP默认共享目录在哪里？<br>/var/lib/tftpboot</p><p>04.配置启动菜单项文件，该文件存放的路径及名称？<br>/var/lib/tftpboot/pxelinux.cfg/default</p><p>05.图形生成ks应答文件的工具是什么?<br>system-config-kickstart</p><p>06.实现PXE网络批量装机需要具备哪些条件，各组件的作用，如何实现无人值守安装<br>DHCP服务器：为客户机提供IP地址等参数，并告知下一个服务器地址、启动文件名<br>TFTP服务器：为客户机提供启动文件、启动菜单配置、用来安装系统的内核及初始镜像文件<br>软件仓库：通过HTTP或FTP方式为客户机提供安装树资源（RHEL7光盘目录结构）<br>实现kickstart无人值守安装：<br>    1）提前准备一份安装过程中所涉及问题的答案清单（即应答文件）<br>    2）然后将此文件部署到客户机可下载的位置<br>    3）通过修改pxelinux.0的启动配置，使客户机装系统时自动调用应答文件实现面交互</p><p>Day06<br>01.简述DNS分离解析的工作原理，关键配置<br>DNS分离解析：针对同一个域名，为不同的客户机提供不同的解析结果<br>关键配置：通过view语句为客户端分类，在每个视图内使用match-client来匹配客户机的来源地址，每个视图内都定义目标DNS区域但调用不同的地址库文件</p><p>02.将远程主机192.168.1.1的 /boot/ 目录内容同步为本地的 /fromssh，并且启用归档模式、显示详细操作信息、传输过程中启用压缩/解压、删除目标文件夹内多余的文档，请写出该命令？（采用ssh方式）<br>rsync –avz –delete  <a href="mailto:root@192.168.1.1" target="_blank" rel="noopener">root@192.168.1.1</a>:/boot/   /fromssh<br>03.搭建Cobbler装机平台，修改主配置文件需要哪些内容？<br>next_server:   192.168.4.180   #设置下一个服务器还为本机<br>server:  192.168.4.180         #设置本机为cobbler服务器<br>manage_dhcp:  1                #设置cobbler管理dhcp服务<br>pxe_just_once:  1              #防止客户端重复安装操作系统，默认从本地硬盘启动</p><p>04.Cobbler装机平台与传统PXE网络装机优势有哪些？<br>1.Cobbler具备多系统的镜像仓库及应答文件仓库，非常适合多系统的安装<br>2.Cobbler会默认生成菜单文件及应答文件，非常自动化<br>3.Cobbler会自动搭建网络Yum仓库</p><p>################################################################################</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hexo+github搭建个人博客教程</title>
      <link href="/2018/07/24/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>/2018/07/24/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo+github搭建个人博客</p><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><h3 id="特点：快速、简洁且高效的博客框架"><a href="#特点：快速、简洁且高效的博客框架" class="headerlink" title="特点：快速、简洁且高效的博客框架"></a>特点：快速、简洁且高效的博客框架</h3><h3 id="环境-基于node-v8-11-3"><a href="#环境-基于node-v8-11-3" class="headerlink" title="环境:基于node(v8.11.3)"></a>环境:基于node(v8.11.3)</h3><ol><li>环境及检测:<br>   win+r输入cmd回车<br>   cmd窗口输入node -v回车<br>   如果提示:node不是内部或者外部命令<br>   则需要安装node</li><li>安装node环境<br>   <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">下载</a> 8.11.3版本<pre><code>双击下载得到的mis文件，全程next安装</code></pre><h1 id="安装git-版本控制器"><a href="#安装git-版本控制器" class="headerlink" title="安装git(版本控制器)"></a>安装git(版本控制器)</h1>安装包在qq群文件<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1>cmd命令: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ol><p>npm:基于node的包管理器，类似于ios的App store<br>    通过npm可以下载安装需要的插件或者框架<br>install:安装、导入<br>-g:表示全局安装(在任何的目录都可以使用)</p><h1 id="初始化一个博客项目"><a href="#初始化一个博客项目" class="headerlink" title="初始化一个博客项目"></a>初始化一个博客项目</h1><ol><li>hexo init blog</li><li>切换到项目目录<br>  cd blog</li><li>安装项目依赖包<br>  npm install</li><li>启动服务<br>  hexo s<br>资源网站：<br>hexo：<a href="http://www.hexo.io" target="_blank" rel="noopener">http://www.hexo.io</a><br>小图标:<a href="https://www.easyicon.net" target="_blank" rel="noopener">https://www.easyicon.net</a><br>miho主题:<a href="https://github.com/WongMinHo/hexo-theme-miho" target="_blank" rel="noopener">https://github.com/WongMinHo/hexo-theme-miho</a></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>markdown 语法</title>
      <link href="/2018/07/24/markdown-%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/07/24/markdown-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="字体特效"><a href="#字体特效" class="headerlink" title="字体特效"></a>字体特效</h1><h2 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h2><p><em>字体倾斜效果</em></p><h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h2><p><strong>字体加粗效果</strong></p><h2 id="字体加粗倾斜"><a href="#字体加粗倾斜" class="headerlink" title="字体加粗倾斜"></a>字体加粗倾斜</h2><p><strong><em>字体加粗倾斜</em></strong></p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>删除线效果</del></p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><h2 id="三个或三个以上英文减号"><a href="#三个或三个以上英文减号" class="headerlink" title="三个或三个以上英文减号"></a>三个或三个以上英文减号</h2><p>三个或三个以上英文星号</p><hr><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p><a href="http://www.baidu.com" target="_blank" rel="noopener">点我</a>跳转到百度<br><a href="http://localhost:4000/2018/07/23/%E4%BB%8A%E6%97%A5%E6%AF%92%E9%B8%A1%E6%B1%A4/" target="_blank" rel="noopener">毒鸡汤</a></p><h1 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h1><p><img src="http://img.99danji.com/uploadfile/2018/0604/20180604111848992.gif" alt="夏天"></p><h1 id="图片超链接"><a href="#图片超链接" class="headerlink" title="图片超链接"></a>图片超链接</h1><p><a href="超链接地址"><img src="图片地址" alt="图片名称"></a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>语法:用-/+/*开头都可以</p><ul><li>列表项一</li><li>列表项二</li><li>列表项三<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2></li></ul><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1></li></ol><table><thead><tr><th>姓名</th><th>技能</th><th>排行</th></tr></thead><tbody><tr><td>刘备</td><td>哭</td><td>老大</td></tr><tr><td>关于</td><td>打</td><td>老二</td></tr><tr><td>张飞</td><td>骂</td><td>老三</td></tr></tbody></table><h1 id="代码引入-语法高亮"><a href="#代码引入-语法高亮" class="headerlink" title="代码引入,语法高亮"></a>代码引入,语法高亮</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def fun():</span><br><span class="line">    print(&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function fun()&#123;</span><br><span class="line">    var b = 2;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
  
  
</search>
